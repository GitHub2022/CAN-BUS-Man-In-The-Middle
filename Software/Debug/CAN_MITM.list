
CAN_MITM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000677c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800714c  0800714c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007154  08007154  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007154  08007154  00017154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800715c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000208  08007364  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08007364  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f169  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000281f  00000000  00000000  0002f39a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f60  00000000  00000000  00031bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00032b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d8d3  00000000  00000000  00033940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf91  00000000  00000000  00051213  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a047c  00000000  00000000  0005d1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd620  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a6c  00000000  00000000  000fd69c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000208 	.word	0x20000208
 8000200:	00000000 	.word	0x00000000
 8000204:	08006948 	.word	0x08006948

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000020c 	.word	0x2000020c
 8000220:	08006948 	.word	0x08006948

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b974 	b.w	8000534 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	468c      	mov	ip, r1
 800026a:	4604      	mov	r4, r0
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d14b      	bne.n	800030a <__udivmoddi4+0xa6>
 8000272:	428a      	cmp	r2, r1
 8000274:	4615      	mov	r5, r2
 8000276:	d967      	bls.n	8000348 <__udivmoddi4+0xe4>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0720 	rsb	r7, r2, #32
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	fa20 f707 	lsr.w	r7, r0, r7
 800028a:	4095      	lsls	r5, r2
 800028c:	ea47 0c03 	orr.w	ip, r7, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000296:	fbbc f7fe 	udiv	r7, ip, lr
 800029a:	fa1f f885 	uxth.w	r8, r5
 800029e:	fb0e c317 	mls	r3, lr, r7, ip
 80002a2:	fb07 f908 	mul.w	r9, r7, r8
 80002a6:	0c21      	lsrs	r1, r4, #16
 80002a8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ac:	4599      	cmp	r9, r3
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x60>
 80002b0:	18eb      	adds	r3, r5, r3
 80002b2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002b6:	f080 811c 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002ba:	4599      	cmp	r9, r3
 80002bc:	f240 8119 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	3f02      	subs	r7, #2
 80002c2:	442b      	add	r3, r5
 80002c4:	eba3 0309 	sub.w	r3, r3, r9
 80002c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d0:	fb00 f108 	mul.w	r1, r0, r8
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002da:	42a1      	cmp	r1, r4
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002de:	192c      	adds	r4, r5, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 8107 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002e8:	42a1      	cmp	r1, r4
 80002ea:	f240 8104 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	3802      	subs	r0, #2
 80002f0:	442c      	add	r4, r5
 80002f2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f6:	2700      	movs	r7, #0
 80002f8:	1a64      	subs	r4, r4, r1
 80002fa:	b11e      	cbz	r6, 8000304 <__udivmoddi4+0xa0>
 80002fc:	2300      	movs	r3, #0
 80002fe:	40d4      	lsrs	r4, r2
 8000300:	e9c6 4300 	strd	r4, r3, [r6]
 8000304:	4639      	mov	r1, r7
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xbe>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ec 	beq.w	80004ec <__udivmoddi4+0x288>
 8000314:	2700      	movs	r7, #0
 8000316:	e9c6 0100 	strd	r0, r1, [r6]
 800031a:	4638      	mov	r0, r7
 800031c:	4639      	mov	r1, r7
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f783 	clz	r7, r3
 8000326:	2f00      	cmp	r7, #0
 8000328:	d148      	bne.n	80003bc <__udivmoddi4+0x158>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd0>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80fb 	bhi.w	800052a <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469c      	mov	ip, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa0>
 8000342:	e9c6 4c00 	strd	r4, ip, [r6]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa0>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xe8>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 808f 	bne.w	8000474 <__udivmoddi4+0x210>
 8000356:	2701      	movs	r7, #1
 8000358:	1b49      	subs	r1, r1, r5
 800035a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800035e:	fa1f f985 	uxth.w	r9, r5
 8000362:	fbb1 fef8 	udiv	lr, r1, r8
 8000366:	fb08 111e 	mls	r1, r8, lr, r1
 800036a:	fb09 f00e 	mul.w	r0, r9, lr
 800036e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000372:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000376:	4298      	cmp	r0, r3
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x126>
 800037a:	18eb      	adds	r3, r5, r3
 800037c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4298      	cmp	r0, r3
 8000384:	f200 80cd 	bhi.w	8000522 <__udivmoddi4+0x2be>
 8000388:	468e      	mov	lr, r1
 800038a:	1a1b      	subs	r3, r3, r0
 800038c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000390:	fb08 3310 	mls	r3, r8, r0, r3
 8000394:	fb09 f900 	mul.w	r9, r9, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800039e:	45a1      	cmp	r9, r4
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a2:	192c      	adds	r4, r5, r4
 80003a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f200 80b6 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80003b0:	4618      	mov	r0, r3
 80003b2:	eba4 0409 	sub.w	r4, r4, r9
 80003b6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003ba:	e79e      	b.n	80002fa <__udivmoddi4+0x96>
 80003bc:	f1c7 0520 	rsb	r5, r7, #32
 80003c0:	40bb      	lsls	r3, r7
 80003c2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ca:	fa21 f405 	lsr.w	r4, r1, r5
 80003ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003d6:	fa1f f88c 	uxth.w	r8, ip
 80003da:	fb0e 4419 	mls	r4, lr, r9, r4
 80003de:	fa20 f305 	lsr.w	r3, r0, r5
 80003e2:	40b9      	lsls	r1, r7
 80003e4:	fb09 fa08 	mul.w	sl, r9, r8
 80003e8:	4319      	orrs	r1, r3
 80003ea:	0c0b      	lsrs	r3, r1, #16
 80003ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	fa02 f207 	lsl.w	r2, r2, r7
 80003f6:	fa00 f307 	lsl.w	r3, r0, r7
 80003fa:	d90b      	bls.n	8000414 <__udivmoddi4+0x1b0>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f109 30ff 	add.w	r0, r9, #4294967295
 8000404:	f080 8088 	bcs.w	8000518 <__udivmoddi4+0x2b4>
 8000408:	45a2      	cmp	sl, r4
 800040a:	f240 8085 	bls.w	8000518 <__udivmoddi4+0x2b4>
 800040e:	f1a9 0902 	sub.w	r9, r9, #2
 8000412:	4464      	add	r4, ip
 8000414:	eba4 040a 	sub.w	r4, r4, sl
 8000418:	fbb4 f0fe 	udiv	r0, r4, lr
 800041c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000420:	fb00 fa08 	mul.w	sl, r0, r8
 8000424:	b289      	uxth	r1, r1
 8000426:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800042a:	45a2      	cmp	sl, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	d26b      	bcs.n	8000510 <__udivmoddi4+0x2ac>
 8000438:	45a2      	cmp	sl, r4
 800043a:	d969      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800043c:	3802      	subs	r0, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000444:	fba0 8902 	umull	r8, r9, r0, r2
 8000448:	eba4 040a 	sub.w	r4, r4, sl
 800044c:	454c      	cmp	r4, r9
 800044e:	4641      	mov	r1, r8
 8000450:	46ce      	mov	lr, r9
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d069      	beq.n	800052e <__udivmoddi4+0x2ca>
 800045a:	1a5a      	subs	r2, r3, r1
 800045c:	eb64 040e 	sbc.w	r4, r4, lr
 8000460:	fa04 f505 	lsl.w	r5, r4, r5
 8000464:	fa22 f307 	lsr.w	r3, r2, r7
 8000468:	40fc      	lsrs	r4, r7
 800046a:	431d      	orrs	r5, r3
 800046c:	e9c6 5400 	strd	r5, r4, [r6]
 8000470:	2700      	movs	r7, #0
 8000472:	e747      	b.n	8000304 <__udivmoddi4+0xa0>
 8000474:	4095      	lsls	r5, r2
 8000476:	f1c2 0320 	rsb	r3, r2, #32
 800047a:	fa21 f003 	lsr.w	r0, r1, r3
 800047e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000482:	fbb0 f7f8 	udiv	r7, r0, r8
 8000486:	fa1f f985 	uxth.w	r9, r5
 800048a:	fb08 0017 	mls	r0, r8, r7, r0
 800048e:	fa24 f303 	lsr.w	r3, r4, r3
 8000492:	4091      	lsls	r1, r2
 8000494:	fb07 fc09 	mul.w	ip, r7, r9
 8000498:	430b      	orrs	r3, r1
 800049a:	0c19      	lsrs	r1, r3, #16
 800049c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a0:	458c      	cmp	ip, r1
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d907      	bls.n	80004b8 <__udivmoddi4+0x254>
 80004a8:	1869      	adds	r1, r5, r1
 80004aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80004ae:	d231      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004b0:	458c      	cmp	ip, r1
 80004b2:	d92f      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004b4:	3f02      	subs	r7, #2
 80004b6:	4429      	add	r1, r5
 80004b8:	eba1 010c 	sub.w	r1, r1, ip
 80004bc:	fbb1 f0f8 	udiv	r0, r1, r8
 80004c0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004c4:	fb00 fe09 	mul.w	lr, r0, r9
 80004c8:	b299      	uxth	r1, r3
 80004ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ce:	458e      	cmp	lr, r1
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x27e>
 80004d2:	1869      	adds	r1, r5, r1
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d218      	bcs.n	800050c <__udivmoddi4+0x2a8>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d916      	bls.n	800050c <__udivmoddi4+0x2a8>
 80004de:	3802      	subs	r0, #2
 80004e0:	4429      	add	r1, r5
 80004e2:	eba1 010e 	sub.w	r1, r1, lr
 80004e6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4637      	mov	r7, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e708      	b.n	8000304 <__udivmoddi4+0xa0>
 80004f2:	460f      	mov	r7, r1
 80004f4:	e6e6      	b.n	80002c4 <__udivmoddi4+0x60>
 80004f6:	4618      	mov	r0, r3
 80004f8:	e6fb      	b.n	80002f2 <__udivmoddi4+0x8e>
 80004fa:	4543      	cmp	r3, r8
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb8 0102 	subs.w	r1, r8, r2
 8000502:	eb69 020c 	sbc.w	r2, r9, ip
 8000506:	3801      	subs	r0, #1
 8000508:	4696      	mov	lr, r2
 800050a:	e7a4      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050c:	4618      	mov	r0, r3
 800050e:	e7e8      	b.n	80004e2 <__udivmoddi4+0x27e>
 8000510:	4608      	mov	r0, r1
 8000512:	e795      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000514:	4607      	mov	r7, r0
 8000516:	e7cf      	b.n	80004b8 <__udivmoddi4+0x254>
 8000518:	4681      	mov	r9, r0
 800051a:	e77b      	b.n	8000414 <__udivmoddi4+0x1b0>
 800051c:	3802      	subs	r0, #2
 800051e:	442c      	add	r4, r5
 8000520:	e747      	b.n	80003b2 <__udivmoddi4+0x14e>
 8000522:	f1ae 0e02 	sub.w	lr, lr, #2
 8000526:	442b      	add	r3, r5
 8000528:	e72f      	b.n	800038a <__udivmoddi4+0x126>
 800052a:	4638      	mov	r0, r7
 800052c:	e707      	b.n	800033e <__udivmoddi4+0xda>
 800052e:	4637      	mov	r7, r6
 8000530:	e6e8      	b.n	8000304 <__udivmoddi4+0xa0>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <MX_CAN1_Init+0x64>)
 800053e:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <MX_CAN1_Init+0x68>)
 8000540:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_CAN1_Init+0x64>)
 8000544:	2209      	movs	r2, #9
 8000546:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_CAN1_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_CAN1_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_CAN1_Init+0x64>)
 8000556:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800055a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_CAN1_Init+0x64>)
 800055e:	2200      	movs	r2, #0
 8000560:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_CAN1_Init+0x64>)
 8000564:	2200      	movs	r2, #0
 8000566:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_CAN1_Init+0x64>)
 800056a:	2200      	movs	r2, #0
 800056c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_CAN1_Init+0x64>)
 8000570:	2200      	movs	r2, #0
 8000572:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_CAN1_Init+0x64>)
 8000576:	2200      	movs	r2, #0
 8000578:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_CAN1_Init+0x64>)
 800057c:	2200      	movs	r2, #0
 800057e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_CAN1_Init+0x64>)
 8000582:	2200      	movs	r2, #0
 8000584:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_CAN1_Init+0x64>)
 8000588:	f001 feec 	bl	8002364 <HAL_CAN_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000592:	f001 fc07 	bl	8001da4 <Error_Handler>
  }

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000260 	.word	0x20000260
 80005a0:	40006400 	.word	0x40006400

080005a4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_CAN2_Init+0x64>)
 80005aa:	4a18      	ldr	r2, [pc, #96]	; (800060c <MX_CAN2_Init+0x68>)
 80005ac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <MX_CAN2_Init+0x64>)
 80005b0:	2209      	movs	r2, #9
 80005b2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_CAN2_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_CAN2_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_CAN2_Init+0x64>)
 80005c2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80005c6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_CAN2_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_CAN2_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_CAN2_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_CAN2_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_CAN2_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_CAN2_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_CAN2_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_CAN2_Init+0x64>)
 80005f4:	f001 feb6 	bl	8002364 <HAL_CAN_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80005fe:	f001 fbd1 	bl	8001da4 <Error_Handler>
  }

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000238 	.word	0x20000238
 800060c:	40006800 	.word	0x40006800

08000610 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08c      	sub	sp, #48	; 0x30
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a4b      	ldr	r2, [pc, #300]	; (8000758 <HAL_CAN_MspInit+0x148>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d143      	bne.n	80006b8 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000630:	4b4a      	ldr	r3, [pc, #296]	; (800075c <HAL_CAN_MspInit+0x14c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	4a49      	ldr	r2, [pc, #292]	; (800075c <HAL_CAN_MspInit+0x14c>)
 8000638:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800063a:	4b48      	ldr	r3, [pc, #288]	; (800075c <HAL_CAN_MspInit+0x14c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d10b      	bne.n	800065a <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000642:	4b47      	ldr	r3, [pc, #284]	; (8000760 <HAL_CAN_MspInit+0x150>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a46      	ldr	r2, [pc, #280]	; (8000760 <HAL_CAN_MspInit+0x150>)
 8000648:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <HAL_CAN_MspInit+0x150>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000656:	61fb      	str	r3, [r7, #28]
 8000658:	69fb      	ldr	r3, [r7, #28]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b41      	ldr	r3, [pc, #260]	; (8000760 <HAL_CAN_MspInit+0x150>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4a40      	ldr	r2, [pc, #256]	; (8000760 <HAL_CAN_MspInit+0x150>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <HAL_CAN_MspInit+0x150>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000672:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4619      	mov	r1, r3
 8000686:	4837      	ldr	r0, [pc, #220]	; (8000764 <HAL_CAN_MspInit+0x154>)
 8000688:	f002 ffec 	bl	8003664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4619      	mov	r1, r3
 80006a0:	4830      	ldr	r0, [pc, #192]	; (8000764 <HAL_CAN_MspInit+0x154>)
 80006a2:	f002 ffdf 	bl	8003664 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2014      	movs	r0, #20
 80006ac:	f002 fda3 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006b0:	2014      	movs	r0, #20
 80006b2:	f002 fdbc 	bl	800322e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80006b6:	e04b      	b.n	8000750 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <HAL_CAN_MspInit+0x158>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d146      	bne.n	8000750 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <HAL_CAN_MspInit+0x150>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a26      	ldr	r2, [pc, #152]	; (8000760 <HAL_CAN_MspInit+0x150>)
 80006c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b24      	ldr	r3, [pc, #144]	; (8000760 <HAL_CAN_MspInit+0x150>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <HAL_CAN_MspInit+0x14c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a1e      	ldr	r2, [pc, #120]	; (800075c <HAL_CAN_MspInit+0x14c>)
 80006e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <HAL_CAN_MspInit+0x14c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d10b      	bne.n	8000704 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <HAL_CAN_MspInit+0x150>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <HAL_CAN_MspInit+0x150>)
 80006f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006f6:	61d3      	str	r3, [r2, #28]
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <HAL_CAN_MspInit+0x150>)
 80006fa:	69db      	ldr	r3, [r3, #28]
 80006fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <HAL_CAN_MspInit+0x150>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a15      	ldr	r2, [pc, #84]	; (8000760 <HAL_CAN_MspInit+0x150>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <HAL_CAN_MspInit+0x150>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	4619      	mov	r1, r3
 8000730:	480e      	ldr	r0, [pc, #56]	; (800076c <HAL_CAN_MspInit+0x15c>)
 8000732:	f002 ff97 	bl	8003664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4619      	mov	r1, r3
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <HAL_CAN_MspInit+0x15c>)
 800074c:	f002 ff8a 	bl	8003664 <HAL_GPIO_Init>
}
 8000750:	bf00      	nop
 8000752:	3730      	adds	r7, #48	; 0x30
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40006400 	.word	0x40006400
 800075c:	20000224 	.word	0x20000224
 8000760:	40021000 	.word	0x40021000
 8000764:	40010800 	.word	0x40010800
 8000768:	40006800 	.word	0x40006800
 800076c:	40010c00 	.word	0x40010c00

08000770 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8000776:	2306      	movs	r3, #6
 8000778:	847b      	strh	r3, [r7, #34]	; 0x22
 800077a:	2306      	movs	r3, #6
 800077c:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	83fb      	strh	r3, [r7, #30]
 8000786:	2300      	movs	r3, #0
 8000788:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800078a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078e:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000794:	4b9e      	ldr	r3, [pc, #632]	; (8000a10 <EE_Init+0x2a0>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800079a:	4b9e      	ldr	r3, [pc, #632]	; (8000a14 <EE_Init+0x2a4>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 80007a4:	4b9a      	ldr	r3, [pc, #616]	; (8000a10 <EE_Init+0x2a0>)
 80007a6:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 80007ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007ae:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d057      	beq.n	8000866 <EE_Init+0xf6>
 80007b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d003      	beq.n	80007c6 <EE_Init+0x56>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f000 80f4 	beq.w	80009ac <EE_Init+0x23c>
 80007c4:	e18d      	b.n	8000ae2 <EE_Init+0x372>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80007c6:	8c3b      	ldrh	r3, [r7, #32]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d116      	bne.n	80007fa <EE_Init+0x8a>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80007cc:	4890      	ldr	r0, [pc, #576]	; (8000a10 <EE_Init+0x2a0>)
 80007ce:	f000 f9a9 	bl	8000b24 <EE_VerifyPageFullyErased>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	f040 818e 	bne.w	8000af6 <EE_Init+0x386>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80007da:	f107 0214 	add.w	r2, r7, #20
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fe96 	bl	8003514 <HAL_FLASHEx_Erase>
 80007e8:	4603      	mov	r3, r0
 80007ea:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80007ec:	7efb      	ldrb	r3, [r7, #27]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	f000 8181 	beq.w	8000af6 <EE_Init+0x386>
          {
            return flashstatus;
 80007f4:	7efb      	ldrb	r3, [r7, #27]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	e185      	b.n	8000b06 <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80007fa:	8c3b      	ldrh	r3, [r7, #32]
 80007fc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000800:	4293      	cmp	r3, r2
 8000802:	d125      	bne.n	8000850 <EE_Init+0xe0>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000804:	4882      	ldr	r0, [pc, #520]	; (8000a10 <EE_Init+0x2a0>)
 8000806:	f000 f98d 	bl	8000b24 <EE_VerifyPageFullyErased>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d10e      	bne.n	800082e <EE_Init+0xbe>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000810:	f107 0214 	add.w	r2, r7, #20
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fe7b 	bl	8003514 <HAL_FLASHEx_Erase>
 800081e:	4603      	mov	r3, r0
 8000820:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000822:	7efb      	ldrb	r3, [r7, #27]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <EE_Init+0xbe>
          {
            return flashstatus;
 8000828:	7efb      	ldrb	r3, [r7, #27]
 800082a:	b29b      	uxth	r3, r3
 800082c:	e16b      	b.n	8000b06 <EE_Init+0x396>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	f04f 0300 	mov.w	r3, #0
 8000836:	4977      	ldr	r1, [pc, #476]	; (8000a14 <EE_Init+0x2a4>)
 8000838:	2001      	movs	r0, #1
 800083a:	f002 fd13 	bl	8003264 <HAL_FLASH_Program>
 800083e:	4603      	mov	r3, r0
 8000840:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000842:	7efb      	ldrb	r3, [r7, #27]
 8000844:	2b00      	cmp	r3, #0
 8000846:	f000 8156 	beq.w	8000af6 <EE_Init+0x386>
        {
          return flashstatus;
 800084a:	7efb      	ldrb	r3, [r7, #27]
 800084c:	b29b      	uxth	r3, r3
 800084e:	e15a      	b.n	8000b06 <EE_Init+0x396>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000850:	f000 f9fa 	bl	8000c48 <EE_Format>
 8000854:	4603      	mov	r3, r0
 8000856:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000858:	7efb      	ldrb	r3, [r7, #27]
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 814b 	beq.w	8000af6 <EE_Init+0x386>
        {
          return flashstatus;
 8000860:	7efb      	ldrb	r3, [r7, #27]
 8000862:	b29b      	uxth	r3, r3
 8000864:	e14f      	b.n	8000b06 <EE_Init+0x396>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8000866:	8c3b      	ldrh	r3, [r7, #32]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d163      	bne.n	8000934 <EE_Init+0x1c4>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800086c:	2300      	movs	r3, #0
 800086e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000870:	e030      	b.n	80008d4 <EE_Init+0x164>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8000872:	4b69      	ldr	r3, [pc, #420]	; (8000a18 <EE_Init+0x2a8>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	b29a      	uxth	r2, r3
 8000878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800087a:	4968      	ldr	r1, [pc, #416]	; (8000a1c <EE_Init+0x2ac>)
 800087c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000880:	429a      	cmp	r2, r3
 8000882:	d101      	bne.n	8000888 <EE_Init+0x118>
          {
            x = varidx;
 8000884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000886:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8000888:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800088a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800088e:	429a      	cmp	r2, r3
 8000890:	d01d      	beq.n	80008ce <EE_Init+0x15e>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000894:	4a61      	ldr	r2, [pc, #388]	; (8000a1c <EE_Init+0x2ac>)
 8000896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800089a:	4961      	ldr	r1, [pc, #388]	; (8000a20 <EE_Init+0x2b0>)
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f967 	bl	8000b70 <EE_ReadVariable>
 80008a2:	4603      	mov	r3, r0
 80008a4:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 80008a6:	8bbb      	ldrh	r3, [r7, #28]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d010      	beq.n	80008ce <EE_Init+0x15e>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80008ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008ae:	4a5b      	ldr	r2, [pc, #364]	; (8000a1c <EE_Init+0x2ac>)
 80008b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008b4:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <EE_Init+0x2b0>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	4610      	mov	r0, r2
 80008bc:	f000 fa58 	bl	8000d70 <EE_VerifyPageFullWriteVariable>
 80008c0:	4603      	mov	r3, r0
 80008c2:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 80008c4:	8bfb      	ldrh	r3, [r7, #30]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <EE_Init+0x15e>
              {
                return eepromstatus;
 80008ca:	8bfb      	ldrh	r3, [r7, #30]
 80008cc:	e11b      	b.n	8000b06 <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80008ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008d0:	3301      	adds	r3, #1
 80008d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80008d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d9cb      	bls.n	8000872 <EE_Init+0x102>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80008da:	f04f 0200 	mov.w	r2, #0
 80008de:	f04f 0300 	mov.w	r3, #0
 80008e2:	494b      	ldr	r1, [pc, #300]	; (8000a10 <EE_Init+0x2a0>)
 80008e4:	2001      	movs	r0, #1
 80008e6:	f002 fcbd 	bl	8003264 <HAL_FLASH_Program>
 80008ea:	4603      	mov	r3, r0
 80008ec:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80008ee:	7efb      	ldrb	r3, [r7, #27]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <EE_Init+0x18a>
        {
          return flashstatus;
 80008f4:	7efb      	ldrb	r3, [r7, #27]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	e105      	b.n	8000b06 <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80008fe:	4b45      	ldr	r3, [pc, #276]	; (8000a14 <EE_Init+0x2a4>)
 8000900:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000902:	2301      	movs	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000906:	4843      	ldr	r0, [pc, #268]	; (8000a14 <EE_Init+0x2a4>)
 8000908:	f000 f90c 	bl	8000b24 <EE_VerifyPageFullyErased>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 80f3 	bne.w	8000afa <EE_Init+0x38a>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000914:	f107 0214 	add.w	r2, r7, #20
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fdf9 	bl	8003514 <HAL_FLASHEx_Erase>
 8000922:	4603      	mov	r3, r0
 8000924:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000926:	7efb      	ldrb	r3, [r7, #27]
 8000928:	2b00      	cmp	r3, #0
 800092a:	f000 80e6 	beq.w	8000afa <EE_Init+0x38a>
          {
            return flashstatus;
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	b29b      	uxth	r3, r3
 8000932:	e0e8      	b.n	8000b06 <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8000934:	8c3b      	ldrh	r3, [r7, #32]
 8000936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093a:	4293      	cmp	r3, r2
 800093c:	d12b      	bne.n	8000996 <EE_Init+0x226>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <EE_Init+0x2a4>)
 8000944:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800094a:	4832      	ldr	r0, [pc, #200]	; (8000a14 <EE_Init+0x2a4>)
 800094c:	f000 f8ea 	bl	8000b24 <EE_VerifyPageFullyErased>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10e      	bne.n	8000974 <EE_Init+0x204>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000956:	f107 0214 	add.w	r2, r7, #20
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fdd8 	bl	8003514 <HAL_FLASHEx_Erase>
 8000964:	4603      	mov	r3, r0
 8000966:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000968:	7efb      	ldrb	r3, [r7, #27]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <EE_Init+0x204>
          {
            return flashstatus;
 800096e:	7efb      	ldrb	r3, [r7, #27]
 8000970:	b29b      	uxth	r3, r3
 8000972:	e0c8      	b.n	8000b06 <EE_Init+0x396>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000974:	f04f 0200 	mov.w	r2, #0
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	4924      	ldr	r1, [pc, #144]	; (8000a10 <EE_Init+0x2a0>)
 800097e:	2001      	movs	r0, #1
 8000980:	f002 fc70 	bl	8003264 <HAL_FLASH_Program>
 8000984:	4603      	mov	r3, r0
 8000986:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000988:	7efb      	ldrb	r3, [r7, #27]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 80b5 	beq.w	8000afa <EE_Init+0x38a>
        {
          return flashstatus;
 8000990:	7efb      	ldrb	r3, [r7, #27]
 8000992:	b29b      	uxth	r3, r3
 8000994:	e0b7      	b.n	8000b06 <EE_Init+0x396>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000996:	f000 f957 	bl	8000c48 <EE_Format>
 800099a:	4603      	mov	r3, r0
 800099c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800099e:	7efb      	ldrb	r3, [r7, #27]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 80aa 	beq.w	8000afa <EE_Init+0x38a>
        {
          return flashstatus;
 80009a6:	7efb      	ldrb	r3, [r7, #27]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	e0ac      	b.n	8000b06 <EE_Init+0x396>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80009ac:	8c3b      	ldrh	r3, [r7, #32]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10a      	bne.n	80009c8 <EE_Init+0x258>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 80009b2:	f000 f949 	bl	8000c48 <EE_Format>
 80009b6:	4603      	mov	r3, r0
 80009b8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80009ba:	7efb      	ldrb	r3, [r7, #27]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f000 809e 	beq.w	8000afe <EE_Init+0x38e>
        {
          return flashstatus;
 80009c2:	7efb      	ldrb	r3, [r7, #27]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	e09e      	b.n	8000b06 <EE_Init+0x396>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 80009c8:	8c3b      	ldrh	r3, [r7, #32]
 80009ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d11b      	bne.n	8000a0a <EE_Init+0x29a>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <EE_Init+0x2a4>)
 80009d8:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <EE_Init+0x2a4>)
 80009e0:	f000 f8a0 	bl	8000b24 <EE_VerifyPageFullyErased>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8089 	bne.w	8000afe <EE_Init+0x38e>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80009ec:	f107 0214 	add.w	r2, r7, #20
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fd8d 	bl	8003514 <HAL_FLASHEx_Erase>
 80009fa:	4603      	mov	r3, r0
 80009fc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80009fe:	7efb      	ldrb	r3, [r7, #27]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d07c      	beq.n	8000afe <EE_Init+0x38e>
          {
            return flashstatus;
 8000a04:	7efb      	ldrb	r3, [r7, #27]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	e07d      	b.n	8000b06 <EE_Init+0x396>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a0e:	e03a      	b.n	8000a86 <EE_Init+0x316>
 8000a10:	08008000 	.word	0x08008000
 8000a14:	08018000 	.word	0x08018000
 8000a18:	08008006 	.word	0x08008006
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000228 	.word	0x20000228
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8000a24:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <EE_Init+0x3a0>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a2c:	4939      	ldr	r1, [pc, #228]	; (8000b14 <EE_Init+0x3a4>)
 8000a2e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d101      	bne.n	8000a3a <EE_Init+0x2ca>
          {
            x = varidx;
 8000a36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a38:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 8000a3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a3c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d01d      	beq.n	8000a80 <EE_Init+0x310>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a46:	4a33      	ldr	r2, [pc, #204]	; (8000b14 <EE_Init+0x3a4>)
 8000a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a4c:	4932      	ldr	r1, [pc, #200]	; (8000b18 <EE_Init+0x3a8>)
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f88e 	bl	8000b70 <EE_ReadVariable>
 8000a54:	4603      	mov	r3, r0
 8000a56:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8000a58:	8bbb      	ldrh	r3, [r7, #28]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d010      	beq.n	8000a80 <EE_Init+0x310>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000a5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a60:	4a2c      	ldr	r2, [pc, #176]	; (8000b14 <EE_Init+0x3a4>)
 8000a62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a66:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <EE_Init+0x3a8>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	f000 f97f 	bl	8000d70 <EE_VerifyPageFullWriteVariable>
 8000a72:	4603      	mov	r3, r0
 8000a74:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8000a76:	8bfb      	ldrh	r3, [r7, #30]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <EE_Init+0x310>
              {
                return eepromstatus;
 8000a7c:	8bfb      	ldrh	r3, [r7, #30]
 8000a7e:	e042      	b.n	8000b06 <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000a80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a82:	3301      	adds	r3, #1
 8000a84:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d9cb      	bls.n	8000a24 <EE_Init+0x2b4>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	4921      	ldr	r1, [pc, #132]	; (8000b1c <EE_Init+0x3ac>)
 8000a96:	2001      	movs	r0, #1
 8000a98:	f002 fbe4 	bl	8003264 <HAL_FLASH_Program>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000aa0:	7efb      	ldrb	r3, [r7, #27]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <EE_Init+0x33c>
        {
          return flashstatus;
 8000aa6:	7efb      	ldrb	r3, [r7, #27]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	e02c      	b.n	8000b06 <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <EE_Init+0x3b0>)
 8000ab2:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000ab8:	4819      	ldr	r0, [pc, #100]	; (8000b20 <EE_Init+0x3b0>)
 8000aba:	f000 f833 	bl	8000b24 <EE_VerifyPageFullyErased>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d11c      	bne.n	8000afe <EE_Init+0x38e>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000ac4:	f107 0214 	add.w	r2, r7, #20
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 fd21 	bl	8003514 <HAL_FLASHEx_Erase>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000ad6:	7efb      	ldrb	r3, [r7, #27]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d010      	beq.n	8000afe <EE_Init+0x38e>
          {
            return flashstatus;
 8000adc:	7efb      	ldrb	r3, [r7, #27]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	e011      	b.n	8000b06 <EE_Init+0x396>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 8000ae2:	f000 f8b1 	bl	8000c48 <EE_Format>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8000aea:	7efb      	ldrb	r3, [r7, #27]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <EE_Init+0x392>
      {
        return flashstatus;
 8000af0:	7efb      	ldrb	r3, [r7, #27]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	e007      	b.n	8000b06 <EE_Init+0x396>
      break;
 8000af6:	bf00      	nop
 8000af8:	e004      	b.n	8000b04 <EE_Init+0x394>
      break;
 8000afa:	bf00      	nop
 8000afc:	e002      	b.n	8000b04 <EE_Init+0x394>
      break;
 8000afe:	bf00      	nop
 8000b00:	e000      	b.n	8000b04 <EE_Init+0x394>
      }
      break;
 8000b02:	bf00      	nop
  }

  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	08018006 	.word	0x08018006
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000228 	.word	0x20000228
 8000b1c:	08018000 	.word	0x08018000
 8000b20:	08008000 	.word	0x08008000

08000b24 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 8000b30:	f245 5355 	movw	r3, #21845	; 0x5555
 8000b34:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8000b36:	e00d      	b.n	8000b54 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8000b3e:	897b      	ldrh	r3, [r7, #10]
 8000b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d002      	beq.n	8000b4e <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]

      break;
 8000b4c:	e006      	b.n	8000b5c <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3304      	adds	r3, #4
 8000b52:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <EE_VerifyPageFullyErased+0x48>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d9ed      	bls.n	8000b38 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	b29b      	uxth	r3, r3
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	080087ff 	.word	0x080087ff

08000b70 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8000b80:	f245 5355 	movw	r3, #21845	; 0x5555
 8000b84:	81bb      	strh	r3, [r7, #12]
 8000b86:	2301      	movs	r3, #1
 8000b88:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <EE_ReadVariable+0x8c>)
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <EE_ReadVariable+0x8c>)
 8000b90:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f8a8 	bl	8000ce8 <EE_FindValidPage>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8000b9c:	89fb      	ldrh	r3, [r7, #14]
 8000b9e:	2bab      	cmp	r3, #171	; 0xab
 8000ba0:	d101      	bne.n	8000ba6 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000ba2:	23ab      	movs	r3, #171	; 0xab
 8000ba4:	e025      	b.n	8000bf2 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000bac:	3310      	adds	r3, #16
 8000bae:	02db      	lsls	r3, r3, #11
 8000bb0:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	02da      	lsls	r2, r3, #11
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <EE_ReadVariable+0x90>)
 8000bba:	4413      	add	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 8000bbe:	e012      	b.n	8000be6 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 8000bc6:	89ba      	ldrh	r2, [r7, #12]
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d108      	bne.n	8000be0 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	3b02      	subs	r3, #2
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	82fb      	strh	r3, [r7, #22]

      break;
 8000bde:	e007      	b.n	8000bf0 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	3b04      	subs	r3, #4
 8000be4:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	3302      	adds	r3, #2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8e7      	bhi.n	8000bc0 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 8000bf0:	8afb      	ldrh	r3, [r7, #22]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	08008000 	.word	0x08008000
 8000c00:	08007ffe 	.word	0x08007ffe

08000c04 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	80fb      	strh	r3, [r7, #6]
 8000c10:	4613      	mov	r3, r2
 8000c12:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000c18:	88ba      	ldrh	r2, [r7, #4]
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f8a6 	bl	8000d70 <EE_VerifyPageFullWriteVariable>
 8000c24:	4603      	mov	r3, r0
 8000c26:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000c28:	89fb      	ldrh	r3, [r7, #14]
 8000c2a:	2b80      	cmp	r3, #128	; 0x80
 8000c2c:	d107      	bne.n	8000c3e <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000c2e:	88ba      	ldrh	r2, [r7, #4]
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f8f9 	bl	8000e2c <EE_PageTransfer>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000c3e:	89fb      	ldrh	r3, [r7, #14]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <EE_Format+0x98>)
 8000c5c:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000c62:	481f      	ldr	r0, [pc, #124]	; (8000ce0 <EE_Format+0x98>)
 8000c64:	f7ff ff5e 	bl	8000b24 <EE_VerifyPageFullyErased>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10d      	bne.n	8000c8a <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8000c6e:	f107 0210 	add.w	r2, r7, #16
 8000c72:	463b      	mov	r3, r7
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fc4c 	bl	8003514 <HAL_FLASHEx_Erase>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <EE_Format+0x42>
    {
      return flashstatus;
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	e025      	b.n	8000cd6 <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	4913      	ldr	r1, [pc, #76]	; (8000ce0 <EE_Format+0x98>)
 8000c94:	2001      	movs	r0, #1
 8000c96:	f002 fae5 	bl	8003264 <HAL_FLASH_Program>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000c9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <EE_Format+0x60>
  {
    return flashstatus;
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	e016      	b.n	8000cd6 <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <EE_Format+0x9c>)
 8000caa:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <EE_Format+0x9c>)
 8000cae:	f7ff ff39 	bl	8000b24 <EE_VerifyPageFullyErased>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10d      	bne.n	8000cd4 <EE_Format+0x8c>
  {  
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8000cb8:	f107 0210 	add.w	r2, r7, #16
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fc27 	bl	8003514 <HAL_FLASHEx_Erase>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <EE_Format+0x8c>
    {
      return flashstatus;
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	e000      	b.n	8000cd6 <EE_Format+0x8e>
    }
  }
  
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08008000 	.word	0x08008000
 8000ce4:	08018000 	.word	0x08018000

08000ce8 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	81fb      	strh	r3, [r7, #14]
 8000cf6:	2306      	movs	r3, #6
 8000cf8:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <EE_FindValidPage+0x80>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <EE_FindValidPage+0x84>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d01b      	beq.n	8000d44 <EE_FindValidPage+0x5c>
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d125      	bne.n	8000d5c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8000d10:	89bb      	ldrh	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d108      	bne.n	8000d28 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d101      	bne.n	8000d24 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000d20:	2300      	movs	r3, #0
 8000d22:	e01c      	b.n	8000d5e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000d24:	2340      	movs	r3, #64	; 0x40
 8000d26:	e01a      	b.n	8000d5e <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8000d28:	89fb      	ldrh	r3, [r7, #14]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d108      	bne.n	8000d40 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 8000d2e:	89bb      	ldrh	r3, [r7, #12]
 8000d30:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d101      	bne.n	8000d3c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000d38:	2340      	movs	r3, #64	; 0x40
 8000d3a:	e010      	b.n	8000d5e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e00e      	b.n	8000d5e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000d40:	23ab      	movs	r3, #171	; 0xab
 8000d42:	e00c      	b.n	8000d5e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8000d44:	89fb      	ldrh	r3, [r7, #14]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e007      	b.n	8000d5e <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 8000d4e:	89bb      	ldrh	r3, [r7, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	e002      	b.n	8000d5e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000d58:	23ab      	movs	r3, #171	; 0xab
 8000d5a:	e000      	b.n	8000d5e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000d5c:	2300      	movs	r3, #0
  }
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	08008000 	.word	0x08008000
 8000d6c:	08018000 	.word	0x08018000

08000d70 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <EE_VerifyPageFullWriteVariable+0xb0>)
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <EE_VerifyPageFullWriteVariable+0xb4>)
 8000d8e:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff ffa9 	bl	8000ce8 <EE_FindValidPage>
 8000d96:	4603      	mov	r3, r0
 8000d98:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8000d9a:	8a3b      	ldrh	r3, [r7, #16]
 8000d9c:	2bab      	cmp	r3, #171	; 0xab
 8000d9e:	d101      	bne.n	8000da4 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8000da0:	23ab      	movs	r3, #171	; 0xab
 8000da2:	e039      	b.n	8000e18 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8000da4:	8a3b      	ldrh	r3, [r7, #16]
 8000da6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000daa:	3310      	adds	r3, #16
 8000dac:	02db      	lsls	r3, r3, #11
 8000dae:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 8000db0:	8a3b      	ldrh	r3, [r7, #16]
 8000db2:	3301      	adds	r3, #1
 8000db4:	02da      	lsls	r2, r3, #11
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <EE_VerifyPageFullWriteVariable+0xb8>)
 8000db8:	4413      	add	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8000dbc:	e027      	b.n	8000e0e <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc6:	d11f      	bne.n	8000e08 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8000dc8:	88bb      	ldrh	r3, [r7, #4]
 8000dca:	f04f 0400 	mov.w	r4, #0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4623      	mov	r3, r4
 8000dd2:	6979      	ldr	r1, [r7, #20]
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f002 fa45 	bl	8003264 <HAL_FLASH_Program>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8000dde:	7cfb      	ldrb	r3, [r7, #19]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return flashstatus;
 8000de4:	7cfb      	ldrb	r3, [r7, #19]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	e016      	b.n	8000e18 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	1c99      	adds	r1, r3, #2
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	f04f 0400 	mov.w	r4, #0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4623      	mov	r3, r4
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f002 fa33 	bl	8003264 <HAL_FLASH_Program>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 8000e02:	7cfb      	ldrb	r3, [r7, #19]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	e007      	b.n	8000e18 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d3d3      	bcc.n	8000dbe <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000e16:	2380      	movs	r3, #128	; 0x80
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	08008000 	.word	0x08008000
 8000e24:	08008800 	.word	0x08008800
 8000e28:	08007fff 	.word	0x08007fff

08000e2c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	80fb      	strh	r3, [r7, #6]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
 8000e42:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <EE_PageTransfer+0x164>)
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t oldpageid = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t validpage = PAGE0, varidx = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	847b      	strh	r3, [r7, #34]	; 0x22
 8000e4e:	2300      	movs	r3, #0
 8000e50:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	843b      	strh	r3, [r7, #32]
 8000e56:	2300      	movs	r3, #0
 8000e58:	83fb      	strh	r3, [r7, #30]
  uint32_t page_error = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff ff42 	bl	8000ce8 <EE_FindValidPage>
 8000e64:	4603      	mov	r3, r0
 8000e66:	847b      	strh	r3, [r7, #34]	; 0x22

  if (validpage == PAGE1)       /* Page1 valid */
 8000e68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e6a:	2b40      	cmp	r3, #64	; 0x40
 8000e6c:	d104      	bne.n	8000e78 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;
 8000e6e:	4b48      	ldr	r3, [pc, #288]	; (8000f90 <EE_PageTransfer+0x164>)
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
 8000e72:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <EE_PageTransfer+0x168>)
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e76:	e009      	b.n	8000e8c <EE_PageTransfer+0x60>
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8000e78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d104      	bne.n	8000e88 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;
 8000e7e:	4b45      	ldr	r3, [pc, #276]	; (8000f94 <EE_PageTransfer+0x168>)
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 8000e82:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <EE_PageTransfer+0x164>)
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e86:	e001      	b.n	8000e8c <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000e88:	23ab      	movs	r3, #171	; 0xab
 8000e8a:	e07c      	b.n	8000f86 <EE_PageTransfer+0x15a>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8000e8c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e96:	2001      	movs	r0, #1
 8000e98:	f002 f9e4 	bl	8003264 <HAL_FLASH_Program>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000ea2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <EE_PageTransfer+0x86>
  {
    return flashstatus;
 8000eaa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	e069      	b.n	8000f86 <EE_PageTransfer+0x15a>
  }
  
  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000eb2:	88ba      	ldrh	r2, [r7, #4]
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff59 	bl	8000d70 <EE_VerifyPageFullWriteVariable>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	843b      	strh	r3, [r7, #32]
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 8000ec2:	8c3b      	ldrh	r3, [r7, #32]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <EE_PageTransfer+0xa0>
  {
    return eepromstatus;
 8000ec8:	8c3b      	ldrh	r3, [r7, #32]
 8000eca:	e05c      	b.n	8000f86 <EE_PageTransfer+0x15a>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ed0:	e027      	b.n	8000f22 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000ed2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ed4:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <EE_PageTransfer+0x16c>)
 8000ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d01d      	beq.n	8000f1c <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000ee0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ee2:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <EE_PageTransfer+0x16c>)
 8000ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee8:	492c      	ldr	r1, [pc, #176]	; (8000f9c <EE_PageTransfer+0x170>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fe40 	bl	8000b70 <EE_ReadVariable>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	83fb      	strh	r3, [r7, #30]
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 8000ef4:	8bfb      	ldrh	r3, [r7, #30]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d010      	beq.n	8000f1c <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000efa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000efc:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <EE_PageTransfer+0x16c>)
 8000efe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <EE_PageTransfer+0x170>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4610      	mov	r0, r2
 8000f0a:	f7ff ff31 	bl	8000d70 <EE_VerifyPageFullWriteVariable>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	843b      	strh	r3, [r7, #32]
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 8000f12:	8c3b      	ldrh	r3, [r7, #32]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <EE_PageTransfer+0xf0>
        {
          return eepromstatus;
 8000f18:	8c3b      	ldrh	r3, [r7, #32]
 8000f1a:	e034      	b.n	8000f86 <EE_PageTransfer+0x15a>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000f1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f1e:	3301      	adds	r3, #1
 8000f20:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d9d4      	bls.n	8000ed2 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  s_eraseinit.PageAddress = oldpageid;
 8000f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2e:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8000f34:	f107 0218 	add.w	r2, r7, #24
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fae8 	bl	8003514 <HAL_FLASHEx_Erase>
 8000f44:	4603      	mov	r3, r0
 8000f46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000f4a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <EE_PageTransfer+0x12e>
  {
    return flashstatus;
 8000f52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	e015      	b.n	8000f86 <EE_PageTransfer+0x15a>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f64:	2001      	movs	r0, #1
 8000f66:	f002 f97d 	bl	8003264 <HAL_FLASH_Program>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000f70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <EE_PageTransfer+0x154>
  {
    return flashstatus;
 8000f78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	e002      	b.n	8000f86 <EE_PageTransfer+0x15a>
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8000f80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f84:	b29b      	uxth	r3, r3
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3730      	adds	r7, #48	; 0x30
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	08008000 	.word	0x08008000
 8000f94:	08018000 	.word	0x08018000
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000228 	.word	0x20000228

08000fa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_GPIO_Init+0x8c>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a1c      	ldr	r2, [pc, #112]	; (800102c <MX_GPIO_Init+0x8c>)
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_GPIO_Init+0x8c>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_GPIO_Init+0x8c>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <MX_GPIO_Init+0x8c>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_GPIO_Init+0x8c>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_GPIO_Init+0x8c>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a10      	ldr	r2, [pc, #64]	; (800102c <MX_GPIO_Init+0x8c>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_GPIO_Init+0x8c>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2103      	movs	r1, #3
 8001000:	480b      	ldr	r0, [pc, #44]	; (8001030 <MX_GPIO_Init+0x90>)
 8001002:	f002 fc89 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001006:	2303      	movs	r3, #3
 8001008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2302      	movs	r3, #2
 8001014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	4619      	mov	r1, r3
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_GPIO_Init+0x90>)
 800101e:	f002 fb21 	bl	8003664 <HAL_GPIO_Init>

}
 8001022:	bf00      	nop
 8001024:	3720      	adds	r7, #32
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	40010c00 	.word	0x40010c00

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f001 f910 	bl	800225c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f85a 	bl	80010f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f7ff ffae 	bl	8000fa0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001044:	f7ff fa78 	bl	8000538 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001048:	f7ff faac 	bl	80005a4 <MX_CAN2_Init>
  MX_TIM3_Init();
 800104c:	f000 fff8 	bl	8002040 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001050:	f001 f86a 	bl	8002128 <MX_USART1_UART_Init>
  printf("System initializated.\r\n");
 8001054:	481c      	ldr	r0, [pc, #112]	; (80010c8 <main+0x94>)
 8001056:	f004 f87f 	bl	8005158 <puts>

  EE_Init();
 800105a:	f7ff fb89 	bl	8000770 <EE_Init>
  EEPROM_Block_Read(BlockList);
 800105e:	481b      	ldr	r0, [pc, #108]	; (80010cc <main+0x98>)
 8001060:	f000 fa5c 	bl	800151c <EEPROM_Block_Read>
  if(Can_Init(&hcan1)){
 8001064:	481a      	ldr	r0, [pc, #104]	; (80010d0 <main+0x9c>)
 8001066:	f000 f893 	bl	8001190 <Can_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <main+0x44>
	  printf("Using CAN-1 - initialization completed.\r\n");
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <main+0xa0>)
 8001072:	f004 f871 	bl	8005158 <puts>
 8001076:	e002      	b.n	800107e <main+0x4a>
  }
  else{
	  printf("CAN-1 initialization (sync) ERROR\r\n");
 8001078:	4817      	ldr	r0, [pc, #92]	; (80010d8 <main+0xa4>)
 800107a:	f004 f86d 	bl	8005158 <puts>
  }
  if(Can_Init(&hcan2)){
 800107e:	4817      	ldr	r0, [pc, #92]	; (80010dc <main+0xa8>)
 8001080:	f000 f886 	bl	8001190 <Can_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <main+0x5e>
	  printf("Using CAN-2 - initialization completed.\r\n");
 800108a:	4815      	ldr	r0, [pc, #84]	; (80010e0 <main+0xac>)
 800108c:	f004 f864 	bl	8005158 <puts>
 8001090:	e002      	b.n	8001098 <main+0x64>
  }
  else{
	  printf("CAN-2 initialization (sync) ERROR\r\n");
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <main+0xb0>)
 8001094:	f004 f860 	bl	8005158 <puts>
  }
  HAL_TIM_Base_Start_IT(&htim3);
 8001098:	4813      	ldr	r0, [pc, #76]	; (80010e8 <main+0xb4>)
 800109a:	f003 f9cc 	bl	8004436 <HAL_TIM_Base_Start_IT>
  PrintMenu();
 800109e:	f000 f979 	bl	8001394 <PrintMenu>
  /* Infinite loop */
  while (1)
  {
	if(Serial_Available(&huart1)){
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <main+0xb8>)
 80010a4:	f000 fafe 	bl	80016a4 <Serial_Available>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f9      	beq.n	80010a2 <main+0x6e>
		HAL_UART_Receive(&huart1, (uint8_t*)&Rxchar, 1, 1);
 80010ae:	2301      	movs	r3, #1
 80010b0:	2201      	movs	r2, #1
 80010b2:	490f      	ldr	r1, [pc, #60]	; (80010f0 <main+0xbc>)
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <main+0xb8>)
 80010b6:	f003 fe03 	bl	8004cc0 <HAL_UART_Receive>
		MenuDecode(Rxchar);
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <main+0xbc>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fb06 	bl	80016d0 <MenuDecode>
	if(Serial_Available(&huart1)){
 80010c4:	e7ed      	b.n	80010a2 <main+0x6e>
 80010c6:	bf00      	nop
 80010c8:	08006960 	.word	0x08006960
 80010cc:	200002b4 	.word	0x200002b4
 80010d0:	20000260 	.word	0x20000260
 80010d4:	08006978 	.word	0x08006978
 80010d8:	080069a4 	.word	0x080069a4
 80010dc:	20000238 	.word	0x20000238
 80010e0:	080069c8 	.word	0x080069c8
 80010e4:	080069f4 	.word	0x080069f4
 80010e8:	20000320 	.word	0x20000320
 80010ec:	20000360 	.word	0x20000360
 80010f0:	200002e4 	.word	0x200002e4

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	2238      	movs	r2, #56	; 0x38
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f003 ffac 	bl	8005060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001116:	2301      	movs	r3, #1
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800111a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800111e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001134:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001136:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4618      	mov	r0, r3
 8001146:	f002 fc17 	bl	8003978 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001150:	f000 fe28 	bl	8001da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001158:	2302      	movs	r3, #2
 800115a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2102      	movs	r1, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f002 ff18 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800117a:	f000 fe13 	bl	8001da4 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800117e:	4b03      	ldr	r3, [pc, #12]	; (800118c <SystemClock_Config+0x98>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	bf00      	nop
 8001186:	3750      	adds	r7, #80	; 0x50
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	42420070 	.word	0x42420070

08001190 <Can_Init>:

bool Can_Init(CAN_HandleTypeDef *myhcan){
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef myFilterConfig;
	myFilterConfig.FilterBank = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
	myFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
	myFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011a0:	2301      	movs	r3, #1
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
	myFilterConfig.FilterIdHigh = 0x000;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
	myFilterConfig.FilterIdLow = 0x0000;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
	myFilterConfig.FilterMaskIdHigh = 0x0000; //0xFFE0
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
	myFilterConfig.FilterMaskIdLow = 0x0000;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
	myFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
	myFilterConfig.FilterActivation = ENABLE;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
	myFilterConfig.SlaveStartFilterBank = 14;
 80011bc:	230e      	movs	r3, #14
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(HAL_CAN_ConfigFilter(myhcan, &myFilterConfig) != HAL_OK)
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4619      	mov	r1, r3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 f9c8 	bl	800255c <HAL_CAN_ConfigFilter>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <Can_Init+0x46>
	{
	  return false;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e014      	b.n	8001200 <Can_Init+0x70>
	}
	HAL_Delay(2);
 80011d6:	2002      	movs	r0, #2
 80011d8:	f001 f8a2 	bl	8002320 <HAL_Delay>
	if (HAL_CAN_Start(myhcan) != HAL_OK)
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f001 fa9d 	bl	800271c <HAL_CAN_Start>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <Can_Init+0x5c>
	{
	    return false;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e009      	b.n	8001200 <Can_Init+0x70>
	    Error_Handler();
	}
	CAN2TxMessage.RTR = CAN_RTR_DATA;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <Can_Init+0x78>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
	CAN2TxMessage.IDE = CAN_ID_STD;
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <Can_Init+0x78>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
	CAN2TxMessage.TransmitGlobalTime = DISABLE;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <Can_Init+0x78>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	751a      	strb	r2, [r3, #20]

	return true;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3730      	adds	r7, #48	; 0x30
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000308 	.word	0x20000308

0800120c <Change_Can_Speed>:
bool Change_Can_Speed(CAN_HandleTypeDef *myhcan,char canspeed_char){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
	HAL_CAN_Stop(myhcan);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f001 fac3 	bl	80027a4 <HAL_CAN_Stop>
	switch(canspeed_char){
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	3b31      	subs	r3, #49	; 0x31
 8001222:	2b05      	cmp	r3, #5
 8001224:	f200 8097 	bhi.w	8001356 <Change_Can_Speed+0x14a>
 8001228:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <Change_Can_Speed+0x24>)
 800122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122e:	bf00      	nop
 8001230:	08001249 	.word	0x08001249
 8001234:	08001275 	.word	0x08001275
 8001238:	080012a1 	.word	0x080012a1
 800123c:	080012cf 	.word	0x080012cf
 8001240:	080012fd 	.word	0x080012fd
 8001244:	08001329 	.word	0x08001329
		case '1':
			myhcan->Init.Prescaler = 4;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2204      	movs	r2, #4
 800124c:	605a      	str	r2, [r3, #4]
			myhcan->Init.TimeSeg1 = CAN_BS1_7TQ;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001254:	611a      	str	r2, [r3, #16]
			myhcan->Init.TimeSeg2 = CAN_BS2_1TQ;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
			if (HAL_CAN_Init(myhcan) != HAL_OK)
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f001 f881 	bl	8002364 <HAL_CAN_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <Change_Can_Speed+0x60>
			{
				return false;
 8001268:	2300      	movs	r3, #0
 800126a:	e080      	b.n	800136e <Change_Can_Speed+0x162>
			}
			printf("CAN Speed Changed to 1000 KBPS\r\n");
 800126c:	4842      	ldr	r0, [pc, #264]	; (8001378 <Change_Can_Speed+0x16c>)
 800126e:	f003 ff73 	bl	8005158 <puts>
			break;
 8001272:	e073      	b.n	800135c <Change_Can_Speed+0x150>
		case '2':
			myhcan->Init.Prescaler = 9;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2209      	movs	r2, #9
 8001278:	605a      	str	r2, [r3, #4]
			myhcan->Init.TimeSeg1 = CAN_BS1_6TQ;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001280:	611a      	str	r2, [r3, #16]
			myhcan->Init.TimeSeg2 = CAN_BS2_1TQ;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
			if (HAL_CAN_Init(myhcan) != HAL_OK)
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f001 f86b 	bl	8002364 <HAL_CAN_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <Change_Can_Speed+0x8c>
			{
				return false;
 8001294:	2300      	movs	r3, #0
 8001296:	e06a      	b.n	800136e <Change_Can_Speed+0x162>
			}
			printf("CAN Speed Changed to 500 KBPS\r\n");
 8001298:	4838      	ldr	r0, [pc, #224]	; (800137c <Change_Can_Speed+0x170>)
 800129a:	f003 ff5d 	bl	8005158 <puts>
			break;
 800129e:	e05d      	b.n	800135c <Change_Can_Speed+0x150>
		case '3':
			myhcan->Init.Prescaler = 9;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2209      	movs	r2, #9
 80012a4:	605a      	str	r2, [r3, #4]
			myhcan->Init.TimeSeg1 = CAN_BS1_13TQ;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80012ac:	611a      	str	r2, [r3, #16]
			myhcan->Init.TimeSeg2 = CAN_BS2_2TQ;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012b4:	615a      	str	r2, [r3, #20]
			if (HAL_CAN_Init(myhcan) != HAL_OK)
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f001 f854 	bl	8002364 <HAL_CAN_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <Change_Can_Speed+0xba>
			{
				return false;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e053      	b.n	800136e <Change_Can_Speed+0x162>
			}
			printf("CAN Speed Changed to 250 KBPS\r\n");
 80012c6:	482e      	ldr	r0, [pc, #184]	; (8001380 <Change_Can_Speed+0x174>)
 80012c8:	f003 ff46 	bl	8005158 <puts>
			break;
 80012cc:	e046      	b.n	800135c <Change_Can_Speed+0x150>
		case '4':
			myhcan->Init.Prescaler = 15;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	220f      	movs	r2, #15
 80012d2:	605a      	str	r2, [r3, #4]
			myhcan->Init.TimeSeg1 = CAN_BS1_13TQ;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80012da:	611a      	str	r2, [r3, #16]
			myhcan->Init.TimeSeg2 = CAN_BS2_2TQ;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012e2:	615a      	str	r2, [r3, #20]
			if (HAL_CAN_Init(myhcan) != HAL_OK)
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f001 f83d 	bl	8002364 <HAL_CAN_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <Change_Can_Speed+0xe8>
			{
				return false;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e03c      	b.n	800136e <Change_Can_Speed+0x162>
			}
			printf("CAN Speed Changed to 150 KBPS\r\n");
 80012f4:	4823      	ldr	r0, [pc, #140]	; (8001384 <Change_Can_Speed+0x178>)
 80012f6:	f003 ff2f 	bl	8005158 <puts>
			break;
 80012fa:	e02f      	b.n	800135c <Change_Can_Speed+0x150>
		case '5':
			myhcan->Init.Prescaler = 45;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	222d      	movs	r2, #45	; 0x2d
 8001300:	605a      	str	r2, [r3, #4]
			myhcan->Init.TimeSeg1 = CAN_BS1_6TQ;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001308:	611a      	str	r2, [r3, #16]
			myhcan->Init.TimeSeg2 = CAN_BS2_1TQ;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
			if (HAL_CAN_Init(myhcan) != HAL_OK)
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f001 f827 	bl	8002364 <HAL_CAN_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <Change_Can_Speed+0x114>
			{
				return false;
 800131c:	2300      	movs	r3, #0
 800131e:	e026      	b.n	800136e <Change_Can_Speed+0x162>
			}
			printf("CAN Speed Changed to 100 KBPS\r\n");
 8001320:	4819      	ldr	r0, [pc, #100]	; (8001388 <Change_Can_Speed+0x17c>)
 8001322:	f003 ff19 	bl	8005158 <puts>
			break;
 8001326:	e019      	b.n	800135c <Change_Can_Speed+0x150>
		case '6':
			myhcan->Init.Prescaler = 45;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	222d      	movs	r2, #45	; 0x2d
 800132c:	605a      	str	r2, [r3, #4]
			myhcan->Init.TimeSeg1 = CAN_BS1_13TQ;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001334:	611a      	str	r2, [r3, #16]
			myhcan->Init.TimeSeg2 = CAN_BS2_2TQ;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800133c:	615a      	str	r2, [r3, #20]
			if (HAL_CAN_Init(myhcan) != HAL_OK)
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f001 f810 	bl	8002364 <HAL_CAN_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <Change_Can_Speed+0x142>
			{
				return false;
 800134a:	2300      	movs	r3, #0
 800134c:	e00f      	b.n	800136e <Change_Can_Speed+0x162>
			}
			printf("CAN Speed Changed to 50 KBPS\r\n");
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <Change_Can_Speed+0x180>)
 8001350:	f003 ff02 	bl	8005158 <puts>
			break;
 8001354:	e002      	b.n	800135c <Change_Can_Speed+0x150>
		default:
			printf("Invalid Input\r\n");
 8001356:	480e      	ldr	r0, [pc, #56]	; (8001390 <Change_Can_Speed+0x184>)
 8001358:	f003 fefe 	bl	8005158 <puts>
	}
	if(HAL_CAN_Start(myhcan)!=HAL_OK){
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f001 f9dd 	bl	800271c <HAL_CAN_Start>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <Change_Can_Speed+0x160>
		return false;
 8001368:	2300      	movs	r3, #0
 800136a:	e000      	b.n	800136e <Change_Can_Speed+0x162>
	}
	return true;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	08006a18 	.word	0x08006a18
 800137c:	08006a38 	.word	0x08006a38
 8001380:	08006a58 	.word	0x08006a58
 8001384:	08006a78 	.word	0x08006a78
 8001388:	08006a98 	.word	0x08006a98
 800138c:	08006ab8 	.word	0x08006ab8
 8001390:	08006ad8 	.word	0x08006ad8

08001394 <PrintMenu>:
void PrintMenu(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	printf("\r\nPlease press the button for the action you want to do\r\n");
 8001398:	4812      	ldr	r0, [pc, #72]	; (80013e4 <PrintMenu+0x50>)
 800139a:	f003 fedd 	bl	8005158 <puts>
	printf("1-Change CAN-1 Speed\r\n");
 800139e:	4812      	ldr	r0, [pc, #72]	; (80013e8 <PrintMenu+0x54>)
 80013a0:	f003 feda 	bl	8005158 <puts>
	printf("2-Change CAN-2 Speed\r\n");
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <PrintMenu+0x58>)
 80013a6:	f003 fed7 	bl	8005158 <puts>
	printf("3-Block CAN ID's\r\n");
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <PrintMenu+0x5c>)
 80013ac:	f003 fed4 	bl	8005158 <puts>
	printf("4-Unblock CAN ID's\r\n");
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <PrintMenu+0x60>)
 80013b2:	f003 fed1 	bl	8005158 <puts>
	printf("5-Modify CAN Messages\r\n");
 80013b6:	4810      	ldr	r0, [pc, #64]	; (80013f8 <PrintMenu+0x64>)
 80013b8:	f003 fece 	bl	8005158 <puts>
	printf("6-Send Custom Messages via CAN-1\r\n");
 80013bc:	480f      	ldr	r0, [pc, #60]	; (80013fc <PrintMenu+0x68>)
 80013be:	f003 fecb 	bl	8005158 <puts>
	printf("7-Send Custom Messages via CAN-2\r\n");
 80013c2:	480f      	ldr	r0, [pc, #60]	; (8001400 <PrintMenu+0x6c>)
 80013c4:	f003 fec8 	bl	8005158 <puts>
	printf("c-Show Current Configuration.\r\n");
 80013c8:	480e      	ldr	r0, [pc, #56]	; (8001404 <PrintMenu+0x70>)
 80013ca:	f003 fec5 	bl	8005158 <puts>
	printf("d-Enable/Disable Debug\r\n");
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <PrintMenu+0x74>)
 80013d0:	f003 fec2 	bl	8005158 <puts>
	printf("s-Start/Stop The Man in the Middle\r\n");
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <PrintMenu+0x78>)
 80013d6:	f003 febf 	bl	8005158 <puts>
	printf("m-Show Menu\r\n");
 80013da:	480d      	ldr	r0, [pc, #52]	; (8001410 <PrintMenu+0x7c>)
 80013dc:	f003 febc 	bl	8005158 <puts>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	08006ae8 	.word	0x08006ae8
 80013e8:	08006b24 	.word	0x08006b24
 80013ec:	08006b3c 	.word	0x08006b3c
 80013f0:	08006b54 	.word	0x08006b54
 80013f4:	08006b68 	.word	0x08006b68
 80013f8:	08006b7c 	.word	0x08006b7c
 80013fc:	08006b94 	.word	0x08006b94
 8001400:	08006bb8 	.word	0x08006bb8
 8001404:	08006bdc 	.word	0x08006bdc
 8001408:	08006bfc 	.word	0x08006bfc
 800140c:	08006c14 	.word	0x08006c14
 8001410:	08006c38 	.word	0x08006c38

08001414 <PrintCanSpeed>:
void PrintCanSpeed(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	printf("Please Select The Can Speed\r\n");
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <PrintCanSpeed+0x34>)
 800141a:	f003 fe9d 	bl	8005158 <puts>
	printf("1-1000 KBPS\r\n");
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <PrintCanSpeed+0x38>)
 8001420:	f003 fe9a 	bl	8005158 <puts>
	printf("2-500  KBPS(default)\r\n");
 8001424:	480a      	ldr	r0, [pc, #40]	; (8001450 <PrintCanSpeed+0x3c>)
 8001426:	f003 fe97 	bl	8005158 <puts>
	printf("3-250  KBPS\r\n");
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <PrintCanSpeed+0x40>)
 800142c:	f003 fe94 	bl	8005158 <puts>
	printf("4-150  KBPS\r\n");
 8001430:	4809      	ldr	r0, [pc, #36]	; (8001458 <PrintCanSpeed+0x44>)
 8001432:	f003 fe91 	bl	8005158 <puts>
	printf("5-100  KBPS\r\n");
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <PrintCanSpeed+0x48>)
 8001438:	f003 fe8e 	bl	8005158 <puts>
	printf("6-50   KPBS\r\n");
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <PrintCanSpeed+0x4c>)
 800143e:	f003 fe8b 	bl	8005158 <puts>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	08006c48 	.word	0x08006c48
 800144c:	08006c68 	.word	0x08006c68
 8001450:	08006c78 	.word	0x08006c78
 8001454:	08006c90 	.word	0x08006c90
 8001458:	08006ca0 	.word	0x08006ca0
 800145c:	08006cb0 	.word	0x08006cb0
 8001460:	08006cc0 	.word	0x08006cc0

08001464 <PrintConfig>:
void PrintConfig(void){
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
	int counter=1;
 800146a:	2301      	movs	r3, #1
 800146c:	607b      	str	r3, [r7, #4]
	printf("Block List\r\n");
 800146e:	4811      	ldr	r0, [pc, #68]	; (80014b4 <PrintConfig+0x50>)
 8001470:	f003 fe72 	bl	8005158 <puts>
	for(int i=0;i<10;i++){
 8001474:	2300      	movs	r3, #0
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	e014      	b.n	80014a4 <PrintConfig+0x40>
		if(BlockList[i]!=0){
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <PrintConfig+0x54>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <PrintConfig+0x3a>
			printf("%d-%03x\r\n",counter,BlockList[i]);
 8001486:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <PrintConfig+0x54>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800148e:	461a      	mov	r2, r3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	480a      	ldr	r0, [pc, #40]	; (80014bc <PrintConfig+0x58>)
 8001494:	f003 fdec 	bl	8005070 <iprintf>
			counter++;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3301      	adds	r3, #1
 800149c:	607b      	str	r3, [r7, #4]
	for(int i=0;i<10;i++){
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2b09      	cmp	r3, #9
 80014a8:	dde7      	ble.n	800147a <PrintConfig+0x16>
		}
	}
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	08006cd0 	.word	0x08006cd0
 80014b8:	200002b4 	.word	0x200002b4
 80014bc:	08006cdc 	.word	0x08006cdc

080014c0 <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80014c8:	1d39      	adds	r1, r7, #4
 80014ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ce:	2201      	movs	r2, #1
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <__io_putchar+0x20>)
 80014d2:	f003 fb5c 	bl	8004b8e <HAL_UART_Transmit>

  return ch;
 80014d6:	687b      	ldr	r3, [r7, #4]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000360 	.word	0x20000360

080014e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3){
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_TIM_PeriodElapsedCallback+0x16>
		ToggleLed1();
 80014f6:	f000 f807 	bl	8001508 <ToggleLed1>
	}
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40000400 	.word	0x40000400

08001508 <ToggleLed1>:
void ToggleLed1(void){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800150c:	2101      	movs	r1, #1
 800150e:	4802      	ldr	r0, [pc, #8]	; (8001518 <ToggleLed1+0x10>)
 8001510:	f002 fa1a 	bl	8003948 <HAL_GPIO_TogglePin>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40010c00 	.word	0x40010c00

0800151c <EEPROM_Block_Read>:
void EEPROM_Block_Read(uint16_t *BlockList){
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8001524:	f001 ff0e 	bl	8003344 <HAL_FLASH_Unlock>
	EE_ReadVariable(VirtAddVarTab[0], &BlockList[0]);
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <EEPROM_Block_Read+0xb4>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fb1e 	bl	8000b70 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[1], &BlockList[1]);
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <EEPROM_Block_Read+0xb4>)
 8001536:	885a      	ldrh	r2, [r3, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3302      	adds	r3, #2
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f7ff fb16 	bl	8000b70 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[2], &BlockList[2]);
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <EEPROM_Block_Read+0xb4>)
 8001546:	889a      	ldrh	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f7ff fb0e 	bl	8000b70 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[3], &BlockList[3]);
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <EEPROM_Block_Read+0xb4>)
 8001556:	88da      	ldrh	r2, [r3, #6]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3306      	adds	r3, #6
 800155c:	4619      	mov	r1, r3
 800155e:	4610      	mov	r0, r2
 8001560:	f7ff fb06 	bl	8000b70 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[4], &BlockList[4]);
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <EEPROM_Block_Read+0xb4>)
 8001566:	891a      	ldrh	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3308      	adds	r3, #8
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f7ff fafe 	bl	8000b70 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[5], &BlockList[5]);
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <EEPROM_Block_Read+0xb4>)
 8001576:	895a      	ldrh	r2, [r3, #10]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	330a      	adds	r3, #10
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f7ff faf6 	bl	8000b70 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[6], &BlockList[6]);
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <EEPROM_Block_Read+0xb4>)
 8001586:	899a      	ldrh	r2, [r3, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	330c      	adds	r3, #12
 800158c:	4619      	mov	r1, r3
 800158e:	4610      	mov	r0, r2
 8001590:	f7ff faee 	bl	8000b70 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[7], &BlockList[7]);
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <EEPROM_Block_Read+0xb4>)
 8001596:	89da      	ldrh	r2, [r3, #14]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	330e      	adds	r3, #14
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f7ff fae6 	bl	8000b70 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[8], &BlockList[8]);
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <EEPROM_Block_Read+0xb4>)
 80015a6:	8a1a      	ldrh	r2, [r3, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3310      	adds	r3, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f7ff fade 	bl	8000b70 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[9], &BlockList[9]);
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <EEPROM_Block_Read+0xb4>)
 80015b6:	8a5a      	ldrh	r2, [r3, #18]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3312      	adds	r3, #18
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f7ff fad6 	bl	8000b70 <EE_ReadVariable>
	HAL_FLASH_Lock();
 80015c4:	f001 fee4 	bl	8003390 <HAL_FLASH_Lock>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000000 	.word	0x20000000

080015d4 <EEPROM_Block_Write>:
void EEPROM_Block_Write(uint16_t *BlockList){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80015dc:	f001 feb2 	bl	8003344 <HAL_FLASH_Unlock>
	EE_WriteVariable(VirtAddVarTab[0], BlockList[0]);
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <EEPROM_Block_Write+0xcc>)
 80015e2:	881a      	ldrh	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f7ff fb0a 	bl	8000c04 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[1], BlockList[1]);
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <EEPROM_Block_Write+0xcc>)
 80015f2:	885a      	ldrh	r2, [r3, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3302      	adds	r3, #2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4610      	mov	r0, r2
 80015fe:	f7ff fb01 	bl	8000c04 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[2], BlockList[2]);
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <EEPROM_Block_Write+0xcc>)
 8001604:	889a      	ldrh	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f7ff faf8 	bl	8000c04 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[3], BlockList[3]);
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <EEPROM_Block_Write+0xcc>)
 8001616:	88da      	ldrh	r2, [r3, #6]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3306      	adds	r3, #6
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	4610      	mov	r0, r2
 8001622:	f7ff faef 	bl	8000c04 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[4], BlockList[4]);
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <EEPROM_Block_Write+0xcc>)
 8001628:	891a      	ldrh	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3308      	adds	r3, #8
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	4610      	mov	r0, r2
 8001634:	f7ff fae6 	bl	8000c04 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[5], BlockList[5]);
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <EEPROM_Block_Write+0xcc>)
 800163a:	895a      	ldrh	r2, [r3, #10]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	330a      	adds	r3, #10
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	4610      	mov	r0, r2
 8001646:	f7ff fadd 	bl	8000c04 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[6], BlockList[6]);
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <EEPROM_Block_Write+0xcc>)
 800164c:	899a      	ldrh	r2, [r3, #12]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	330c      	adds	r3, #12
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f7ff fad4 	bl	8000c04 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[7], BlockList[7]);
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <EEPROM_Block_Write+0xcc>)
 800165e:	89da      	ldrh	r2, [r3, #14]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	330e      	adds	r3, #14
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	4610      	mov	r0, r2
 800166a:	f7ff facb 	bl	8000c04 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[8], BlockList[8]);
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <EEPROM_Block_Write+0xcc>)
 8001670:	8a1a      	ldrh	r2, [r3, #16]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3310      	adds	r3, #16
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	4610      	mov	r0, r2
 800167c:	f7ff fac2 	bl	8000c04 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[9], BlockList[9]);
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <EEPROM_Block_Write+0xcc>)
 8001682:	8a5a      	ldrh	r2, [r3, #18]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3312      	adds	r3, #18
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	4619      	mov	r1, r3
 800168c:	4610      	mov	r0, r2
 800168e:	f7ff fab9 	bl	8000c04 <EE_WriteVariable>
	HAL_FLASH_Lock();
 8001692:	f001 fe7d 	bl	8003390 <HAL_FLASH_Lock>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000

080016a4 <Serial_Available>:
bool Serial_Available(UART_HandleTypeDef *huart)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    uint32_t RX_State;

    RX_State = huart->Instance->SR & UART_FLAG_RXNE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0320 	and.w	r3, r3, #32
 80016b6:	60fb      	str	r3, [r7, #12]

    //something is in the buffer
    if (RX_State > 0)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <Serial_Available+0x1e>
    {
        return true;
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <Serial_Available+0x20>
    }
    //nothing is there
    return false;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <MenuDecode>:
void MenuDecode(char decodechar){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b092      	sub	sp, #72	; 0x48
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	char datalenght;
	uint8_t datalenghtint;
	unsigned int BlockedCanID;
	unsigned int TxData[8];
	char CANRxcharData[4];
	switch(decodechar){
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	3b31      	subs	r3, #49	; 0x31
 80016de:	2b42      	cmp	r3, #66	; 0x42
 80016e0:	f200 81bd 	bhi.w	8001a5e <MenuDecode+0x38e>
 80016e4:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <MenuDecode+0x1c>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	080017f9 	.word	0x080017f9
 80016f0:	08001819 	.word	0x08001819
 80016f4:	08001839 	.word	0x08001839
 80016f8:	0800186b 	.word	0x0800186b
 80016fc:	0800189d 	.word	0x0800189d
 8001700:	080018a5 	.word	0x080018a5
 8001704:	08001951 	.word	0x08001951
 8001708:	08001a5f 	.word	0x08001a5f
 800170c:	08001a5f 	.word	0x08001a5f
 8001710:	08001a5f 	.word	0x08001a5f
 8001714:	08001a5f 	.word	0x08001a5f
 8001718:	08001a5f 	.word	0x08001a5f
 800171c:	08001a5f 	.word	0x08001a5f
 8001720:	08001a5f 	.word	0x08001a5f
 8001724:	08001a5f 	.word	0x08001a5f
 8001728:	08001a5f 	.word	0x08001a5f
 800172c:	08001a5f 	.word	0x08001a5f
 8001730:	08001a5f 	.word	0x08001a5f
 8001734:	08001a5f 	.word	0x08001a5f
 8001738:	08001a5f 	.word	0x08001a5f
 800173c:	08001a5f 	.word	0x08001a5f
 8001740:	08001a5f 	.word	0x08001a5f
 8001744:	08001a5f 	.word	0x08001a5f
 8001748:	08001a5f 	.word	0x08001a5f
 800174c:	08001a5f 	.word	0x08001a5f
 8001750:	08001a5f 	.word	0x08001a5f
 8001754:	08001a5f 	.word	0x08001a5f
 8001758:	08001a5f 	.word	0x08001a5f
 800175c:	08001a5f 	.word	0x08001a5f
 8001760:	08001a5f 	.word	0x08001a5f
 8001764:	08001a5f 	.word	0x08001a5f
 8001768:	08001a5f 	.word	0x08001a5f
 800176c:	08001a5f 	.word	0x08001a5f
 8001770:	08001a5f 	.word	0x08001a5f
 8001774:	08001a5f 	.word	0x08001a5f
 8001778:	08001a5f 	.word	0x08001a5f
 800177c:	08001a5f 	.word	0x08001a5f
 8001780:	08001a5f 	.word	0x08001a5f
 8001784:	08001a5f 	.word	0x08001a5f
 8001788:	08001a5f 	.word	0x08001a5f
 800178c:	08001a5f 	.word	0x08001a5f
 8001790:	08001a5f 	.word	0x08001a5f
 8001794:	08001a5f 	.word	0x08001a5f
 8001798:	08001a5f 	.word	0x08001a5f
 800179c:	08001a5f 	.word	0x08001a5f
 80017a0:	08001a5f 	.word	0x08001a5f
 80017a4:	08001a5f 	.word	0x08001a5f
 80017a8:	08001a5f 	.word	0x08001a5f
 80017ac:	08001a5f 	.word	0x08001a5f
 80017b0:	08001a5f 	.word	0x08001a5f
 80017b4:	080019fb 	.word	0x080019fb
 80017b8:	08001a01 	.word	0x08001a01
 80017bc:	08001a5f 	.word	0x08001a5f
 80017c0:	08001a5f 	.word	0x08001a5f
 80017c4:	08001a5f 	.word	0x08001a5f
 80017c8:	08001a5f 	.word	0x08001a5f
 80017cc:	08001a5f 	.word	0x08001a5f
 80017d0:	08001a5f 	.word	0x08001a5f
 80017d4:	08001a5f 	.word	0x08001a5f
 80017d8:	08001a5f 	.word	0x08001a5f
 80017dc:	08001a59 	.word	0x08001a59
 80017e0:	08001a5f 	.word	0x08001a5f
 80017e4:	08001a5f 	.word	0x08001a5f
 80017e8:	08001a5f 	.word	0x08001a5f
 80017ec:	08001a5f 	.word	0x08001a5f
 80017f0:	08001a5f 	.word	0x08001a5f
 80017f4:	08001a25 	.word	0x08001a25
		case '1':
			PrintCanSpeed();
 80017f8:	f7ff fe0c 	bl	8001414 <PrintCanSpeed>
			HAL_UART_Receive(&huart1, (uint8_t*)&canspeedchar, 1, HAL_MAX_DELAY);
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001800:	2201      	movs	r2, #1
 8001802:	499d      	ldr	r1, [pc, #628]	; (8001a78 <MenuDecode+0x3a8>)
 8001804:	489d      	ldr	r0, [pc, #628]	; (8001a7c <MenuDecode+0x3ac>)
 8001806:	f003 fa5b 	bl	8004cc0 <HAL_UART_Receive>
			Change_Can_Speed(&hcan1, canspeedchar);
 800180a:	4b9b      	ldr	r3, [pc, #620]	; (8001a78 <MenuDecode+0x3a8>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	489b      	ldr	r0, [pc, #620]	; (8001a80 <MenuDecode+0x3b0>)
 8001812:	f7ff fcfb 	bl	800120c <Change_Can_Speed>
			break;
 8001816:	e12b      	b.n	8001a70 <MenuDecode+0x3a0>
		case '2':
			PrintCanSpeed();
 8001818:	f7ff fdfc 	bl	8001414 <PrintCanSpeed>
			HAL_UART_Receive(&huart1, (uint8_t*)&canspeedchar, 1, HAL_MAX_DELAY);
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
 8001820:	2201      	movs	r2, #1
 8001822:	4995      	ldr	r1, [pc, #596]	; (8001a78 <MenuDecode+0x3a8>)
 8001824:	4895      	ldr	r0, [pc, #596]	; (8001a7c <MenuDecode+0x3ac>)
 8001826:	f003 fa4b 	bl	8004cc0 <HAL_UART_Receive>
			Change_Can_Speed(&hcan2, canspeedchar);
 800182a:	4b93      	ldr	r3, [pc, #588]	; (8001a78 <MenuDecode+0x3a8>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4619      	mov	r1, r3
 8001830:	4894      	ldr	r0, [pc, #592]	; (8001a84 <MenuDecode+0x3b4>)
 8001832:	f7ff fceb 	bl	800120c <Change_Can_Speed>
			break;
 8001836:	e11b      	b.n	8001a70 <MenuDecode+0x3a0>
		case '3':
			printf("Please Input CAN ID in 0xXXX format.\r\n");
 8001838:	4893      	ldr	r0, [pc, #588]	; (8001a88 <MenuDecode+0x3b8>)
 800183a:	f003 fc8d 	bl	8005158 <puts>
			HAL_UART_Receive(&huart1, (uint8_t*)CANIDRx, 5, HAL_MAX_DELAY);
 800183e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	2205      	movs	r2, #5
 8001848:	488c      	ldr	r0, [pc, #560]	; (8001a7c <MenuDecode+0x3ac>)
 800184a:	f003 fa39 	bl	8004cc0 <HAL_UART_Receive>
			sscanf(CANIDRx,"%x",&BlockedCanID);
 800184e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001852:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001856:	498d      	ldr	r1, [pc, #564]	; (8001a8c <MenuDecode+0x3bc>)
 8001858:	4618      	mov	r0, r3
 800185a:	f003 fc85 	bl	8005168 <siscanf>
			AddtoBlockList(BlockedCanID);
 800185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001860:	b29b      	uxth	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fa0c 	bl	8001c80 <AddtoBlockList>
			break;
 8001868:	e102      	b.n	8001a70 <MenuDecode+0x3a0>
		case '4':
			printf("Please Input CAN ID in 0xXXX format.\r\n");
 800186a:	4887      	ldr	r0, [pc, #540]	; (8001a88 <MenuDecode+0x3b8>)
 800186c:	f003 fc74 	bl	8005158 <puts>
			HAL_UART_Receive(&huart1, (uint8_t*)CANIDRx, 5, HAL_MAX_DELAY);
 8001870:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	2205      	movs	r2, #5
 800187a:	4880      	ldr	r0, [pc, #512]	; (8001a7c <MenuDecode+0x3ac>)
 800187c:	f003 fa20 	bl	8004cc0 <HAL_UART_Receive>
			sscanf(CANIDRx,"%x",&BlockedCanID);
 8001880:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001884:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001888:	4980      	ldr	r1, [pc, #512]	; (8001a8c <MenuDecode+0x3bc>)
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fc6c 	bl	8005168 <siscanf>
			DeleteBlockList(BlockedCanID);
 8001890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fa49 	bl	8001d2c <DeleteBlockList>
			break;
 800189a:	e0e9      	b.n	8001a70 <MenuDecode+0x3a0>
		case '5':
			printf("This Option is Disabled for now.\r\n");
 800189c:	487c      	ldr	r0, [pc, #496]	; (8001a90 <MenuDecode+0x3c0>)
 800189e:	f003 fc5b 	bl	8005158 <puts>
			break;
 80018a2:	e0e5      	b.n	8001a70 <MenuDecode+0x3a0>
		case '6':
			printf("Please Input DataLenght.(1-8)\r\n");
 80018a4:	487b      	ldr	r0, [pc, #492]	; (8001a94 <MenuDecode+0x3c4>)
 80018a6:	f003 fc57 	bl	8005158 <puts>
			HAL_UART_Receive(&huart1, (uint8_t*)&datalenght, 1, HAL_MAX_DELAY);
 80018aa:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	2201      	movs	r2, #1
 80018b4:	4871      	ldr	r0, [pc, #452]	; (8001a7c <MenuDecode+0x3ac>)
 80018b6:	f003 fa03 	bl	8004cc0 <HAL_UART_Receive>
			datalenghtint = (uint8_t)(datalenght-'0');
 80018ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018be:	3b30      	subs	r3, #48	; 0x30
 80018c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if(datalenghtint>8)
 80018c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d902      	bls.n	80018d2 <MenuDecode+0x202>
				printf("Invalid data lenght\r\n");
 80018cc:	4872      	ldr	r0, [pc, #456]	; (8001a98 <MenuDecode+0x3c8>)
 80018ce:	f003 fc43 	bl	8005158 <puts>
			printf("Input the Data in 0xXX format");
 80018d2:	4872      	ldr	r0, [pc, #456]	; (8001a9c <MenuDecode+0x3cc>)
 80018d4:	f003 fbcc 	bl	8005070 <iprintf>
			for(int i=0;i<datalenghtint;i++){
 80018d8:	2300      	movs	r3, #0
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
 80018dc:	e015      	b.n	800190a <MenuDecode+0x23a>
				HAL_UART_Receive(&huart1, (uint8_t*)CANRxcharData, 4, HAL_MAX_DELAY);
 80018de:	f107 010c 	add.w	r1, r7, #12
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	2204      	movs	r2, #4
 80018e8:	4864      	ldr	r0, [pc, #400]	; (8001a7c <MenuDecode+0x3ac>)
 80018ea:	f003 f9e9 	bl	8004cc0 <HAL_UART_Receive>
				sscanf(CANRxcharData,"%x",&TxData[i]);
 80018ee:	f107 0210 	add.w	r2, r7, #16
 80018f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	441a      	add	r2, r3
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4963      	ldr	r1, [pc, #396]	; (8001a8c <MenuDecode+0x3bc>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fc32 	bl	8005168 <siscanf>
			for(int i=0;i<datalenghtint;i++){
 8001904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001906:	3301      	adds	r3, #1
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
 800190a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800190e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001910:	429a      	cmp	r2, r3
 8001912:	dbe4      	blt.n	80018de <MenuDecode+0x20e>
			}
			CAN1TxMessage.DLC=datalenghtint;
 8001914:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001918:	4a61      	ldr	r2, [pc, #388]	; (8001aa0 <MenuDecode+0x3d0>)
 800191a:	6113      	str	r3, [r2, #16]
			CAN1TxMessage.StdId=0x001;
 800191c:	4b60      	ldr	r3, [pc, #384]	; (8001aa0 <MenuDecode+0x3d0>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
			if(HAL_CAN_AddTxMessage(&hcan1, &CAN1TxMessage, (uint8_t*)TxData, &CAN1TxMailbox)==HAL_OK){
 8001922:	f107 0210 	add.w	r2, r7, #16
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <MenuDecode+0x3d4>)
 8001928:	495d      	ldr	r1, [pc, #372]	; (8001aa0 <MenuDecode+0x3d0>)
 800192a:	4855      	ldr	r0, [pc, #340]	; (8001a80 <MenuDecode+0x3b0>)
 800192c:	f000 ff83 	bl	8002836 <HAL_CAN_AddTxMessage>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d108      	bne.n	8001948 <MenuDecode+0x278>
				if(debug)
 8001936:	4b5c      	ldr	r3, [pc, #368]	; (8001aa8 <MenuDecode+0x3d8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8093 	beq.w	8001a66 <MenuDecode+0x396>
					printf("Message Sent via CAN-1\r\n");
 8001940:	485a      	ldr	r0, [pc, #360]	; (8001aac <MenuDecode+0x3dc>)
 8001942:	f003 fc09 	bl	8005158 <puts>
			}else{
				printf("Error while sending message\r\n");
			}
			break;
 8001946:	e08e      	b.n	8001a66 <MenuDecode+0x396>
				printf("Error while sending message\r\n");
 8001948:	4859      	ldr	r0, [pc, #356]	; (8001ab0 <MenuDecode+0x3e0>)
 800194a:	f003 fc05 	bl	8005158 <puts>
			break;
 800194e:	e08a      	b.n	8001a66 <MenuDecode+0x396>
		case '7':
			printf("Please Input DataLenght.(1-8)\r\n");
 8001950:	4850      	ldr	r0, [pc, #320]	; (8001a94 <MenuDecode+0x3c4>)
 8001952:	f003 fc01 	bl	8005158 <puts>
			HAL_UART_Receive(&huart1, (uint8_t*)&datalenght, 1, HAL_MAX_DELAY);
 8001956:	f107 0137 	add.w	r1, r7, #55	; 0x37
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	2201      	movs	r2, #1
 8001960:	4846      	ldr	r0, [pc, #280]	; (8001a7c <MenuDecode+0x3ac>)
 8001962:	f003 f9ad 	bl	8004cc0 <HAL_UART_Receive>
			datalenghtint = (uint8_t)(datalenght-'0');
 8001966:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800196a:	3b30      	subs	r3, #48	; 0x30
 800196c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if(datalenghtint>8)
 8001970:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001974:	2b08      	cmp	r3, #8
 8001976:	d902      	bls.n	800197e <MenuDecode+0x2ae>
				printf("Invalid data lenght\r\n");
 8001978:	4847      	ldr	r0, [pc, #284]	; (8001a98 <MenuDecode+0x3c8>)
 800197a:	f003 fbed 	bl	8005158 <puts>
			printf("Input the Data in 0xXX format");
 800197e:	4847      	ldr	r0, [pc, #284]	; (8001a9c <MenuDecode+0x3cc>)
 8001980:	f003 fb76 	bl	8005070 <iprintf>
			for(int i=0;i<datalenghtint;i++){
 8001984:	2300      	movs	r3, #0
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
 8001988:	e015      	b.n	80019b6 <MenuDecode+0x2e6>
				HAL_UART_Receive(&huart1, (uint8_t*)CANRxcharData, 4, HAL_MAX_DELAY);
 800198a:	f107 010c 	add.w	r1, r7, #12
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	2204      	movs	r2, #4
 8001994:	4839      	ldr	r0, [pc, #228]	; (8001a7c <MenuDecode+0x3ac>)
 8001996:	f003 f993 	bl	8004cc0 <HAL_UART_Receive>
				sscanf(CANRxcharData,"%x",&TxData[i]);
 800199a:	f107 0210 	add.w	r2, r7, #16
 800199e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	441a      	add	r2, r3
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4938      	ldr	r1, [pc, #224]	; (8001a8c <MenuDecode+0x3bc>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 fbdc 	bl	8005168 <siscanf>
			for(int i=0;i<datalenghtint;i++){
 80019b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b2:	3301      	adds	r3, #1
 80019b4:	643b      	str	r3, [r7, #64]	; 0x40
 80019b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbe4      	blt.n	800198a <MenuDecode+0x2ba>
			}
			CAN2TxMessage.DLC=datalenghtint;
 80019c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019c4:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <MenuDecode+0x3e4>)
 80019c6:	6113      	str	r3, [r2, #16]
			CAN2TxMessage.StdId=0x001;
 80019c8:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <MenuDecode+0x3e4>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
			if(HAL_CAN_AddTxMessage(&hcan2, &CAN2TxMessage, (uint8_t*)TxData, &CAN2TxMailbox)==HAL_OK){
 80019ce:	f107 0210 	add.w	r2, r7, #16
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <MenuDecode+0x3e8>)
 80019d4:	4937      	ldr	r1, [pc, #220]	; (8001ab4 <MenuDecode+0x3e4>)
 80019d6:	482b      	ldr	r0, [pc, #172]	; (8001a84 <MenuDecode+0x3b4>)
 80019d8:	f000 ff2d 	bl	8002836 <HAL_CAN_AddTxMessage>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <MenuDecode+0x322>
				if(debug)
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <MenuDecode+0x3d8>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03f      	beq.n	8001a6a <MenuDecode+0x39a>
					printf("Message Sent via CAN-2\r\n");
 80019ea:	4834      	ldr	r0, [pc, #208]	; (8001abc <MenuDecode+0x3ec>)
 80019ec:	f003 fbb4 	bl	8005158 <puts>
			}else{
				printf("Error while sending message\r\n");
			}
			break;
 80019f0:	e03b      	b.n	8001a6a <MenuDecode+0x39a>
				printf("Error while sending message\r\n");
 80019f2:	482f      	ldr	r0, [pc, #188]	; (8001ab0 <MenuDecode+0x3e0>)
 80019f4:	f003 fbb0 	bl	8005158 <puts>
			break;
 80019f8:	e037      	b.n	8001a6a <MenuDecode+0x39a>
		case 'c':
			PrintConfig();
 80019fa:	f7ff fd33 	bl	8001464 <PrintConfig>
			break;
 80019fe:	e037      	b.n	8001a70 <MenuDecode+0x3a0>
		case 'd':
			if(debug){
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <MenuDecode+0x3d8>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <MenuDecode+0x346>
				debug=false;
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <MenuDecode+0x3d8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
				printf("Debug Disabled\r\n");
 8001a0e:	482c      	ldr	r0, [pc, #176]	; (8001ac0 <MenuDecode+0x3f0>)
 8001a10:	f003 fba2 	bl	8005158 <puts>
			}
			else{
				debug=true;
				printf("Debug Enabled\r\n");
			}
			break;
 8001a14:	e02c      	b.n	8001a70 <MenuDecode+0x3a0>
				debug=true;
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <MenuDecode+0x3d8>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
				printf("Debug Enabled\r\n");
 8001a1c:	4829      	ldr	r0, [pc, #164]	; (8001ac4 <MenuDecode+0x3f4>)
 8001a1e:	f003 fb9b 	bl	8005158 <puts>
			break;
 8001a22:	e025      	b.n	8001a70 <MenuDecode+0x3a0>
		case 's':
			if(start){
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <MenuDecode+0x3f8>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00a      	beq.n	8001a42 <MenuDecode+0x372>
				start=false;
 8001a2c:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <MenuDecode+0x3f8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
				if(debug)
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <MenuDecode+0x3d8>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d019      	beq.n	8001a6e <MenuDecode+0x39e>
					printf("MITM Stopped\r\n");
 8001a3a:	4824      	ldr	r0, [pc, #144]	; (8001acc <MenuDecode+0x3fc>)
 8001a3c:	f003 fb8c 	bl	8005158 <puts>
			else{
				start=true;
				if(debug)
					printf("MITM Starteded\r\n");
			}
			break;
 8001a40:	e015      	b.n	8001a6e <MenuDecode+0x39e>
				start=true;
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <MenuDecode+0x3f8>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
				if(debug)
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <MenuDecode+0x3d8>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00e      	beq.n	8001a6e <MenuDecode+0x39e>
					printf("MITM Starteded\r\n");
 8001a50:	481f      	ldr	r0, [pc, #124]	; (8001ad0 <MenuDecode+0x400>)
 8001a52:	f003 fb81 	bl	8005158 <puts>
			break;
 8001a56:	e00a      	b.n	8001a6e <MenuDecode+0x39e>
		case 'm':
			PrintMenu();
 8001a58:	f7ff fc9c 	bl	8001394 <PrintMenu>
			break;
 8001a5c:	e008      	b.n	8001a70 <MenuDecode+0x3a0>
		default:
			printf("Invalid Input\r\n");
 8001a5e:	481d      	ldr	r0, [pc, #116]	; (8001ad4 <MenuDecode+0x404>)
 8001a60:	f003 fb7a 	bl	8005158 <puts>
			break;
 8001a64:	e004      	b.n	8001a70 <MenuDecode+0x3a0>
			break;
 8001a66:	bf00      	nop
 8001a68:	e002      	b.n	8001a70 <MenuDecode+0x3a0>
			break;
 8001a6a:	bf00      	nop
 8001a6c:	e000      	b.n	8001a70 <MenuDecode+0x3a0>
			break;
 8001a6e:	bf00      	nop
	}
}
 8001a70:	bf00      	nop
 8001a72:	3748      	adds	r7, #72	; 0x48
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000028 	.word	0x20000028
 8001a7c:	20000360 	.word	0x20000360
 8001a80:	20000260 	.word	0x20000260
 8001a84:	20000238 	.word	0x20000238
 8001a88:	08006ce8 	.word	0x08006ce8
 8001a8c:	08006d10 	.word	0x08006d10
 8001a90:	08006d14 	.word	0x08006d14
 8001a94:	08006d38 	.word	0x08006d38
 8001a98:	08006d58 	.word	0x08006d58
 8001a9c:	08006d70 	.word	0x08006d70
 8001aa0:	200002cc 	.word	0x200002cc
 8001aa4:	200002e8 	.word	0x200002e8
 8001aa8:	20000029 	.word	0x20000029
 8001aac:	08006d90 	.word	0x08006d90
 8001ab0:	08006da8 	.word	0x08006da8
 8001ab4:	20000308 	.word	0x20000308
 8001ab8:	200002c8 	.word	0x200002c8
 8001abc:	08006dc8 	.word	0x08006dc8
 8001ac0:	08006de0 	.word	0x08006de0
 8001ac4:	08006df0 	.word	0x08006df0
 8001ac8:	2000022a 	.word	0x2000022a
 8001acc:	08006e00 	.word	0x08006e00
 8001ad0:	08006e10 	.word	0x08006e10
 8001ad4:	08006ad8 	.word	0x08006ad8

08001ad8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	4836      	ldr	r0, [pc, #216]	; (8001bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8001ae6:	f001 ff17 	bl	8003918 <HAL_GPIO_WritePin>
	clearbuffer(CAN1RxData);
 8001aea:	4836      	ldr	r0, [pc, #216]	; (8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8001aec:	f000 f8a6 	bl	8001c3c <clearbuffer>
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1RxMessage, CAN1RxData)==HAL_OK){
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8001af2:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	4835      	ldr	r0, [pc, #212]	; (8001bcc <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001af8:	f000 ff77 	bl	80029ea <HAL_CAN_GetRxMessage>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d155      	bne.n	8001bae <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
		if(debug){
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01b      	beq.n	8001b42 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
			printf("Incoming CAN Message\r\n");
 8001b0a:	4832      	ldr	r0, [pc, #200]	; (8001bd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8001b0c:	f003 fb24 	bl	8005158 <puts>
			printf("Message arrived from 0x%03lx\r\n",CAN1RxMessage.StdId);
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4830      	ldr	r0, [pc, #192]	; (8001bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001b18:	f003 faaa 	bl	8005070 <iprintf>
			for(int i=0;i<CAN1RxMessage.DLC;i++){
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e00a      	b.n	8001b38 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
				printf("0x%x ",CAN1RxData[i]);
 8001b22:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	482b      	ldr	r0, [pc, #172]	; (8001bdc <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8001b2e:	f003 fa9f 	bl	8005070 <iprintf>
			for(int i=0;i<CAN1RxMessage.DLC;i++){
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3301      	adds	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d8ef      	bhi.n	8001b22 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
			}
		}
		if(start){
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d031      	beq.n	8001bae <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
			if(!cancheckblock()){
 8001b4a:	f000 f857 	bl	8001bfc <cancheckblock>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
				if(debug){
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d025      	beq.n	8001bae <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
					printf("\r\nMessage Blocked\r\n");
 8001b62:	4820      	ldr	r0, [pc, #128]	; (8001be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001b64:	f003 faf8 	bl	8005158 <puts>
 8001b68:	e021      	b.n	8001bae <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
				}
			}
			else{
				if(candecode(CAN1RxData)){
 8001b6a:	4816      	ldr	r0, [pc, #88]	; (8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8001b6c:	f000 f87d 	bl	8001c6a <candecode>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
					if(debug){
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
						printf("Message Modified\r\n");
 8001b7e:	481a      	ldr	r0, [pc, #104]	; (8001be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001b80:	f003 faea 	bl	8005158 <puts>
					}
				}
				if(debug){
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
					printf("Sending the Message via CAN-2\r\n");
 8001b8c:	4817      	ldr	r0, [pc, #92]	; (8001bec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8001b8e:	f003 fae3 	bl	8005158 <puts>
				}
				CAN2TxMessage.DLC=CAN1RxMessage.DLC;
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8001b98:	6113      	str	r3, [r2, #16]
				CAN2TxMessage.StdId=CAN1RxMessage.StdId;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8001ba0:	6013      	str	r3, [r2, #0]
				HAL_CAN_AddTxMessage(&hcan2, &CAN2TxMessage, CAN1RxData, &CAN2TxMailbox);
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8001ba6:	4912      	ldr	r1, [pc, #72]	; (8001bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8001ba8:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8001baa:	f000 fe44 	bl	8002836 <HAL_CAN_AddTxMessage>
			}
		}
	}
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8001bb4:	f001 feb0 	bl	8003918 <HAL_GPIO_WritePin>
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40010c00 	.word	0x40010c00
 8001bc4:	200002ac 	.word	0x200002ac
 8001bc8:	200002ec 	.word	0x200002ec
 8001bcc:	20000260 	.word	0x20000260
 8001bd0:	20000029 	.word	0x20000029
 8001bd4:	08006e20 	.word	0x08006e20
 8001bd8:	08006e38 	.word	0x08006e38
 8001bdc:	08006e58 	.word	0x08006e58
 8001be0:	2000022a 	.word	0x2000022a
 8001be4:	08006e60 	.word	0x08006e60
 8001be8:	08006e74 	.word	0x08006e74
 8001bec:	08006e88 	.word	0x08006e88
 8001bf0:	20000308 	.word	0x20000308
 8001bf4:	200002c8 	.word	0x200002c8
 8001bf8:	20000238 	.word	0x20000238

08001bfc <cancheckblock>:
bool cancheckblock(void){
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++){
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	e00c      	b.n	8001c22 <cancheckblock+0x26>
		if(CAN1RxMessage.StdId==BlockList[i]){
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <cancheckblock+0x38>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	490a      	ldr	r1, [pc, #40]	; (8001c38 <cancheckblock+0x3c>)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <cancheckblock+0x20>
			return false;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e006      	b.n	8001c2a <cancheckblock+0x2e>
	for(int i=0;i<10;i++){
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b09      	cmp	r3, #9
 8001c26:	ddef      	ble.n	8001c08 <cancheckblock+0xc>
		}
	}
	return true;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	200002ec 	.word	0x200002ec
 8001c38:	200002b4 	.word	0x200002b4

08001c3c <clearbuffer>:
void clearbuffer(uint8_t *buffer){
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	for(int i=0;i<8;i++){
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e007      	b.n	8001c5a <clearbuffer+0x1e>
		buffer[i]=0;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++){
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b07      	cmp	r3, #7
 8001c5e:	ddf4      	ble.n	8001c4a <clearbuffer+0xe>
	}
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <candecode>:
bool candecode(uint8_t *buffer){
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
	return false;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
	...

08001c80 <AddtoBlockList>:
void AddtoBlockList(uint16_t BlockedCanID){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<10;i++){
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	e013      	b.n	8001cb8 <AddtoBlockList+0x38>
		if(BlockList[i]==BlockedCanID){
 8001c90:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <AddtoBlockList+0x98>)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d109      	bne.n	8001cb2 <AddtoBlockList+0x32>
			if(debug)
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <AddtoBlockList+0x9c>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d034      	beq.n	8001d10 <AddtoBlockList+0x90>
				printf("0x%03x Already Blocked\r\n",BlockedCanID);
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	481d      	ldr	r0, [pc, #116]	; (8001d20 <AddtoBlockList+0xa0>)
 8001cac:	f003 f9e0 	bl	8005070 <iprintf>
			return;
 8001cb0:	e02e      	b.n	8001d10 <AddtoBlockList+0x90>
	for(int i=0;i<10;i++){
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b09      	cmp	r3, #9
 8001cbc:	dde8      	ble.n	8001c90 <AddtoBlockList+0x10>
		}
	}
	for(int i=0;i<10;i++){
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	e01a      	b.n	8001cfa <AddtoBlockList+0x7a>
		if(BlockList[i]==0){
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <AddtoBlockList+0x98>)
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d111      	bne.n	8001cf4 <AddtoBlockList+0x74>
			BlockList[i]=BlockedCanID;
 8001cd0:	4911      	ldr	r1, [pc, #68]	; (8001d18 <AddtoBlockList+0x98>)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if(debug)
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <AddtoBlockList+0x9c>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <AddtoBlockList+0x6c>
				printf("0x%03x Added to Block List\r\n",BlockedCanID);
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480f      	ldr	r0, [pc, #60]	; (8001d24 <AddtoBlockList+0xa4>)
 8001ce8:	f003 f9c2 	bl	8005070 <iprintf>
			EEPROM_Block_Write(BlockList);
 8001cec:	480a      	ldr	r0, [pc, #40]	; (8001d18 <AddtoBlockList+0x98>)
 8001cee:	f7ff fc71 	bl	80015d4 <EEPROM_Block_Write>
			return;
 8001cf2:	e00e      	b.n	8001d12 <AddtoBlockList+0x92>
	for(int i=0;i<10;i++){
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	dde1      	ble.n	8001cc4 <AddtoBlockList+0x44>
		}
	}
	if(debug)
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <AddtoBlockList+0x9c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <AddtoBlockList+0x92>
		printf("Block List is Full.\r\n");
 8001d08:	4807      	ldr	r0, [pc, #28]	; (8001d28 <AddtoBlockList+0xa8>)
 8001d0a:	f003 fa25 	bl	8005158 <puts>
 8001d0e:	e000      	b.n	8001d12 <AddtoBlockList+0x92>
			return;
 8001d10:	bf00      	nop
}
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200002b4 	.word	0x200002b4
 8001d1c:	20000029 	.word	0x20000029
 8001d20:	08006ea8 	.word	0x08006ea8
 8001d24:	08006ec4 	.word	0x08006ec4
 8001d28:	08006ee4 	.word	0x08006ee4

08001d2c <DeleteBlockList>:
void DeleteBlockList(uint16_t BlockedCanID){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<10;i++){
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	e01b      	b.n	8001d74 <DeleteBlockList+0x48>
		if(BlockList[i]==BlockedCanID){
 8001d3c:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <DeleteBlockList+0x68>)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d44:	88fa      	ldrh	r2, [r7, #6]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d111      	bne.n	8001d6e <DeleteBlockList+0x42>
			BlockList[i]=0;
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <DeleteBlockList+0x68>)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(debug)
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <DeleteBlockList+0x6c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <DeleteBlockList+0x3a>
				printf("0x%03x Unblocked.\r\n",BlockedCanID);
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480e      	ldr	r0, [pc, #56]	; (8001d9c <DeleteBlockList+0x70>)
 8001d62:	f003 f985 	bl	8005070 <iprintf>
			EEPROM_Block_Write(BlockList);
 8001d66:	480b      	ldr	r0, [pc, #44]	; (8001d94 <DeleteBlockList+0x68>)
 8001d68:	f7ff fc34 	bl	80015d4 <EEPROM_Block_Write>
			return;
 8001d6c:	e00e      	b.n	8001d8c <DeleteBlockList+0x60>
	for(int i=0;i<10;i++){
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3301      	adds	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	dde0      	ble.n	8001d3c <DeleteBlockList+0x10>
		}
	}
	if(debug)
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <DeleteBlockList+0x6c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <DeleteBlockList+0x60>
		printf("0x%03x was not in Block List.\r\n",BlockedCanID);
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <DeleteBlockList+0x74>)
 8001d88:	f003 f972 	bl	8005070 <iprintf>
}
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200002b4 	.word	0x200002b4
 8001d98:	20000029 	.word	0x20000029
 8001d9c:	08006efc 	.word	0x08006efc
 8001da0:	08006f10 	.word	0x08006f10

08001da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */
	printf("There was Hard Error.\r\n");
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <Error_Handler+0x10>)
 8001daa:	f003 f9d5 	bl	8005158 <puts>
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	08006f30 	.word	0x08006f30

08001db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_MspInit+0x5c>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_MspInit+0x5c>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6193      	str	r3, [r2, #24]
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_MspInit+0x5c>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_MspInit+0x5c>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_MspInit+0x5c>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61d3      	str	r3, [r2, #28]
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_MspInit+0x5c>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_MspInit+0x60>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_MspInit+0x60>)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010000 	.word	0x40010000

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <HardFault_Handler+0x4>

08001e2e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <MemManage_Handler+0x4>

08001e34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <BusFault_Handler+0x4>

08001e3a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <UsageFault_Handler+0x4>

08001e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e68:	f000 fa3e 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <CAN1_RX0_IRQHandler+0x10>)
 8001e76:	f000 fec9 	bl	8002c0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000260 	.word	0x20000260

08001e84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM3_IRQHandler+0x10>)
 8001e8a:	f002 faf7 	bl	800447c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000320 	.word	0x20000320

08001e98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e00a      	b.n	8001ec0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eaa:	f3af 8000 	nop.w
 8001eae:	4601      	mov	r1, r0
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	60ba      	str	r2, [r7, #8]
 8001eb6:	b2ca      	uxtb	r2, r1
 8001eb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbf0      	blt.n	8001eaa <_read+0x12>
	}

return len;
 8001ec8:	687b      	ldr	r3, [r7, #4]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e009      	b.n	8001ef8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	60ba      	str	r2, [r7, #8]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fae7 	bl	80014c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf1      	blt.n	8001ee4 <_write+0x12>
	}
	return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_close>:

int _close(int file)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
	return -1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f30:	605a      	str	r2, [r3, #4]
	return 0;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <_isatty>:

int _isatty(int file)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
	return 1;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
	return 0;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
	...

08001f6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <_sbrk+0x50>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x16>
		heap_end = &end;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <_sbrk+0x50>)
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <_sbrk+0x54>)
 8001f80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <_sbrk+0x50>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <_sbrk+0x50>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	466a      	mov	r2, sp
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d907      	bls.n	8001fa6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f96:	f003 f85d 	bl	8005054 <__errno>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	230c      	movs	r3, #12
 8001f9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	e006      	b.n	8001fb4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <_sbrk+0x50>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a03      	ldr	r2, [pc, #12]	; (8001fbc <_sbrk+0x50>)
 8001fb0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000022c 	.word	0x2000022c
 8001fc0:	200003d0 	.word	0x200003d0

08001fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <SystemInit+0x70>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	; (8002034 <SystemInit+0x70>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <SystemInit+0x70>)
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4916      	ldr	r1, [pc, #88]	; (8002034 <SystemInit+0x70>)
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <SystemInit+0x74>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <SystemInit+0x70>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a13      	ldr	r2, [pc, #76]	; (8002034 <SystemInit+0x70>)
 8001fe6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <SystemInit+0x70>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <SystemInit+0x70>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <SystemInit+0x70>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <SystemInit+0x70>)
 8002002:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002006:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <SystemInit+0x70>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a09      	ldr	r2, [pc, #36]	; (8002034 <SystemInit+0x70>)
 800200e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002012:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <SystemInit+0x70>)
 8002016:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800201a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <SystemInit+0x70>)
 800201e:	2200      	movs	r2, #0
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <SystemInit+0x78>)
 8002024:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002028:	609a      	str	r2, [r3, #8]
#endif 
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	f0ff0000 	.word	0xf0ff0000
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002054:	463b      	mov	r3, r7
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <MX_TIM3_Init+0x94>)
 800205e:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <MX_TIM3_Init+0x98>)
 8002060:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600;
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <MX_TIM3_Init+0x94>)
 8002064:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002068:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <MX_TIM3_Init+0x94>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <MX_TIM3_Init+0x94>)
 8002072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002076:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <MX_TIM3_Init+0x94>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <MX_TIM3_Init+0x94>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002084:	4813      	ldr	r0, [pc, #76]	; (80020d4 <MX_TIM3_Init+0x94>)
 8002086:	f002 f9ab 	bl	80043e0 <HAL_TIM_Base_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002090:	f7ff fe88 	bl	8001da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002098:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	4619      	mov	r1, r3
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <MX_TIM3_Init+0x94>)
 80020a2:	f002 faf3 	bl	800468c <HAL_TIM_ConfigClockSource>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80020ac:	f7ff fe7a 	bl	8001da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b0:	2300      	movs	r3, #0
 80020b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	4619      	mov	r1, r3
 80020bc:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_TIM3_Init+0x94>)
 80020be:	f002 fcc3 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80020c8:	f7ff fe6c 	bl	8001da4 <Error_Handler>
  }

}
 80020cc:	bf00      	nop
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000320 	.word	0x20000320
 80020d8:	40000400 	.word	0x40000400

080020dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <HAL_TIM_Base_MspInit+0x44>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d113      	bne.n	8002116 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_TIM_Base_MspInit+0x48>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	; (8002124 <HAL_TIM_Base_MspInit+0x48>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	61d3      	str	r3, [r2, #28]
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_TIM_Base_MspInit+0x48>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	201d      	movs	r0, #29
 800210c:	f001 f873 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002110:	201d      	movs	r0, #29
 8002112:	f001 f88c 	bl	800322e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40000400 	.word	0x40000400
 8002124:	40021000 	.word	0x40021000

08002128 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <MX_USART1_UART_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002134:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_USART1_UART_Init+0x4c>)
 8002160:	f002 fcc8 	bl	8004af4 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800216a:	f7ff fe1b 	bl	8001da4 <Error_Handler>
  }

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000360 	.word	0x20000360
 8002178:	40013800 	.word	0x40013800

0800217c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_UART_MspInit+0x8c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d131      	bne.n	8002200 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_UART_MspInit+0x90>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a1a      	ldr	r2, [pc, #104]	; (800220c <HAL_UART_MspInit+0x90>)
 80021a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_UART_MspInit+0x90>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_UART_MspInit+0x90>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <HAL_UART_MspInit+0x90>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_UART_MspInit+0x90>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	4619      	mov	r1, r3
 80021e0:	480b      	ldr	r0, [pc, #44]	; (8002210 <HAL_UART_MspInit+0x94>)
 80021e2:	f001 fa3f 	bl	8003664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	4619      	mov	r1, r3
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <HAL_UART_MspInit+0x94>)
 80021fc:	f001 fa32 	bl	8003664 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40013800 	.word	0x40013800
 800220c:	40021000 	.word	0x40021000
 8002210:	40010800 	.word	0x40010800

08002214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002214:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002216:	e003      	b.n	8002220 <LoopCopyDataInit>

08002218 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 800221a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800221c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800221e:	3104      	adds	r1, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002220:	4809      	ldr	r0, [pc, #36]	; (8002248 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8002224:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002226:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002228:	d3f6      	bcc.n	8002218 <CopyDataInit>
  ldr r2, =_sbss
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 800222c:	e002      	b.n	8002234 <LoopFillZerobss>

0800222e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002230:	f842 3b04 	str.w	r3, [r2], #4

08002234 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8002236:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002238:	d3f9      	bcc.n	800222e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223a:	f7ff fec3 	bl	8001fc4 <SystemInit>
/* Call the application's entry point.*/
  bl main
 800223e:	f7fe fef9 	bl	8001034 <main>
  bx lr
 8002242:	4770      	bx	lr
  ldr r3, =_sidata
 8002244:	0800715c 	.word	0x0800715c
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800224c:	20000208 	.word	0x20000208
  ldr r2, =_sbss
 8002250:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 8002254:	200003cc 	.word	0x200003cc

08002258 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC1_2_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_Init+0x28>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_Init+0x28>)
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 ffb7 	bl	80031e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fd9e 	bl	8001db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40022000 	.word	0x40022000

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 ffcf 	bl	800324a <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f000 ff97 	bl	80031f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000002c 	.word	0x2000002c
 80022e0:	20000034 	.word	0x20000034
 80022e4:	20000030 	.word	0x20000030

080022e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_IncTick+0x1c>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_IncTick+0x20>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a03      	ldr	r2, [pc, #12]	; (8002308 <HAL_IncTick+0x20>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20000034 	.word	0x20000034
 8002308:	200003a0 	.word	0x200003a0

0800230c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTick;
 8002310:	4b02      	ldr	r3, [pc, #8]	; (800231c <HAL_GetTick+0x10>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	200003a0 	.word	0x200003a0

08002320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff fff0 	bl	800230c <HAL_GetTick>
 800232c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d005      	beq.n	8002346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_Delay+0x40>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002346:	bf00      	nop
 8002348:	f7ff ffe0 	bl	800230c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	d8f7      	bhi.n	8002348 <HAL_Delay+0x28>
  {
  }
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000034 	.word	0x20000034

08002364 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e0ed      	b.n	8002552 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe f944 	bl	8000610 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0202 	bic.w	r2, r2, #2
 8002396:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002398:	f7ff ffb8 	bl	800230c <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800239e:	e012      	b.n	80023c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023a0:	f7ff ffb4 	bl	800230c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b0a      	cmp	r3, #10
 80023ac:	d90b      	bls.n	80023c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2205      	movs	r2, #5
 80023be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0c5      	b.n	8002552 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e5      	bne.n	80023a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e4:	f7ff ff92 	bl	800230c <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023ea:	e012      	b.n	8002412 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023ec:	f7ff ff8e 	bl	800230c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b0a      	cmp	r3, #10
 80023f8:	d90b      	bls.n	8002412 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2205      	movs	r2, #5
 800240a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e09f      	b.n	8002552 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0e5      	beq.n	80023ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7e1b      	ldrb	r3, [r3, #24]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d108      	bne.n	800243a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e007      	b.n	800244a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7e5b      	ldrb	r3, [r3, #25]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d108      	bne.n	8002464 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e007      	b.n	8002474 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002472:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e9b      	ldrb	r3, [r3, #26]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d108      	bne.n	800248e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e007      	b.n	800249e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0220 	bic.w	r2, r2, #32
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7edb      	ldrb	r3, [r3, #27]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d108      	bne.n	80024b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0210 	bic.w	r2, r2, #16
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e007      	b.n	80024c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0210 	orr.w	r2, r2, #16
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7f1b      	ldrb	r3, [r3, #28]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0208 	orr.w	r2, r2, #8
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e007      	b.n	80024f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0208 	bic.w	r2, r2, #8
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7f5b      	ldrb	r3, [r3, #29]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d108      	bne.n	800250c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0204 	orr.w	r2, r2, #4
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	e007      	b.n	800251c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0204 	bic.w	r2, r2, #4
 800251a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	ea42 0103 	orr.w	r1, r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	1e5a      	subs	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002572:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d003      	beq.n	8002582 <HAL_CAN_ConfigFilter+0x26>
 800257a:	7cfb      	ldrb	r3, [r7, #19]
 800257c:	2b02      	cmp	r3, #2
 800257e:	f040 80be 	bne.w	80026fe <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002582:	4b65      	ldr	r3, [pc, #404]	; (8002718 <HAL_CAN_ConfigFilter+0x1bc>)
 8002584:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800259c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	431a      	orrs	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2201      	movs	r2, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	401a      	ands	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d123      	bne.n	800262c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	401a      	ands	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002606:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3248      	adds	r2, #72	; 0x48
 800260c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002620:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002622:	6979      	ldr	r1, [r7, #20]
 8002624:	3348      	adds	r3, #72	; 0x48
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d122      	bne.n	800267a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	431a      	orrs	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002654:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3248      	adds	r2, #72	; 0x48
 800265a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800266e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002670:	6979      	ldr	r1, [r7, #20]
 8002672:	3348      	adds	r3, #72	; 0x48
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43db      	mvns	r3, r3
 800268c:	401a      	ands	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002694:	e007      	b.n	80026a6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	431a      	orrs	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	401a      	ands	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026c0:	e007      	b.n	80026d2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026f0:	f023 0201 	bic.w	r2, r3, #1
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e006      	b.n	800270c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
  }
}
 800270c:	4618      	mov	r0, r3
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40006400 	.word	0x40006400

0800271c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d12e      	bne.n	800278e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002748:	f7ff fde0 	bl	800230c <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800274e:	e012      	b.n	8002776 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002750:	f7ff fddc 	bl	800230c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b0a      	cmp	r3, #10
 800275c:	d90b      	bls.n	8002776 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2205      	movs	r2, #5
 800276e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e012      	b.n	800279c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e5      	bne.n	8002750 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e006      	b.n	800279c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d133      	bne.n	8002820 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027c8:	f7ff fda0 	bl	800230c <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027ce:	e012      	b.n	80027f6 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027d0:	f7ff fd9c 	bl	800230c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b0a      	cmp	r3, #10
 80027dc:	d90b      	bls.n	80027f6 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2205      	movs	r2, #5
 80027ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e01b      	b.n	800282e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0e5      	beq.n	80027d0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0202 	bic.w	r2, r2, #2
 8002812:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	e006      	b.n	800282e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
  }
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002836:	b480      	push	{r7}
 8002838:	b089      	sub	sp, #36	; 0x24
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002854:	7ffb      	ldrb	r3, [r7, #31]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d003      	beq.n	8002862 <HAL_CAN_AddTxMessage+0x2c>
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	2b02      	cmp	r3, #2
 800285e:	f040 80b8 	bne.w	80029d2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a0 	beq.w	80029c2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	0e1b      	lsrs	r3, r3, #24
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d907      	bls.n	80028a2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e09e      	b.n	80029e0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028a2:	2201      	movs	r2, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	409a      	lsls	r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10d      	bne.n	80028d0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	6809      	ldr	r1, [r1, #0]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3318      	adds	r3, #24
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	440b      	add	r3, r1
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e00f      	b.n	80028f0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028da:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028e0:	68f9      	ldr	r1, [r7, #12]
 80028e2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028e4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3318      	adds	r3, #24
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	440b      	add	r3, r1
 80028ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3318      	adds	r3, #24
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	440b      	add	r3, r1
 8002900:	3304      	adds	r3, #4
 8002902:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	7d1b      	ldrb	r3, [r3, #20]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d111      	bne.n	8002930 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3318      	adds	r3, #24
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	4413      	add	r3, r2
 8002918:	3304      	adds	r3, #4
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	6811      	ldr	r1, [r2, #0]
 8002920:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3318      	adds	r3, #24
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	440b      	add	r3, r1
 800292c:	3304      	adds	r3, #4
 800292e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3307      	adds	r3, #7
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	061a      	lsls	r2, r3, #24
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3306      	adds	r3, #6
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3305      	adds	r3, #5
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	4313      	orrs	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	3204      	adds	r2, #4
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	4610      	mov	r0, r2
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	6811      	ldr	r1, [r2, #0]
 8002958:	ea43 0200 	orr.w	r2, r3, r0
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	440b      	add	r3, r1
 8002962:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002966:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3303      	adds	r3, #3
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	061a      	lsls	r2, r3, #24
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3302      	adds	r3, #2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	041b      	lsls	r3, r3, #16
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3301      	adds	r3, #1
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	4313      	orrs	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	7812      	ldrb	r2, [r2, #0]
 8002988:	4610      	mov	r0, r2
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	6811      	ldr	r1, [r2, #0]
 800298e:	ea43 0200 	orr.w	r2, r3, r0
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	440b      	add	r3, r1
 8002998:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800299c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3318      	adds	r3, #24
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	4413      	add	r3, r2
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	6811      	ldr	r1, [r2, #0]
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3318      	adds	r3, #24
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	440b      	add	r3, r1
 80029bc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e00e      	b.n	80029e0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e006      	b.n	80029e0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
  }
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3724      	adds	r7, #36	; 0x24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80029ea:	b480      	push	{r7}
 80029ec:	b087      	sub	sp, #28
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d003      	beq.n	8002a0e <HAL_CAN_GetRxMessage+0x24>
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	f040 80f3 	bne.w	8002bf4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10e      	bne.n	8002a32 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d116      	bne.n	8002a50 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0e7      	b.n	8002c02 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d107      	bne.n	8002a50 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0d8      	b.n	8002c02 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	331b      	adds	r3, #27
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	4413      	add	r3, r2
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0204 	and.w	r2, r3, #4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10c      	bne.n	8002a88 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	331b      	adds	r3, #27
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	4413      	add	r3, r2
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0d5b      	lsrs	r3, r3, #21
 8002a7e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	331b      	adds	r3, #27
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	4413      	add	r3, r2
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	08db      	lsrs	r3, r3, #3
 8002a98:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	331b      	adds	r3, #27
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	4413      	add	r3, r2
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0202 	and.w	r2, r3, #2
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	331b      	adds	r3, #27
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	331b      	adds	r3, #27
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	4413      	add	r3, r2
 8002ada:	3304      	adds	r3, #4
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	331b      	adds	r3, #27
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	4413      	add	r3, r2
 8002af2:	3304      	adds	r3, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0a1a      	lsrs	r2, r3, #8
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0c1a      	lsrs	r2, r3, #16
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	3302      	adds	r3, #2
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e1a      	lsrs	r2, r3, #24
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	3304      	adds	r3, #4
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0a1a      	lsrs	r2, r3, #8
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	3305      	adds	r3, #5
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0c1a      	lsrs	r2, r3, #16
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	3306      	adds	r3, #6
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0e1a      	lsrs	r2, r3, #24
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	3307      	adds	r3, #7
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	e007      	b.n	8002bf0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0220 	orr.w	r2, r2, #32
 8002bee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e006      	b.n	8002c02 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d07c      	beq.n	8002d4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2201      	movs	r2, #1
 8002c62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f97d 	bl	8002f6e <HAL_CAN_TxMailbox0CompleteCallback>
 8002c74:	e016      	b.n	8002ca4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
 8002c88:	e00c      	b.n	8002ca4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9c:	e002      	b.n	8002ca4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f980 	bl	8002fa4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d024      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f95c 	bl	8002f80 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cc8:	e016      	b.n	8002cf8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d004      	beq.n	8002cde <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	e00c      	b.n	8002cf8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	e002      	b.n	8002cf8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f95f 	bl	8002fb6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d024      	beq.n	8002d4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f93b 	bl	8002f92 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d1c:	e016      	b.n	8002d4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	e00c      	b.n	8002d4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	e002      	b.n	8002d4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f93e 	bl	8002fc8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2208      	movs	r2, #8
 8002d8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f924 	bl	8002fda <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe fe94 	bl	8001ad8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00c      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d006      	beq.n	8002df6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2208      	movs	r2, #8
 8002dee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f904 	bl	8002ffe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d009      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8ec 	bl	8002fec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d006      	beq.n	8002e36 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f8ed 	bl	8003010 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2208      	movs	r2, #8
 8002e50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f8e5 	bl	8003022 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d075      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d06c      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	f043 0302 	orr.w	r3, r3, #2
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d03d      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d038      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eda:	2b30      	cmp	r3, #48	; 0x30
 8002edc:	d017      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x302>
 8002ede:	2b30      	cmp	r3, #48	; 0x30
 8002ee0:	d804      	bhi.n	8002eec <HAL_CAN_IRQHandler+0x2e0>
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d009      	beq.n	8002efa <HAL_CAN_IRQHandler+0x2ee>
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d00c      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002eea:	e024      	b.n	8002f36 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002eec:	2b50      	cmp	r3, #80	; 0x50
 8002eee:	d018      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x316>
 8002ef0:	2b60      	cmp	r3, #96	; 0x60
 8002ef2:	d01b      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x320>
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d00f      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002ef8:	e01d      	b.n	8002f36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	f043 0308 	orr.w	r3, r3, #8
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f02:	e018      	b.n	8002f36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	f043 0310 	orr.w	r3, r3, #16
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f0c:	e013      	b.n	8002f36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f16:	e00e      	b.n	8002f36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f20:	e009      	b.n	8002f36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f2a:	e004      	b.n	8002f36 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f34:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f44:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f867 	bl	8003034 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f66:	bf00      	nop
 8002f68:	3728      	adds	r7, #40	; 0x28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
	...

08003048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307a:	4a04      	ldr	r2, [pc, #16]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	60d3      	str	r3, [r2, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0307 	and.w	r3, r3, #7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db0b      	blt.n	80030d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4906      	ldr	r1, [pc, #24]	; (80030e0 <__NVIC_EnableIRQ+0x34>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2001      	movs	r0, #1
 80030ce:	fa00 f202 	lsl.w	r2, r0, r2
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100

080030e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	db0a      	blt.n	800310e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	490c      	ldr	r1, [pc, #48]	; (8003130 <__NVIC_SetPriority+0x4c>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	440b      	add	r3, r1
 8003108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800310c:	e00a      	b.n	8003124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4908      	ldr	r1, [pc, #32]	; (8003134 <__NVIC_SetPriority+0x50>)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	3b04      	subs	r3, #4
 800311c:	0112      	lsls	r2, r2, #4
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	440b      	add	r3, r1
 8003122:	761a      	strb	r2, [r3, #24]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e100 	.word	0xe000e100
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f1c3 0307 	rsb	r3, r3, #7
 8003152:	2b04      	cmp	r3, #4
 8003154:	bf28      	it	cs
 8003156:	2304      	movcs	r3, #4
 8003158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3304      	adds	r3, #4
 800315e:	2b06      	cmp	r3, #6
 8003160:	d902      	bls.n	8003168 <NVIC_EncodePriority+0x30>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3b03      	subs	r3, #3
 8003166:	e000      	b.n	800316a <NVIC_EncodePriority+0x32>
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	f04f 32ff 	mov.w	r2, #4294967295
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	401a      	ands	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003180:	f04f 31ff 	mov.w	r1, #4294967295
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43d9      	mvns	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	4313      	orrs	r3, r2
         );
}
 8003192:	4618      	mov	r0, r3
 8003194:	3724      	adds	r7, #36	; 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031ac:	d301      	bcc.n	80031b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00f      	b.n	80031d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <SysTick_Config+0x40>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ba:	210f      	movs	r1, #15
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	f7ff ff90 	bl	80030e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <SysTick_Config+0x40>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <SysTick_Config+0x40>)
 80031cc:	2207      	movs	r2, #7
 80031ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	e000e010 	.word	0xe000e010

080031e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff2d 	bl	8003048 <__NVIC_SetPriorityGrouping>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003208:	f7ff ff42 	bl	8003090 <__NVIC_GetPriorityGrouping>
 800320c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	6978      	ldr	r0, [r7, #20]
 8003214:	f7ff ff90 	bl	8003138 <NVIC_EncodePriority>
 8003218:	4602      	mov	r2, r0
 800321a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff5f 	bl	80030e4 <__NVIC_SetPriority>
}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff35 	bl	80030ac <__NVIC_EnableIRQ>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ffa2 	bl	800319c <SysTick_Config>
 8003258:	4603      	mov	r3, r0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800327e:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_FLASH_Program+0xd8>)
 8003280:	7e1b      	ldrb	r3, [r3, #24]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_FLASH_Program+0x26>
 8003286:	2302      	movs	r3, #2
 8003288:	e054      	b.n	8003334 <HAL_FLASH_Program+0xd0>
 800328a:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_FLASH_Program+0xd8>)
 800328c:	2201      	movs	r2, #1
 800328e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003290:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003294:	f000 f8a8 	bl	80033e8 <FLASH_WaitForLastOperation>
 8003298:	4603      	mov	r3, r0
 800329a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d144      	bne.n	800332c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d102      	bne.n	80032ae <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80032a8:	2301      	movs	r3, #1
 80032aa:	757b      	strb	r3, [r7, #21]
 80032ac:	e007      	b.n	80032be <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d102      	bne.n	80032ba <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80032b4:	2302      	movs	r3, #2
 80032b6:	757b      	strb	r3, [r7, #21]
 80032b8:	e001      	b.n	80032be <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80032ba:	2304      	movs	r3, #4
 80032bc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80032be:	2300      	movs	r3, #0
 80032c0:	75bb      	strb	r3, [r7, #22]
 80032c2:	e02d      	b.n	8003320 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80032c4:	7dbb      	ldrb	r3, [r7, #22]
 80032c6:	005a      	lsls	r2, r3, #1
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	eb02 0c03 	add.w	ip, r2, r3
 80032ce:	7dbb      	ldrb	r3, [r7, #22]
 80032d0:	0119      	lsls	r1, r3, #4
 80032d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032d6:	f1c1 0620 	rsb	r6, r1, #32
 80032da:	f1a1 0020 	sub.w	r0, r1, #32
 80032de:	fa22 f401 	lsr.w	r4, r2, r1
 80032e2:	fa03 f606 	lsl.w	r6, r3, r6
 80032e6:	4334      	orrs	r4, r6
 80032e8:	fa23 f000 	lsr.w	r0, r3, r0
 80032ec:	4304      	orrs	r4, r0
 80032ee:	fa23 f501 	lsr.w	r5, r3, r1
 80032f2:	b2a3      	uxth	r3, r4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4660      	mov	r0, ip
 80032f8:	f000 f85a 	bl	80033b0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80032fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003300:	f000 f872 	bl	80033e8 <FLASH_WaitForLastOperation>
 8003304:	4603      	mov	r3, r0
 8003306:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_FLASH_Program+0xdc>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	4a0c      	ldr	r2, [pc, #48]	; (8003340 <HAL_FLASH_Program+0xdc>)
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d107      	bne.n	800332a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800331a:	7dbb      	ldrb	r3, [r7, #22]
 800331c:	3301      	adds	r3, #1
 800331e:	75bb      	strb	r3, [r7, #22]
 8003320:	7dba      	ldrb	r2, [r7, #22]
 8003322:	7d7b      	ldrb	r3, [r7, #21]
 8003324:	429a      	cmp	r2, r3
 8003326:	d3cd      	bcc.n	80032c4 <HAL_FLASH_Program+0x60>
 8003328:	e000      	b.n	800332c <HAL_FLASH_Program+0xc8>
      {
        break;
 800332a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_FLASH_Program+0xd8>)
 800332e:	2200      	movs	r2, #0
 8003330:	761a      	strb	r2, [r3, #24]

  return status;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
}
 8003334:	4618      	mov	r0, r3
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333c:	200003a8 	.word	0x200003a8
 8003340:	40022000 	.word	0x40022000

08003344 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_FLASH_Unlock+0x40>)
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_FLASH_Unlock+0x40>)
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_FLASH_Unlock+0x44>)
 800335e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_FLASH_Unlock+0x40>)
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_FLASH_Unlock+0x48>)
 8003364:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <HAL_FLASH_Unlock+0x40>)
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003376:	79fb      	ldrb	r3, [r7, #7]
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40022000 	.word	0x40022000
 8003388:	45670123 	.word	0x45670123
 800338c:	cdef89ab 	.word	0xcdef89ab

08003390 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_FLASH_Lock+0x1c>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <HAL_FLASH_Lock+0x1c>)
 800339a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40022000 	.word	0x40022000

080033b0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <FLASH_Program_HalfWord+0x30>)
 80033be:	2200      	movs	r2, #0
 80033c0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <FLASH_Program_HalfWord+0x34>)
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <FLASH_Program_HalfWord+0x34>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	887a      	ldrh	r2, [r7, #2]
 80033d2:	801a      	strh	r2, [r3, #0]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	200003a8 	.word	0x200003a8
 80033e4:	40022000 	.word	0x40022000

080033e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80033f0:	f7fe ff8c 	bl	800230c <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80033f6:	e010      	b.n	800341a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d00c      	beq.n	800341a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <FLASH_WaitForLastOperation+0x2e>
 8003406:	f7fe ff81 	bl	800230c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	429a      	cmp	r2, r3
 8003414:	d201      	bcs.n	800341a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e025      	b.n	8003466 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <FLASH_WaitForLastOperation+0x88>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e8      	bne.n	80033f8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <FLASH_WaitForLastOperation+0x88>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003432:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <FLASH_WaitForLastOperation+0x88>)
 8003434:	2220      	movs	r2, #32
 8003436:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003438:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <FLASH_WaitForLastOperation+0x88>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <FLASH_WaitForLastOperation+0x88>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <FLASH_WaitForLastOperation+0x88>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800345c:	f000 f80a 	bl	8003474 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40022000 	.word	0x40022000

08003474 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800347e:	4b23      	ldr	r3, [pc, #140]	; (800350c <FLASH_SetErrorCode+0x98>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <FLASH_SetErrorCode+0x9c>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <FLASH_SetErrorCode+0x9c>)
 8003494:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f043 0310 	orr.w	r3, r3, #16
 800349c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <FLASH_SetErrorCode+0x98>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80034aa:	4b19      	ldr	r3, [pc, #100]	; (8003510 <FLASH_SetErrorCode+0x9c>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	4a17      	ldr	r2, [pc, #92]	; (8003510 <FLASH_SetErrorCode+0x9c>)
 80034b4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <FLASH_SetErrorCode+0x98>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <FLASH_SetErrorCode+0x9c>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <FLASH_SetErrorCode+0x9c>)
 80034d4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <FLASH_SetErrorCode+0x98>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4a0c      	ldr	r2, [pc, #48]	; (800350c <FLASH_SetErrorCode+0x98>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f240 1201 	movw	r2, #257	; 0x101
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d106      	bne.n	80034fa <FLASH_SetErrorCode+0x86>
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <FLASH_SetErrorCode+0x98>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4a06      	ldr	r2, [pc, #24]	; (800350c <FLASH_SetErrorCode+0x98>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	61d3      	str	r3, [r2, #28]
}  
 80034f8:	e002      	b.n	8003500 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80034fa:	4a04      	ldr	r2, [pc, #16]	; (800350c <FLASH_SetErrorCode+0x98>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	60d3      	str	r3, [r2, #12]
}  
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40022000 	.word	0x40022000
 8003510:	200003a8 	.word	0x200003a8

08003514 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003526:	4b2f      	ldr	r3, [pc, #188]	; (80035e4 <HAL_FLASHEx_Erase+0xd0>)
 8003528:	7e1b      	ldrb	r3, [r3, #24]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_FLASHEx_Erase+0x1e>
 800352e:	2302      	movs	r3, #2
 8003530:	e053      	b.n	80035da <HAL_FLASHEx_Erase+0xc6>
 8003532:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <HAL_FLASHEx_Erase+0xd0>)
 8003534:	2201      	movs	r2, #1
 8003536:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d116      	bne.n	800356e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003540:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003544:	f7ff ff50 	bl	80033e8 <FLASH_WaitForLastOperation>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d141      	bne.n	80035d2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800354e:	2001      	movs	r0, #1
 8003550:	f000 f84c 	bl	80035ec <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003554:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003558:	f7ff ff46 	bl	80033e8 <FLASH_WaitForLastOperation>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003560:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <HAL_FLASHEx_Erase+0xd4>)
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <HAL_FLASHEx_Erase+0xd4>)
 8003566:	f023 0304 	bic.w	r3, r3, #4
 800356a:	6113      	str	r3, [r2, #16]
 800356c:	e031      	b.n	80035d2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800356e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003572:	f7ff ff39 	bl	80033e8 <FLASH_WaitForLastOperation>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d12a      	bne.n	80035d2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f04f 32ff 	mov.w	r2, #4294967295
 8003582:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	e019      	b.n	80035c0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800358c:	68b8      	ldr	r0, [r7, #8]
 800358e:	f000 f849 	bl	8003624 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003592:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003596:	f7ff ff27 	bl	80033e8 <FLASH_WaitForLastOperation>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_FLASHEx_Erase+0xd4>)
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <HAL_FLASHEx_Erase+0xd4>)
 80035a4:	f023 0302 	bic.w	r3, r3, #2
 80035a8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	601a      	str	r2, [r3, #0]
            break;
 80035b6:	e00c      	b.n	80035d2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035be:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	02da      	lsls	r2, r3, #11
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3dc      	bcc.n	800358c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <HAL_FLASHEx_Erase+0xd0>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	761a      	strb	r2, [r3, #24]

  return status;
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200003a8 	.word	0x200003a8
 80035e8:	40022000 	.word	0x40022000

080035ec <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <FLASH_MassErase+0x30>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <FLASH_MassErase+0x34>)
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	4a08      	ldr	r2, [pc, #32]	; (8003620 <FLASH_MassErase+0x34>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <FLASH_MassErase+0x34>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	4a05      	ldr	r2, [pc, #20]	; (8003620 <FLASH_MassErase+0x34>)
 800360c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003610:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	200003a8 	.word	0x200003a8
 8003620:	40022000 	.word	0x40022000

08003624 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <FLASH_PageErase+0x38>)
 800362e:	2200      	movs	r2, #0
 8003630:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <FLASH_PageErase+0x3c>)
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <FLASH_PageErase+0x3c>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800363e:	4a08      	ldr	r2, [pc, #32]	; (8003660 <FLASH_PageErase+0x3c>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <FLASH_PageErase+0x3c>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	4a05      	ldr	r2, [pc, #20]	; (8003660 <FLASH_PageErase+0x3c>)
 800364a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800364e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	200003a8 	.word	0x200003a8
 8003660:	40022000 	.word	0x40022000

08003664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003664:	b480      	push	{r7}
 8003666:	b08b      	sub	sp, #44	; 0x2c
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003672:	2300      	movs	r3, #0
 8003674:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003676:	e127      	b.n	80038c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003678:	2201      	movs	r2, #1
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	429a      	cmp	r2, r3
 8003692:	f040 8116 	bne.w	80038c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b12      	cmp	r3, #18
 800369c:	d034      	beq.n	8003708 <HAL_GPIO_Init+0xa4>
 800369e:	2b12      	cmp	r3, #18
 80036a0:	d80d      	bhi.n	80036be <HAL_GPIO_Init+0x5a>
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d02b      	beq.n	80036fe <HAL_GPIO_Init+0x9a>
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d804      	bhi.n	80036b4 <HAL_GPIO_Init+0x50>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d031      	beq.n	8003712 <HAL_GPIO_Init+0xae>
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d01c      	beq.n	80036ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036b2:	e048      	b.n	8003746 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d043      	beq.n	8003740 <HAL_GPIO_Init+0xdc>
 80036b8:	2b11      	cmp	r3, #17
 80036ba:	d01b      	beq.n	80036f4 <HAL_GPIO_Init+0x90>
          break;
 80036bc:	e043      	b.n	8003746 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80036be:	4a89      	ldr	r2, [pc, #548]	; (80038e4 <HAL_GPIO_Init+0x280>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d026      	beq.n	8003712 <HAL_GPIO_Init+0xae>
 80036c4:	4a87      	ldr	r2, [pc, #540]	; (80038e4 <HAL_GPIO_Init+0x280>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d806      	bhi.n	80036d8 <HAL_GPIO_Init+0x74>
 80036ca:	4a87      	ldr	r2, [pc, #540]	; (80038e8 <HAL_GPIO_Init+0x284>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d020      	beq.n	8003712 <HAL_GPIO_Init+0xae>
 80036d0:	4a86      	ldr	r2, [pc, #536]	; (80038ec <HAL_GPIO_Init+0x288>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01d      	beq.n	8003712 <HAL_GPIO_Init+0xae>
          break;
 80036d6:	e036      	b.n	8003746 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80036d8:	4a85      	ldr	r2, [pc, #532]	; (80038f0 <HAL_GPIO_Init+0x28c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d019      	beq.n	8003712 <HAL_GPIO_Init+0xae>
 80036de:	4a85      	ldr	r2, [pc, #532]	; (80038f4 <HAL_GPIO_Init+0x290>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d016      	beq.n	8003712 <HAL_GPIO_Init+0xae>
 80036e4:	4a84      	ldr	r2, [pc, #528]	; (80038f8 <HAL_GPIO_Init+0x294>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_GPIO_Init+0xae>
          break;
 80036ea:	e02c      	b.n	8003746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	623b      	str	r3, [r7, #32]
          break;
 80036f2:	e028      	b.n	8003746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	3304      	adds	r3, #4
 80036fa:	623b      	str	r3, [r7, #32]
          break;
 80036fc:	e023      	b.n	8003746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	3308      	adds	r3, #8
 8003704:	623b      	str	r3, [r7, #32]
          break;
 8003706:	e01e      	b.n	8003746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	330c      	adds	r3, #12
 800370e:	623b      	str	r3, [r7, #32]
          break;
 8003710:	e019      	b.n	8003746 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800371a:	2304      	movs	r3, #4
 800371c:	623b      	str	r3, [r7, #32]
          break;
 800371e:	e012      	b.n	8003746 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003728:	2308      	movs	r3, #8
 800372a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	611a      	str	r2, [r3, #16]
          break;
 8003732:	e008      	b.n	8003746 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003734:	2308      	movs	r3, #8
 8003736:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	615a      	str	r2, [r3, #20]
          break;
 800373e:	e002      	b.n	8003746 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003740:	2300      	movs	r3, #0
 8003742:	623b      	str	r3, [r7, #32]
          break;
 8003744:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2bff      	cmp	r3, #255	; 0xff
 800374a:	d801      	bhi.n	8003750 <HAL_GPIO_Init+0xec>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	e001      	b.n	8003754 <HAL_GPIO_Init+0xf0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2bff      	cmp	r3, #255	; 0xff
 800375a:	d802      	bhi.n	8003762 <HAL_GPIO_Init+0xfe>
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	e002      	b.n	8003768 <HAL_GPIO_Init+0x104>
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	3b08      	subs	r3, #8
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	210f      	movs	r1, #15
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	401a      	ands	r2, r3
 800377a:	6a39      	ldr	r1, [r7, #32]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	431a      	orrs	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8096 	beq.w	80038c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003796:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_GPIO_Init+0x298>)
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	4a58      	ldr	r2, [pc, #352]	; (80038fc <HAL_GPIO_Init+0x298>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6193      	str	r3, [r2, #24]
 80037a2:	4b56      	ldr	r3, [pc, #344]	; (80038fc <HAL_GPIO_Init+0x298>)
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037ae:	4a54      	ldr	r2, [pc, #336]	; (8003900 <HAL_GPIO_Init+0x29c>)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	3302      	adds	r3, #2
 80037b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	220f      	movs	r2, #15
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4013      	ands	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a4b      	ldr	r2, [pc, #300]	; (8003904 <HAL_GPIO_Init+0x2a0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_GPIO_Init+0x19e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a4a      	ldr	r2, [pc, #296]	; (8003908 <HAL_GPIO_Init+0x2a4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00d      	beq.n	80037fe <HAL_GPIO_Init+0x19a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a49      	ldr	r2, [pc, #292]	; (800390c <HAL_GPIO_Init+0x2a8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_Init+0x196>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a48      	ldr	r2, [pc, #288]	; (8003910 <HAL_GPIO_Init+0x2ac>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_GPIO_Init+0x192>
 80037f2:	2303      	movs	r3, #3
 80037f4:	e006      	b.n	8003804 <HAL_GPIO_Init+0x1a0>
 80037f6:	2304      	movs	r3, #4
 80037f8:	e004      	b.n	8003804 <HAL_GPIO_Init+0x1a0>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e002      	b.n	8003804 <HAL_GPIO_Init+0x1a0>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_GPIO_Init+0x1a0>
 8003802:	2300      	movs	r3, #0
 8003804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003806:	f002 0203 	and.w	r2, r2, #3
 800380a:	0092      	lsls	r2, r2, #2
 800380c:	4093      	lsls	r3, r2
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003814:	493a      	ldr	r1, [pc, #232]	; (8003900 <HAL_GPIO_Init+0x29c>)
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	089b      	lsrs	r3, r3, #2
 800381a:	3302      	adds	r3, #2
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4938      	ldr	r1, [pc, #224]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
 800383a:	e006      	b.n	800384a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800383c:	4b35      	ldr	r3, [pc, #212]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	43db      	mvns	r3, r3
 8003844:	4933      	ldr	r1, [pc, #204]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 8003846:	4013      	ands	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d006      	beq.n	8003864 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003856:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	492e      	ldr	r1, [pc, #184]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	604b      	str	r3, [r1, #4]
 8003862:	e006      	b.n	8003872 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003864:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	43db      	mvns	r3, r3
 800386c:	4929      	ldr	r1, [pc, #164]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 800386e:	4013      	ands	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800387e:	4b25      	ldr	r3, [pc, #148]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	4924      	ldr	r1, [pc, #144]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
 800388a:	e006      	b.n	800389a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800388c:	4b21      	ldr	r3, [pc, #132]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	43db      	mvns	r3, r3
 8003894:	491f      	ldr	r1, [pc, #124]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 8003896:	4013      	ands	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d006      	beq.n	80038b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038a6:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	491a      	ldr	r1, [pc, #104]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60cb      	str	r3, [r1, #12]
 80038b2:	e006      	b.n	80038c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038b4:	4b17      	ldr	r3, [pc, #92]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	4915      	ldr	r1, [pc, #84]	; (8003914 <HAL_GPIO_Init+0x2b0>)
 80038be:	4013      	ands	r3, r2
 80038c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	3301      	adds	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f47f aed0 	bne.w	8003678 <HAL_GPIO_Init+0x14>
  }
}
 80038d8:	bf00      	nop
 80038da:	372c      	adds	r7, #44	; 0x2c
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	10210000 	.word	0x10210000
 80038e8:	10110000 	.word	0x10110000
 80038ec:	10120000 	.word	0x10120000
 80038f0:	10310000 	.word	0x10310000
 80038f4:	10320000 	.word	0x10320000
 80038f8:	10220000 	.word	0x10220000
 80038fc:	40021000 	.word	0x40021000
 8003900:	40010000 	.word	0x40010000
 8003904:	40010800 	.word	0x40010800
 8003908:	40010c00 	.word	0x40010c00
 800390c:	40011000 	.word	0x40011000
 8003910:	40011400 	.word	0x40011400
 8003914:	40010400 	.word	0x40010400

08003918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
 8003924:	4613      	mov	r3, r2
 8003926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003928:	787b      	ldrb	r3, [r7, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003934:	e003      	b.n	800393e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	041a      	lsls	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	611a      	str	r2, [r3, #16]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	887b      	ldrh	r3, [r7, #2]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003960:	887a      	ldrh	r2, [r7, #2]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003966:	e002      	b.n	800396e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003968:	887a      	ldrh	r2, [r7, #2]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	611a      	str	r2, [r3, #16]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e304      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8087 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003998:	4b92      	ldr	r3, [pc, #584]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d00c      	beq.n	80039be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039a4:	4b8f      	ldr	r3, [pc, #572]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d112      	bne.n	80039d6 <HAL_RCC_OscConfig+0x5e>
 80039b0:	4b8c      	ldr	r3, [pc, #560]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039bc:	d10b      	bne.n	80039d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039be:	4b89      	ldr	r3, [pc, #548]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d06c      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x12c>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d168      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e2de      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039de:	d106      	bne.n	80039ee <HAL_RCC_OscConfig+0x76>
 80039e0:	4b80      	ldr	r3, [pc, #512]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a7f      	ldr	r2, [pc, #508]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 80039e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	e02e      	b.n	8003a4c <HAL_RCC_OscConfig+0xd4>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x98>
 80039f6:	4b7b      	ldr	r3, [pc, #492]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7a      	ldr	r2, [pc, #488]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b78      	ldr	r3, [pc, #480]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a77      	ldr	r2, [pc, #476]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e01d      	b.n	8003a4c <HAL_RCC_OscConfig+0xd4>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0xbc>
 8003a1a:	4b72      	ldr	r3, [pc, #456]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a71      	ldr	r2, [pc, #452]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b6f      	ldr	r3, [pc, #444]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6e      	ldr	r2, [pc, #440]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0xd4>
 8003a34:	4b6b      	ldr	r3, [pc, #428]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6a      	ldr	r2, [pc, #424]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b68      	ldr	r3, [pc, #416]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a67      	ldr	r2, [pc, #412]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fe fc5a 	bl	800230c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fc56 	bl	800230c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e292      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b5d      	ldr	r3, [pc, #372]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0xe4>
 8003a7a:	e014      	b.n	8003aa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fc46 	bl	800230c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fe fc42 	bl	800230c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e27e      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	4b53      	ldr	r3, [pc, #332]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x10c>
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d063      	beq.n	8003b7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ab2:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003abe:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d11c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x18c>
 8003aca:	4b46      	ldr	r3, [pc, #280]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d116      	bne.n	8003b04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_RCC_OscConfig+0x176>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e252      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4939      	ldr	r1, [pc, #228]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b02:	e03a      	b.n	8003b7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0c:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fe fbfb 	bl	800230c <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fe fbf7 	bl	800230c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e233      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4927      	ldr	r1, [pc, #156]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]
 8003b4c:	e015      	b.n	8003b7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fbda 	bl	800230c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fbd6 	bl	800230c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e212      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d03a      	beq.n	8003bfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d019      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <HAL_RCC_OscConfig+0x274>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b94:	f7fe fbba 	bl	800230c <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fe fbb6 	bl	800230c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e1f2      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f000 fbf2 	bl	80043a4 <RCC_Delay>
 8003bc0:	e01c      	b.n	8003bfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_RCC_OscConfig+0x274>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc8:	f7fe fba0 	bl	800230c <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bce:	e00f      	b.n	8003bf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd0:	f7fe fb9c 	bl	800230c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d908      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1d8      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	42420000 	.word	0x42420000
 8003bec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf0:	4b9b      	ldr	r3, [pc, #620]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e9      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80a6 	beq.w	8003d56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0e:	4b94      	ldr	r3, [pc, #592]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10d      	bne.n	8003c36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1a:	4b91      	ldr	r3, [pc, #580]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	4a90      	ldr	r2, [pc, #576]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c24:	61d3      	str	r3, [r2, #28]
 8003c26:	4b8e      	ldr	r3, [pc, #568]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b8b      	ldr	r3, [pc, #556]	; (8003e64 <HAL_RCC_OscConfig+0x4ec>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d118      	bne.n	8003c74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c42:	4b88      	ldr	r3, [pc, #544]	; (8003e64 <HAL_RCC_OscConfig+0x4ec>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a87      	ldr	r2, [pc, #540]	; (8003e64 <HAL_RCC_OscConfig+0x4ec>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4e:	f7fe fb5d 	bl	800230c <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c56:	f7fe fb59 	bl	800230c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b64      	cmp	r3, #100	; 0x64
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e195      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b7e      	ldr	r3, [pc, #504]	; (8003e64 <HAL_RCC_OscConfig+0x4ec>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x312>
 8003c7c:	4b78      	ldr	r3, [pc, #480]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	4a77      	ldr	r2, [pc, #476]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6213      	str	r3, [r2, #32]
 8003c88:	e02d      	b.n	8003ce6 <HAL_RCC_OscConfig+0x36e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x334>
 8003c92:	4b73      	ldr	r3, [pc, #460]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	4a72      	ldr	r2, [pc, #456]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	6213      	str	r3, [r2, #32]
 8003c9e:	4b70      	ldr	r3, [pc, #448]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	4a6f      	ldr	r2, [pc, #444]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003ca4:	f023 0304 	bic.w	r3, r3, #4
 8003ca8:	6213      	str	r3, [r2, #32]
 8003caa:	e01c      	b.n	8003ce6 <HAL_RCC_OscConfig+0x36e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d10c      	bne.n	8003cce <HAL_RCC_OscConfig+0x356>
 8003cb4:	4b6a      	ldr	r3, [pc, #424]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	4a69      	ldr	r2, [pc, #420]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003cba:	f043 0304 	orr.w	r3, r3, #4
 8003cbe:	6213      	str	r3, [r2, #32]
 8003cc0:	4b67      	ldr	r3, [pc, #412]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4a66      	ldr	r2, [pc, #408]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6213      	str	r3, [r2, #32]
 8003ccc:	e00b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x36e>
 8003cce:	4b64      	ldr	r3, [pc, #400]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	4a63      	ldr	r2, [pc, #396]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6213      	str	r3, [r2, #32]
 8003cda:	4b61      	ldr	r3, [pc, #388]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	4a60      	ldr	r2, [pc, #384]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d015      	beq.n	8003d1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cee:	f7fe fb0d 	bl	800230c <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe fb09 	bl	800230c <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e143      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0c:	4b54      	ldr	r3, [pc, #336]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ee      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x37e>
 8003d18:	e014      	b.n	8003d44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1a:	f7fe faf7 	bl	800230c <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fe faf3 	bl	800230c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e12d      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d38:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ee      	bne.n	8003d22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d105      	bne.n	8003d56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4a:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4a44      	ldr	r2, [pc, #272]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d54:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 808c 	beq.w	8003e78 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003d60:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d10e      	bne.n	8003d8c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d108      	bne.n	8003d8c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003d7a:	4b39      	ldr	r3, [pc, #228]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e103      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d14e      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003d94:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003da0:	4b2f      	ldr	r3, [pc, #188]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0ef      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003db4:	4b2c      	ldr	r3, [pc, #176]	; (8003e68 <HAL_RCC_OscConfig+0x4f0>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe faa7 	bl	800230c <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dc2:	f7fe faa3 	bl	800230c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b64      	cmp	r3, #100	; 0x64
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e0df      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003dd4:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003de0:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	491c      	ldr	r1, [pc, #112]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003df2:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	4918      	ldr	r1, [pc, #96]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003e04:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <HAL_RCC_OscConfig+0x4f0>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fe fa7f 	bl	800230c <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e12:	f7fe fa7b 	bl	800230c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b64      	cmp	r3, #100	; 0x64
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e0b7      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x49a>
 8003e30:	e022      	b.n	8003e78 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <HAL_RCC_OscConfig+0x4e8>)
 8003e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_RCC_OscConfig+0x4f0>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fe fa62 	bl	800230c <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003e4a:	e00f      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e4c:	f7fe fa5e 	bl	800230c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d908      	bls.n	8003e6c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e09a      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40007000 	.word	0x40007000
 8003e68:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e9      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8088 	beq.w	8003f92 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e82:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d068      	beq.n	8003f60 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d14d      	bne.n	8003f32 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fe fa36 	bl	800230c <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fe fa32 	bl	800230c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e06e      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb6:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d10f      	bne.n	8003eec <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003ecc:	4b33      	ldr	r3, [pc, #204]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4931      	ldr	r1, [pc, #196]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f023 020f 	bic.w	r2, r3, #15
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	492d      	ldr	r1, [pc, #180]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eec:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	430b      	orrs	r3, r1
 8003efe:	4927      	ldr	r1, [pc, #156]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f04:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fe f9ff 	bl	800230c <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f12:	f7fe f9fb 	bl	800230c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e037      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x59a>
 8003f30:	e02f      	b.n	8003f92 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f32:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fe f9e8 	bl	800230c <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fe f9e4 	bl	800230c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e020      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x5c8>
 8003f5e:	e018      	b.n	8003f92 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e013      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_OscConfig+0x624>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	42420060 	.word	0x42420060

08003fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0d0      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d910      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b67      	ldr	r3, [pc, #412]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	4965      	ldr	r1, [pc, #404]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800400a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004022:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d040      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d115      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e073      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3d      	ldr	r3, [pc, #244]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06b      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b39      	ldr	r3, [pc, #228]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4936      	ldr	r1, [pc, #216]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004094:	f7fe f93a 	bl	800230c <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fe f936 	bl	800230c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e053      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2d      	ldr	r3, [pc, #180]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b27      	ldr	r3, [pc, #156]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d210      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	4922      	ldr	r1, [pc, #136]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4601      	mov	r1, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	fa21 f303 	lsr.w	r3, r1, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x1cc>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1d0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe f898 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40022000 	.word	0x40022000
 8004168:	40021000 	.word	0x40021000
 800416c:	08006f74 	.word	0x08006f74
 8004170:	2000002c 	.word	0x2000002c
 8004174:	20000030 	.word	0x20000030

08004178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800417c:	b091      	sub	sp, #68	; 0x44
 800417e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004180:	4b6a      	ldr	r3, [pc, #424]	; (800432c <HAL_RCC_GetSysClockFreq+0x1b4>)
 8004182:	f107 0414 	add.w	r4, r7, #20
 8004186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004188:	c407      	stmia	r4!, {r0, r1, r2}
 800418a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800418c:	4b68      	ldr	r3, [pc, #416]	; (8004330 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800418e:	1d3c      	adds	r4, r7, #4
 8004190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004192:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
 800419a:	2300      	movs	r3, #0
 800419c:	633b      	str	r3, [r7, #48]	; 0x30
 800419e:	2300      	movs	r3, #0
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a2:	2300      	movs	r3, #0
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041b2:	4b60      	ldr	r3, [pc, #384]	; (8004334 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d002      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x50>
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d003      	beq.n	80041ce <HAL_RCC_GetSysClockFreq+0x56>
 80041c6:	e0a7      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041c8:	4b5b      	ldr	r3, [pc, #364]	; (8004338 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80041ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041cc:	e0a7      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d0:	0c9b      	lsrs	r3, r3, #18
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80041da:	4413      	add	r3, r2
 80041dc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 808d 	beq.w	8004308 <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80041ee:	4b51      	ldr	r3, [pc, #324]	; (8004334 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80041fa:	4413      	add	r3, r2
 80041fc:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8004200:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004202:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d06a      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800420e:	4b49      	ldr	r3, [pc, #292]	; (8004334 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	3301      	adds	r3, #1
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800421c:	4b45      	ldr	r3, [pc, #276]	; (8004334 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	3302      	adds	r3, #2
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	4619      	mov	r1, r3
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	fb03 f502 	mul.w	r5, r3, r2
 800423c:	fb01 f004 	mul.w	r0, r1, r4
 8004240:	4428      	add	r0, r5
 8004242:	fba1 5603 	umull	r5, r6, r1, r3
 8004246:	1983      	adds	r3, r0, r6
 8004248:	461e      	mov	r6, r3
 800424a:	4629      	mov	r1, r5
 800424c:	4632      	mov	r2, r6
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	f04f 0400 	mov.w	r4, #0
 8004256:	0154      	lsls	r4, r2, #5
 8004258:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800425c:	014b      	lsls	r3, r1, #5
 800425e:	4619      	mov	r1, r3
 8004260:	4622      	mov	r2, r4
 8004262:	1b49      	subs	r1, r1, r5
 8004264:	eb62 0206 	sbc.w	r2, r2, r6
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	f04f 0400 	mov.w	r4, #0
 8004270:	0194      	lsls	r4, r2, #6
 8004272:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004276:	018b      	lsls	r3, r1, #6
 8004278:	1a5b      	subs	r3, r3, r1
 800427a:	eb64 0402 	sbc.w	r4, r4, r2
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	00e2      	lsls	r2, r4, #3
 8004288:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800428c:	00d9      	lsls	r1, r3, #3
 800428e:	460b      	mov	r3, r1
 8004290:	4614      	mov	r4, r2
 8004292:	195b      	adds	r3, r3, r5
 8004294:	eb44 0406 	adc.w	r4, r4, r6
 8004298:	f04f 0100 	mov.w	r1, #0
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	0262      	lsls	r2, r4, #9
 80042a2:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042a6:	0259      	lsls	r1, r3, #9
 80042a8:	460b      	mov	r3, r1
 80042aa:	4614      	mov	r4, r2
 80042ac:	4698      	mov	r8, r3
 80042ae:	46a1      	mov	r9, r4
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	4619      	mov	r1, r3
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	f04f 0400 	mov.w	r4, #0
 80042be:	fb03 f502 	mul.w	r5, r3, r2
 80042c2:	fb01 f004 	mul.w	r0, r1, r4
 80042c6:	4428      	add	r0, r5
 80042c8:	fba1 3403 	umull	r3, r4, r1, r3
 80042cc:	1902      	adds	r2, r0, r4
 80042ce:	4614      	mov	r4, r2
 80042d0:	461a      	mov	r2, r3
 80042d2:	4623      	mov	r3, r4
 80042d4:	4640      	mov	r0, r8
 80042d6:	4649      	mov	r1, r9
 80042d8:	f7fb ffac 	bl	8000234 <__aeabi_uldivmod>
 80042dc:	4603      	mov	r3, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e2:	e007      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	4a14      	ldr	r2, [pc, #80]	; (8004338 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042e8:	fb02 f203 	mul.w	r2, r2, r3
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80042f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80042f8:	461a      	mov	r2, r3
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d108      	bne.n	8004312 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 8004300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004306:	e004      	b.n	8004312 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	4a0c      	ldr	r2, [pc, #48]	; (800433c <HAL_RCC_GetSysClockFreq+0x1c4>)
 800430c:	fb02 f303 	mul.w	r3, r2, r3
 8004310:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8004312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004314:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004316:	e002      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800431c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004320:	4618      	mov	r0, r3
 8004322:	3744      	adds	r7, #68	; 0x44
 8004324:	46bd      	mov	sp, r7
 8004326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800432a:	bf00      	nop
 800432c:	08006f48 	.word	0x08006f48
 8004330:	08006f58 	.word	0x08006f58
 8004334:	40021000 	.word	0x40021000
 8004338:	007a1200 	.word	0x007a1200
 800433c:	003d0900 	.word	0x003d0900

08004340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004344:	4b02      	ldr	r3, [pc, #8]	; (8004350 <HAL_RCC_GetHCLKFreq+0x10>)
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	4618      	mov	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr
 8004350:	2000002c 	.word	0x2000002c

08004354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004358:	f7ff fff2 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 800435c:	4601      	mov	r1, r0
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4a03      	ldr	r2, [pc, #12]	; (8004378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800436a:	5cd3      	ldrb	r3, [r2, r3]
 800436c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40021000 	.word	0x40021000
 8004378:	08006f84 	.word	0x08006f84

0800437c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004380:	f7ff ffde 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8004384:	4601      	mov	r1, r0
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	0adb      	lsrs	r3, r3, #11
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	4a03      	ldr	r2, [pc, #12]	; (80043a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004392:	5cd3      	ldrb	r3, [r2, r3]
 8004394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000
 80043a0:	08006f84 	.word	0x08006f84

080043a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <RCC_Delay+0x34>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <RCC_Delay+0x38>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	0a5b      	lsrs	r3, r3, #9
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043c0:	bf00      	nop
  }
  while (Delay --);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	60fa      	str	r2, [r7, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f9      	bne.n	80043c0 <RCC_Delay+0x1c>
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	2000002c 	.word	0x2000002c
 80043dc:	10624dd3 	.word	0x10624dd3

080043e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e01d      	b.n	800442e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd fe68 	bl	80020dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f000 fa10 	bl	8004844 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b06      	cmp	r3, #6
 800445e:	d007      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	d122      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	d11b      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0202 	mvn.w	r2, #2
 80044a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f9a4 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f997 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f9a6 	bl	800481e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d122      	bne.n	800452c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d11b      	bne.n	800452c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0204 	mvn.w	r2, #4
 80044fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f97a 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f96d 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f97c 	bl	800481e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b08      	cmp	r3, #8
 8004538:	d122      	bne.n	8004580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b08      	cmp	r3, #8
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0208 	mvn.w	r2, #8
 8004550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2204      	movs	r2, #4
 8004556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f950 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f943 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f952 	bl	800481e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b10      	cmp	r3, #16
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b10      	cmp	r3, #16
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0210 	mvn.w	r2, #16
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2208      	movs	r2, #8
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f926 	bl	800480c <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f919 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f928 	bl	800481e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d10e      	bne.n	8004600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d107      	bne.n	8004600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0201 	mvn.w	r2, #1
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fc ff72 	bl	80014e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b80      	cmp	r3, #128	; 0x80
 800460c:	d10e      	bne.n	800462c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	2b80      	cmp	r3, #128	; 0x80
 800461a:	d107      	bne.n	800462c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fa5b 	bl	8004ae2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b40      	cmp	r3, #64	; 0x40
 8004638:	d10e      	bne.n	8004658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d107      	bne.n	8004658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8ec 	bl	8004830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b20      	cmp	r3, #32
 8004664:	d10e      	bne.n	8004684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b20      	cmp	r3, #32
 8004672:	d107      	bne.n	8004684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0220 	mvn.w	r2, #32
 800467c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fa26 	bl	8004ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIM_ConfigClockSource+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0a6      	b.n	80047f2 <HAL_TIM_ConfigClockSource+0x166>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d067      	beq.n	80047ac <HAL_TIM_ConfigClockSource+0x120>
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d80b      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x6c>
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d073      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0x140>
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d802      	bhi.n	80046ee <HAL_TIM_ConfigClockSource+0x62>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d06f      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80046ec:	e078      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d06c      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0x140>
 80046f2:	2b30      	cmp	r3, #48	; 0x30
 80046f4:	d06a      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80046f6:	e073      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046f8:	2b70      	cmp	r3, #112	; 0x70
 80046fa:	d00d      	beq.n	8004718 <HAL_TIM_ConfigClockSource+0x8c>
 80046fc:	2b70      	cmp	r3, #112	; 0x70
 80046fe:	d804      	bhi.n	800470a <HAL_TIM_ConfigClockSource+0x7e>
 8004700:	2b50      	cmp	r3, #80	; 0x50
 8004702:	d033      	beq.n	800476c <HAL_TIM_ConfigClockSource+0xe0>
 8004704:	2b60      	cmp	r3, #96	; 0x60
 8004706:	d041      	beq.n	800478c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004708:	e06a      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470e:	d066      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x152>
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004714:	d017      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004716:	e063      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6899      	ldr	r1, [r3, #8]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f000 f96f 	bl	8004a0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800473a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	609a      	str	r2, [r3, #8]
      break;
 8004744:	e04c      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6899      	ldr	r1, [r3, #8]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f000 f958 	bl	8004a0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004768:	609a      	str	r2, [r3, #8]
      break;
 800476a:	e039      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	461a      	mov	r2, r3
 800477a:	f000 f8cf 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2150      	movs	r1, #80	; 0x50
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f926 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 800478a:	e029      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	461a      	mov	r2, r3
 800479a:	f000 f8ed 	bl	8004978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2160      	movs	r1, #96	; 0x60
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f916 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80047aa:	e019      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	461a      	mov	r2, r3
 80047ba:	f000 f8af 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2140      	movs	r1, #64	; 0x40
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 f906 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80047ca:	e009      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f000 f8fd 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80047dc:	e000      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80047de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
	...

08004844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a2d      	ldr	r2, [pc, #180]	; (800490c <TIM_Base_SetConfig+0xc8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00f      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004862:	d00b      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a2a      	ldr	r2, [pc, #168]	; (8004910 <TIM_Base_SetConfig+0xcc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d007      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a29      	ldr	r2, [pc, #164]	; (8004914 <TIM_Base_SetConfig+0xd0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d003      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a28      	ldr	r2, [pc, #160]	; (8004918 <TIM_Base_SetConfig+0xd4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d108      	bne.n	800488e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <TIM_Base_SetConfig+0xc8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00f      	beq.n	80048b6 <TIM_Base_SetConfig+0x72>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d00b      	beq.n	80048b6 <TIM_Base_SetConfig+0x72>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <TIM_Base_SetConfig+0xcc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d007      	beq.n	80048b6 <TIM_Base_SetConfig+0x72>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <TIM_Base_SetConfig+0xd0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d003      	beq.n	80048b6 <TIM_Base_SetConfig+0x72>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <TIM_Base_SetConfig+0xd4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d108      	bne.n	80048c8 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a07      	ldr	r2, [pc, #28]	; (800490c <TIM_Base_SetConfig+0xc8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d103      	bne.n	80048fc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	615a      	str	r2, [r3, #20]
}
 8004902:	bf00      	nop
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00

0800491c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 030a 	bic.w	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f023 0210 	bic.w	r2, r3, #16
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	031b      	lsls	r3, r3, #12
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	621a      	str	r2, [r3, #32]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f043 0307 	orr.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	609a      	str	r2, [r3, #8]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e032      	b.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a98:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e03f      	b.n	8004b86 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fd fb2e 	bl	800217c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	; 0x24
 8004b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f9b1 	bl	8004ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695a      	ldr	r2, [r3, #20]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b088      	sub	sp, #32
 8004b92:	af02      	add	r7, sp, #8
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	f040 8083 	bne.w	8004cb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_UART_Transmit+0x2e>
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e07b      	b.n	8004cb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_UART_Transmit+0x40>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e074      	b.n	8004cb8 <HAL_UART_Transmit+0x12a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2221      	movs	r2, #33	; 0x21
 8004be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004be4:	f7fd fb92 	bl	800230c <HAL_GetTick>
 8004be8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	88fa      	ldrh	r2, [r7, #6]
 8004bee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bf6:	e042      	b.n	8004c7e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	d122      	bne.n	8004c56 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2200      	movs	r2, #0
 8004c18:	2180      	movs	r1, #128	; 0x80
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f8f6 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e046      	b.n	8004cb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3302      	adds	r3, #2
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	e017      	b.n	8004c7e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3301      	adds	r3, #1
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	e013      	b.n	8004c7e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f8d3 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e023      	b.n	8004cb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	60ba      	str	r2, [r7, #8]
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1b7      	bne.n	8004bf8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2140      	movs	r1, #64	; 0x40
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f8ba 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e00a      	b.n	8004cb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e000      	b.n	8004cb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
  }
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	f040 8090 	bne.w	8004e02 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_UART_Receive+0x2e>
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e088      	b.n	8004e04 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_UART_Receive+0x40>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e081      	b.n	8004e04 <HAL_UART_Receive+0x144>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2222      	movs	r2, #34	; 0x22
 8004d12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d16:	f7fd faf9 	bl	800230c <HAL_GetTick>
 8004d1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	88fa      	ldrh	r2, [r7, #6]
 8004d20:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	88fa      	ldrh	r2, [r7, #6]
 8004d26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d28:	e05c      	b.n	8004de4 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d40:	d12b      	bne.n	8004d9a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2120      	movs	r1, #32
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f85d 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e053      	b.n	8004e04 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10c      	bne.n	8004d82 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	e030      	b.n	8004de4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	e024      	b.n	8004de4 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2200      	movs	r2, #0
 8004da2:	2120      	movs	r1, #32
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f831 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e027      	b.n	8004e04 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d108      	bne.n	8004dce <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6859      	ldr	r1, [r3, #4]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	60ba      	str	r2, [r7, #8]
 8004dc8:	b2ca      	uxtb	r2, r1
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	e00a      	b.n	8004de4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	1c59      	adds	r1, r3, #1
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d19d      	bne.n	8004d2a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e000      	b.n	8004e04 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e1c:	e02c      	b.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d028      	beq.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e2c:	f7fd fa6e 	bl	800230c <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d21d      	bcs.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0201 	bic.w	r2, r2, #1
 8004e5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e00f      	b.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d0c3      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004eda:	f023 030c 	bic.w	r3, r3, #12
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	68f9      	ldr	r1, [r7, #12]
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a52      	ldr	r2, [pc, #328]	; (800504c <UART_SetConfig+0x1ac>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d14e      	bne.n	8004fa6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f08:	f7ff fa38 	bl	800437c <HAL_RCC_GetPCLK2Freq>
 8004f0c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009a      	lsls	r2, r3, #2
 8004f18:	441a      	add	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	4a4a      	ldr	r2, [pc, #296]	; (8005050 <UART_SetConfig+0x1b0>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	0119      	lsls	r1, r3, #4
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009a      	lsls	r2, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f44:	4b42      	ldr	r3, [pc, #264]	; (8005050 <UART_SetConfig+0x1b0>)
 8004f46:	fba3 0302 	umull	r0, r3, r3, r2
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2064      	movs	r0, #100	; 0x64
 8004f4e:	fb00 f303 	mul.w	r3, r0, r3
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	3332      	adds	r3, #50	; 0x32
 8004f58:	4a3d      	ldr	r2, [pc, #244]	; (8005050 <UART_SetConfig+0x1b0>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f64:	4419      	add	r1, r3
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009a      	lsls	r2, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f7c:	4b34      	ldr	r3, [pc, #208]	; (8005050 <UART_SetConfig+0x1b0>)
 8004f7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	2064      	movs	r0, #100	; 0x64
 8004f86:	fb00 f303 	mul.w	r3, r0, r3
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	3332      	adds	r3, #50	; 0x32
 8004f90:	4a2f      	ldr	r2, [pc, #188]	; (8005050 <UART_SetConfig+0x1b0>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	f003 020f 	and.w	r2, r3, #15
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004fa4:	e04d      	b.n	8005042 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fa6:	f7ff f9d5 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 8004faa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009a      	lsls	r2, r3, #2
 8004fb6:	441a      	add	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	4a23      	ldr	r2, [pc, #140]	; (8005050 <UART_SetConfig+0x1b0>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	0119      	lsls	r1, r3, #4
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009a      	lsls	r2, r3, #2
 8004fd6:	441a      	add	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <UART_SetConfig+0x1b0>)
 8004fe4:	fba3 0302 	umull	r0, r3, r3, r2
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	2064      	movs	r0, #100	; 0x64
 8004fec:	fb00 f303 	mul.w	r3, r0, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	3332      	adds	r3, #50	; 0x32
 8004ff6:	4a16      	ldr	r2, [pc, #88]	; (8005050 <UART_SetConfig+0x1b0>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005002:	4419      	add	r1, r3
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009a      	lsls	r2, r3, #2
 800500e:	441a      	add	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	fbb2 f2f3 	udiv	r2, r2, r3
 800501a:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <UART_SetConfig+0x1b0>)
 800501c:	fba3 0302 	umull	r0, r3, r3, r2
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	2064      	movs	r0, #100	; 0x64
 8005024:	fb00 f303 	mul.w	r3, r0, r3
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	3332      	adds	r3, #50	; 0x32
 800502e:	4a08      	ldr	r2, [pc, #32]	; (8005050 <UART_SetConfig+0x1b0>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	095b      	lsrs	r3, r3, #5
 8005036:	f003 020f 	and.w	r2, r3, #15
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	440a      	add	r2, r1
 8005040:	609a      	str	r2, [r3, #8]
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40013800 	.word	0x40013800
 8005050:	51eb851f 	.word	0x51eb851f

08005054 <__errno>:
 8005054:	4b01      	ldr	r3, [pc, #4]	; (800505c <__errno+0x8>)
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000038 	.word	0x20000038

08005060 <memset>:
 8005060:	4603      	mov	r3, r0
 8005062:	4402      	add	r2, r0
 8005064:	4293      	cmp	r3, r2
 8005066:	d100      	bne.n	800506a <memset+0xa>
 8005068:	4770      	bx	lr
 800506a:	f803 1b01 	strb.w	r1, [r3], #1
 800506e:	e7f9      	b.n	8005064 <memset+0x4>

08005070 <iprintf>:
 8005070:	b40f      	push	{r0, r1, r2, r3}
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <iprintf+0x2c>)
 8005074:	b513      	push	{r0, r1, r4, lr}
 8005076:	681c      	ldr	r4, [r3, #0]
 8005078:	b124      	cbz	r4, 8005084 <iprintf+0x14>
 800507a:	69a3      	ldr	r3, [r4, #24]
 800507c:	b913      	cbnz	r3, 8005084 <iprintf+0x14>
 800507e:	4620      	mov	r0, r4
 8005080:	f000 fab4 	bl	80055ec <__sinit>
 8005084:	ab05      	add	r3, sp, #20
 8005086:	9a04      	ldr	r2, [sp, #16]
 8005088:	68a1      	ldr	r1, [r4, #8]
 800508a:	4620      	mov	r0, r4
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	f000 fe25 	bl	8005cdc <_vfiprintf_r>
 8005092:	b002      	add	sp, #8
 8005094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005098:	b004      	add	sp, #16
 800509a:	4770      	bx	lr
 800509c:	20000038 	.word	0x20000038

080050a0 <_puts_r>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	460e      	mov	r6, r1
 80050a4:	4605      	mov	r5, r0
 80050a6:	b118      	cbz	r0, 80050b0 <_puts_r+0x10>
 80050a8:	6983      	ldr	r3, [r0, #24]
 80050aa:	b90b      	cbnz	r3, 80050b0 <_puts_r+0x10>
 80050ac:	f000 fa9e 	bl	80055ec <__sinit>
 80050b0:	69ab      	ldr	r3, [r5, #24]
 80050b2:	68ac      	ldr	r4, [r5, #8]
 80050b4:	b913      	cbnz	r3, 80050bc <_puts_r+0x1c>
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 fa98 	bl	80055ec <__sinit>
 80050bc:	4b23      	ldr	r3, [pc, #140]	; (800514c <_puts_r+0xac>)
 80050be:	429c      	cmp	r4, r3
 80050c0:	d117      	bne.n	80050f2 <_puts_r+0x52>
 80050c2:	686c      	ldr	r4, [r5, #4]
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	071b      	lsls	r3, r3, #28
 80050c8:	d51d      	bpl.n	8005106 <_puts_r+0x66>
 80050ca:	6923      	ldr	r3, [r4, #16]
 80050cc:	b1db      	cbz	r3, 8005106 <_puts_r+0x66>
 80050ce:	3e01      	subs	r6, #1
 80050d0:	68a3      	ldr	r3, [r4, #8]
 80050d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050d6:	3b01      	subs	r3, #1
 80050d8:	60a3      	str	r3, [r4, #8]
 80050da:	b9e9      	cbnz	r1, 8005118 <_puts_r+0x78>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	da2e      	bge.n	800513e <_puts_r+0x9e>
 80050e0:	4622      	mov	r2, r4
 80050e2:	210a      	movs	r1, #10
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 f8af 	bl	8005248 <__swbuf_r>
 80050ea:	3001      	adds	r0, #1
 80050ec:	d011      	beq.n	8005112 <_puts_r+0x72>
 80050ee:	200a      	movs	r0, #10
 80050f0:	e011      	b.n	8005116 <_puts_r+0x76>
 80050f2:	4b17      	ldr	r3, [pc, #92]	; (8005150 <_puts_r+0xb0>)
 80050f4:	429c      	cmp	r4, r3
 80050f6:	d101      	bne.n	80050fc <_puts_r+0x5c>
 80050f8:	68ac      	ldr	r4, [r5, #8]
 80050fa:	e7e3      	b.n	80050c4 <_puts_r+0x24>
 80050fc:	4b15      	ldr	r3, [pc, #84]	; (8005154 <_puts_r+0xb4>)
 80050fe:	429c      	cmp	r4, r3
 8005100:	bf08      	it	eq
 8005102:	68ec      	ldreq	r4, [r5, #12]
 8005104:	e7de      	b.n	80050c4 <_puts_r+0x24>
 8005106:	4621      	mov	r1, r4
 8005108:	4628      	mov	r0, r5
 800510a:	f000 f901 	bl	8005310 <__swsetup_r>
 800510e:	2800      	cmp	r0, #0
 8005110:	d0dd      	beq.n	80050ce <_puts_r+0x2e>
 8005112:	f04f 30ff 	mov.w	r0, #4294967295
 8005116:	bd70      	pop	{r4, r5, r6, pc}
 8005118:	2b00      	cmp	r3, #0
 800511a:	da04      	bge.n	8005126 <_puts_r+0x86>
 800511c:	69a2      	ldr	r2, [r4, #24]
 800511e:	429a      	cmp	r2, r3
 8005120:	dc06      	bgt.n	8005130 <_puts_r+0x90>
 8005122:	290a      	cmp	r1, #10
 8005124:	d004      	beq.n	8005130 <_puts_r+0x90>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	6022      	str	r2, [r4, #0]
 800512c:	7019      	strb	r1, [r3, #0]
 800512e:	e7cf      	b.n	80050d0 <_puts_r+0x30>
 8005130:	4622      	mov	r2, r4
 8005132:	4628      	mov	r0, r5
 8005134:	f000 f888 	bl	8005248 <__swbuf_r>
 8005138:	3001      	adds	r0, #1
 800513a:	d1c9      	bne.n	80050d0 <_puts_r+0x30>
 800513c:	e7e9      	b.n	8005112 <_puts_r+0x72>
 800513e:	200a      	movs	r0, #10
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	6022      	str	r2, [r4, #0]
 8005146:	7018      	strb	r0, [r3, #0]
 8005148:	e7e5      	b.n	8005116 <_puts_r+0x76>
 800514a:	bf00      	nop
 800514c:	08006fb0 	.word	0x08006fb0
 8005150:	08006fd0 	.word	0x08006fd0
 8005154:	08006f90 	.word	0x08006f90

08005158 <puts>:
 8005158:	4b02      	ldr	r3, [pc, #8]	; (8005164 <puts+0xc>)
 800515a:	4601      	mov	r1, r0
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	f7ff bf9f 	b.w	80050a0 <_puts_r>
 8005162:	bf00      	nop
 8005164:	20000038 	.word	0x20000038

08005168 <siscanf>:
 8005168:	b40e      	push	{r1, r2, r3}
 800516a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800516e:	b530      	push	{r4, r5, lr}
 8005170:	b09c      	sub	sp, #112	; 0x70
 8005172:	ac1f      	add	r4, sp, #124	; 0x7c
 8005174:	f854 5b04 	ldr.w	r5, [r4], #4
 8005178:	f8ad 2014 	strh.w	r2, [sp, #20]
 800517c:	9002      	str	r0, [sp, #8]
 800517e:	9006      	str	r0, [sp, #24]
 8005180:	f7fb f850 	bl	8000224 <strlen>
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <siscanf+0x4c>)
 8005186:	9003      	str	r0, [sp, #12]
 8005188:	930b      	str	r3, [sp, #44]	; 0x2c
 800518a:	2300      	movs	r3, #0
 800518c:	930f      	str	r3, [sp, #60]	; 0x3c
 800518e:	9314      	str	r3, [sp, #80]	; 0x50
 8005190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005194:	9007      	str	r0, [sp, #28]
 8005196:	4808      	ldr	r0, [pc, #32]	; (80051b8 <siscanf+0x50>)
 8005198:	f8ad 3016 	strh.w	r3, [sp, #22]
 800519c:	462a      	mov	r2, r5
 800519e:	4623      	mov	r3, r4
 80051a0:	a902      	add	r1, sp, #8
 80051a2:	6800      	ldr	r0, [r0, #0]
 80051a4:	9401      	str	r4, [sp, #4]
 80051a6:	f000 fc21 	bl	80059ec <__ssvfiscanf_r>
 80051aa:	b01c      	add	sp, #112	; 0x70
 80051ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051b0:	b003      	add	sp, #12
 80051b2:	4770      	bx	lr
 80051b4:	080051df 	.word	0x080051df
 80051b8:	20000038 	.word	0x20000038

080051bc <__sread>:
 80051bc:	b510      	push	{r4, lr}
 80051be:	460c      	mov	r4, r1
 80051c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c4:	f001 f980 	bl	80064c8 <_read_r>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	bfab      	itete	ge
 80051cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051ce:	89a3      	ldrhlt	r3, [r4, #12]
 80051d0:	181b      	addge	r3, r3, r0
 80051d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051d6:	bfac      	ite	ge
 80051d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80051da:	81a3      	strhlt	r3, [r4, #12]
 80051dc:	bd10      	pop	{r4, pc}

080051de <__seofread>:
 80051de:	2000      	movs	r0, #0
 80051e0:	4770      	bx	lr

080051e2 <__swrite>:
 80051e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e6:	461f      	mov	r7, r3
 80051e8:	898b      	ldrh	r3, [r1, #12]
 80051ea:	4605      	mov	r5, r0
 80051ec:	05db      	lsls	r3, r3, #23
 80051ee:	460c      	mov	r4, r1
 80051f0:	4616      	mov	r6, r2
 80051f2:	d505      	bpl.n	8005200 <__swrite+0x1e>
 80051f4:	2302      	movs	r3, #2
 80051f6:	2200      	movs	r2, #0
 80051f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fc:	f000 fa80 	bl	8005700 <_lseek_r>
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	4632      	mov	r2, r6
 8005204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800520e:	463b      	mov	r3, r7
 8005210:	4628      	mov	r0, r5
 8005212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005216:	f000 b869 	b.w	80052ec <_write_r>

0800521a <__sseek>:
 800521a:	b510      	push	{r4, lr}
 800521c:	460c      	mov	r4, r1
 800521e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005222:	f000 fa6d 	bl	8005700 <_lseek_r>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	bf15      	itete	ne
 800522c:	6560      	strne	r0, [r4, #84]	; 0x54
 800522e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005236:	81a3      	strheq	r3, [r4, #12]
 8005238:	bf18      	it	ne
 800523a:	81a3      	strhne	r3, [r4, #12]
 800523c:	bd10      	pop	{r4, pc}

0800523e <__sclose>:
 800523e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005242:	f000 b8d3 	b.w	80053ec <_close_r>
	...

08005248 <__swbuf_r>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	460e      	mov	r6, r1
 800524c:	4614      	mov	r4, r2
 800524e:	4605      	mov	r5, r0
 8005250:	b118      	cbz	r0, 800525a <__swbuf_r+0x12>
 8005252:	6983      	ldr	r3, [r0, #24]
 8005254:	b90b      	cbnz	r3, 800525a <__swbuf_r+0x12>
 8005256:	f000 f9c9 	bl	80055ec <__sinit>
 800525a:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <__swbuf_r+0x98>)
 800525c:	429c      	cmp	r4, r3
 800525e:	d12a      	bne.n	80052b6 <__swbuf_r+0x6e>
 8005260:	686c      	ldr	r4, [r5, #4]
 8005262:	69a3      	ldr	r3, [r4, #24]
 8005264:	60a3      	str	r3, [r4, #8]
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	071a      	lsls	r2, r3, #28
 800526a:	d52e      	bpl.n	80052ca <__swbuf_r+0x82>
 800526c:	6923      	ldr	r3, [r4, #16]
 800526e:	b363      	cbz	r3, 80052ca <__swbuf_r+0x82>
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	6820      	ldr	r0, [r4, #0]
 8005274:	b2f6      	uxtb	r6, r6
 8005276:	1ac0      	subs	r0, r0, r3
 8005278:	6963      	ldr	r3, [r4, #20]
 800527a:	4637      	mov	r7, r6
 800527c:	4283      	cmp	r3, r0
 800527e:	dc04      	bgt.n	800528a <__swbuf_r+0x42>
 8005280:	4621      	mov	r1, r4
 8005282:	4628      	mov	r0, r5
 8005284:	f000 f948 	bl	8005518 <_fflush_r>
 8005288:	bb28      	cbnz	r0, 80052d6 <__swbuf_r+0x8e>
 800528a:	68a3      	ldr	r3, [r4, #8]
 800528c:	3001      	adds	r0, #1
 800528e:	3b01      	subs	r3, #1
 8005290:	60a3      	str	r3, [r4, #8]
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	6022      	str	r2, [r4, #0]
 8005298:	701e      	strb	r6, [r3, #0]
 800529a:	6963      	ldr	r3, [r4, #20]
 800529c:	4283      	cmp	r3, r0
 800529e:	d004      	beq.n	80052aa <__swbuf_r+0x62>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	07db      	lsls	r3, r3, #31
 80052a4:	d519      	bpl.n	80052da <__swbuf_r+0x92>
 80052a6:	2e0a      	cmp	r6, #10
 80052a8:	d117      	bne.n	80052da <__swbuf_r+0x92>
 80052aa:	4621      	mov	r1, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 f933 	bl	8005518 <_fflush_r>
 80052b2:	b190      	cbz	r0, 80052da <__swbuf_r+0x92>
 80052b4:	e00f      	b.n	80052d6 <__swbuf_r+0x8e>
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <__swbuf_r+0x9c>)
 80052b8:	429c      	cmp	r4, r3
 80052ba:	d101      	bne.n	80052c0 <__swbuf_r+0x78>
 80052bc:	68ac      	ldr	r4, [r5, #8]
 80052be:	e7d0      	b.n	8005262 <__swbuf_r+0x1a>
 80052c0:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <__swbuf_r+0xa0>)
 80052c2:	429c      	cmp	r4, r3
 80052c4:	bf08      	it	eq
 80052c6:	68ec      	ldreq	r4, [r5, #12]
 80052c8:	e7cb      	b.n	8005262 <__swbuf_r+0x1a>
 80052ca:	4621      	mov	r1, r4
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 f81f 	bl	8005310 <__swsetup_r>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d0cc      	beq.n	8005270 <__swbuf_r+0x28>
 80052d6:	f04f 37ff 	mov.w	r7, #4294967295
 80052da:	4638      	mov	r0, r7
 80052dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052de:	bf00      	nop
 80052e0:	08006fb0 	.word	0x08006fb0
 80052e4:	08006fd0 	.word	0x08006fd0
 80052e8:	08006f90 	.word	0x08006f90

080052ec <_write_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4605      	mov	r5, r0
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	2200      	movs	r2, #0
 80052f6:	4c05      	ldr	r4, [pc, #20]	; (800530c <_write_r+0x20>)
 80052f8:	6022      	str	r2, [r4, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f7fc fde9 	bl	8001ed2 <_write>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_write_r+0x1e>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	b103      	cbz	r3, 800530a <_write_r+0x1e>
 8005308:	602b      	str	r3, [r5, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	200003c8 	.word	0x200003c8

08005310 <__swsetup_r>:
 8005310:	4b32      	ldr	r3, [pc, #200]	; (80053dc <__swsetup_r+0xcc>)
 8005312:	b570      	push	{r4, r5, r6, lr}
 8005314:	681d      	ldr	r5, [r3, #0]
 8005316:	4606      	mov	r6, r0
 8005318:	460c      	mov	r4, r1
 800531a:	b125      	cbz	r5, 8005326 <__swsetup_r+0x16>
 800531c:	69ab      	ldr	r3, [r5, #24]
 800531e:	b913      	cbnz	r3, 8005326 <__swsetup_r+0x16>
 8005320:	4628      	mov	r0, r5
 8005322:	f000 f963 	bl	80055ec <__sinit>
 8005326:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <__swsetup_r+0xd0>)
 8005328:	429c      	cmp	r4, r3
 800532a:	d10f      	bne.n	800534c <__swsetup_r+0x3c>
 800532c:	686c      	ldr	r4, [r5, #4]
 800532e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005332:	b29a      	uxth	r2, r3
 8005334:	0715      	lsls	r5, r2, #28
 8005336:	d42c      	bmi.n	8005392 <__swsetup_r+0x82>
 8005338:	06d0      	lsls	r0, r2, #27
 800533a:	d411      	bmi.n	8005360 <__swsetup_r+0x50>
 800533c:	2209      	movs	r2, #9
 800533e:	6032      	str	r2, [r6, #0]
 8005340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005344:	81a3      	strh	r3, [r4, #12]
 8005346:	f04f 30ff 	mov.w	r0, #4294967295
 800534a:	e03e      	b.n	80053ca <__swsetup_r+0xba>
 800534c:	4b25      	ldr	r3, [pc, #148]	; (80053e4 <__swsetup_r+0xd4>)
 800534e:	429c      	cmp	r4, r3
 8005350:	d101      	bne.n	8005356 <__swsetup_r+0x46>
 8005352:	68ac      	ldr	r4, [r5, #8]
 8005354:	e7eb      	b.n	800532e <__swsetup_r+0x1e>
 8005356:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <__swsetup_r+0xd8>)
 8005358:	429c      	cmp	r4, r3
 800535a:	bf08      	it	eq
 800535c:	68ec      	ldreq	r4, [r5, #12]
 800535e:	e7e6      	b.n	800532e <__swsetup_r+0x1e>
 8005360:	0751      	lsls	r1, r2, #29
 8005362:	d512      	bpl.n	800538a <__swsetup_r+0x7a>
 8005364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005366:	b141      	cbz	r1, 800537a <__swsetup_r+0x6a>
 8005368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800536c:	4299      	cmp	r1, r3
 800536e:	d002      	beq.n	8005376 <__swsetup_r+0x66>
 8005370:	4630      	mov	r0, r6
 8005372:	f000 fa3b 	bl	80057ec <_free_r>
 8005376:	2300      	movs	r3, #0
 8005378:	6363      	str	r3, [r4, #52]	; 0x34
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	2300      	movs	r3, #0
 8005384:	6063      	str	r3, [r4, #4]
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	f043 0308 	orr.w	r3, r3, #8
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	b94b      	cbnz	r3, 80053aa <__swsetup_r+0x9a>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800539c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a0:	d003      	beq.n	80053aa <__swsetup_r+0x9a>
 80053a2:	4621      	mov	r1, r4
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 f9e1 	bl	800576c <__smakebuf_r>
 80053aa:	89a2      	ldrh	r2, [r4, #12]
 80053ac:	f012 0301 	ands.w	r3, r2, #1
 80053b0:	d00c      	beq.n	80053cc <__swsetup_r+0xbc>
 80053b2:	2300      	movs	r3, #0
 80053b4:	60a3      	str	r3, [r4, #8]
 80053b6:	6963      	ldr	r3, [r4, #20]
 80053b8:	425b      	negs	r3, r3
 80053ba:	61a3      	str	r3, [r4, #24]
 80053bc:	6923      	ldr	r3, [r4, #16]
 80053be:	b953      	cbnz	r3, 80053d6 <__swsetup_r+0xc6>
 80053c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80053c8:	d1ba      	bne.n	8005340 <__swsetup_r+0x30>
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	0792      	lsls	r2, r2, #30
 80053ce:	bf58      	it	pl
 80053d0:	6963      	ldrpl	r3, [r4, #20]
 80053d2:	60a3      	str	r3, [r4, #8]
 80053d4:	e7f2      	b.n	80053bc <__swsetup_r+0xac>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e7f7      	b.n	80053ca <__swsetup_r+0xba>
 80053da:	bf00      	nop
 80053dc:	20000038 	.word	0x20000038
 80053e0:	08006fb0 	.word	0x08006fb0
 80053e4:	08006fd0 	.word	0x08006fd0
 80053e8:	08006f90 	.word	0x08006f90

080053ec <_close_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	2300      	movs	r3, #0
 80053f0:	4c05      	ldr	r4, [pc, #20]	; (8005408 <_close_r+0x1c>)
 80053f2:	4605      	mov	r5, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	f7fc fd87 	bl	8001f0a <_close>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_close_r+0x1a>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	b103      	cbz	r3, 8005406 <_close_r+0x1a>
 8005404:	602b      	str	r3, [r5, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	200003c8 	.word	0x200003c8

0800540c <__sflush_r>:
 800540c:	898a      	ldrh	r2, [r1, #12]
 800540e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005412:	4605      	mov	r5, r0
 8005414:	0710      	lsls	r0, r2, #28
 8005416:	460c      	mov	r4, r1
 8005418:	d458      	bmi.n	80054cc <__sflush_r+0xc0>
 800541a:	684b      	ldr	r3, [r1, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	dc05      	bgt.n	800542c <__sflush_r+0x20>
 8005420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	dc02      	bgt.n	800542c <__sflush_r+0x20>
 8005426:	2000      	movs	r0, #0
 8005428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800542e:	2e00      	cmp	r6, #0
 8005430:	d0f9      	beq.n	8005426 <__sflush_r+0x1a>
 8005432:	2300      	movs	r3, #0
 8005434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005438:	682f      	ldr	r7, [r5, #0]
 800543a:	6a21      	ldr	r1, [r4, #32]
 800543c:	602b      	str	r3, [r5, #0]
 800543e:	d032      	beq.n	80054a6 <__sflush_r+0x9a>
 8005440:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	075a      	lsls	r2, r3, #29
 8005446:	d505      	bpl.n	8005454 <__sflush_r+0x48>
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	1ac0      	subs	r0, r0, r3
 800544c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800544e:	b10b      	cbz	r3, 8005454 <__sflush_r+0x48>
 8005450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005452:	1ac0      	subs	r0, r0, r3
 8005454:	2300      	movs	r3, #0
 8005456:	4602      	mov	r2, r0
 8005458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800545a:	6a21      	ldr	r1, [r4, #32]
 800545c:	4628      	mov	r0, r5
 800545e:	47b0      	blx	r6
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	d106      	bne.n	8005474 <__sflush_r+0x68>
 8005466:	6829      	ldr	r1, [r5, #0]
 8005468:	291d      	cmp	r1, #29
 800546a:	d848      	bhi.n	80054fe <__sflush_r+0xf2>
 800546c:	4a29      	ldr	r2, [pc, #164]	; (8005514 <__sflush_r+0x108>)
 800546e:	40ca      	lsrs	r2, r1
 8005470:	07d6      	lsls	r6, r2, #31
 8005472:	d544      	bpl.n	80054fe <__sflush_r+0xf2>
 8005474:	2200      	movs	r2, #0
 8005476:	6062      	str	r2, [r4, #4]
 8005478:	6922      	ldr	r2, [r4, #16]
 800547a:	04d9      	lsls	r1, r3, #19
 800547c:	6022      	str	r2, [r4, #0]
 800547e:	d504      	bpl.n	800548a <__sflush_r+0x7e>
 8005480:	1c42      	adds	r2, r0, #1
 8005482:	d101      	bne.n	8005488 <__sflush_r+0x7c>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b903      	cbnz	r3, 800548a <__sflush_r+0x7e>
 8005488:	6560      	str	r0, [r4, #84]	; 0x54
 800548a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800548c:	602f      	str	r7, [r5, #0]
 800548e:	2900      	cmp	r1, #0
 8005490:	d0c9      	beq.n	8005426 <__sflush_r+0x1a>
 8005492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005496:	4299      	cmp	r1, r3
 8005498:	d002      	beq.n	80054a0 <__sflush_r+0x94>
 800549a:	4628      	mov	r0, r5
 800549c:	f000 f9a6 	bl	80057ec <_free_r>
 80054a0:	2000      	movs	r0, #0
 80054a2:	6360      	str	r0, [r4, #52]	; 0x34
 80054a4:	e7c0      	b.n	8005428 <__sflush_r+0x1c>
 80054a6:	2301      	movs	r3, #1
 80054a8:	4628      	mov	r0, r5
 80054aa:	47b0      	blx	r6
 80054ac:	1c41      	adds	r1, r0, #1
 80054ae:	d1c8      	bne.n	8005442 <__sflush_r+0x36>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0c5      	beq.n	8005442 <__sflush_r+0x36>
 80054b6:	2b1d      	cmp	r3, #29
 80054b8:	d001      	beq.n	80054be <__sflush_r+0xb2>
 80054ba:	2b16      	cmp	r3, #22
 80054bc:	d101      	bne.n	80054c2 <__sflush_r+0xb6>
 80054be:	602f      	str	r7, [r5, #0]
 80054c0:	e7b1      	b.n	8005426 <__sflush_r+0x1a>
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c8:	81a3      	strh	r3, [r4, #12]
 80054ca:	e7ad      	b.n	8005428 <__sflush_r+0x1c>
 80054cc:	690f      	ldr	r7, [r1, #16]
 80054ce:	2f00      	cmp	r7, #0
 80054d0:	d0a9      	beq.n	8005426 <__sflush_r+0x1a>
 80054d2:	0793      	lsls	r3, r2, #30
 80054d4:	bf18      	it	ne
 80054d6:	2300      	movne	r3, #0
 80054d8:	680e      	ldr	r6, [r1, #0]
 80054da:	bf08      	it	eq
 80054dc:	694b      	ldreq	r3, [r1, #20]
 80054de:	eba6 0807 	sub.w	r8, r6, r7
 80054e2:	600f      	str	r7, [r1, #0]
 80054e4:	608b      	str	r3, [r1, #8]
 80054e6:	f1b8 0f00 	cmp.w	r8, #0
 80054ea:	dd9c      	ble.n	8005426 <__sflush_r+0x1a>
 80054ec:	4643      	mov	r3, r8
 80054ee:	463a      	mov	r2, r7
 80054f0:	6a21      	ldr	r1, [r4, #32]
 80054f2:	4628      	mov	r0, r5
 80054f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054f6:	47b0      	blx	r6
 80054f8:	2800      	cmp	r0, #0
 80054fa:	dc06      	bgt.n	800550a <__sflush_r+0xfe>
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005502:	81a3      	strh	r3, [r4, #12]
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	e78e      	b.n	8005428 <__sflush_r+0x1c>
 800550a:	4407      	add	r7, r0
 800550c:	eba8 0800 	sub.w	r8, r8, r0
 8005510:	e7e9      	b.n	80054e6 <__sflush_r+0xda>
 8005512:	bf00      	nop
 8005514:	20400001 	.word	0x20400001

08005518 <_fflush_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	690b      	ldr	r3, [r1, #16]
 800551c:	4605      	mov	r5, r0
 800551e:	460c      	mov	r4, r1
 8005520:	b1db      	cbz	r3, 800555a <_fflush_r+0x42>
 8005522:	b118      	cbz	r0, 800552c <_fflush_r+0x14>
 8005524:	6983      	ldr	r3, [r0, #24]
 8005526:	b90b      	cbnz	r3, 800552c <_fflush_r+0x14>
 8005528:	f000 f860 	bl	80055ec <__sinit>
 800552c:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <_fflush_r+0x48>)
 800552e:	429c      	cmp	r4, r3
 8005530:	d109      	bne.n	8005546 <_fflush_r+0x2e>
 8005532:	686c      	ldr	r4, [r5, #4]
 8005534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005538:	b17b      	cbz	r3, 800555a <_fflush_r+0x42>
 800553a:	4621      	mov	r1, r4
 800553c:	4628      	mov	r0, r5
 800553e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005542:	f7ff bf63 	b.w	800540c <__sflush_r>
 8005546:	4b07      	ldr	r3, [pc, #28]	; (8005564 <_fflush_r+0x4c>)
 8005548:	429c      	cmp	r4, r3
 800554a:	d101      	bne.n	8005550 <_fflush_r+0x38>
 800554c:	68ac      	ldr	r4, [r5, #8]
 800554e:	e7f1      	b.n	8005534 <_fflush_r+0x1c>
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <_fflush_r+0x50>)
 8005552:	429c      	cmp	r4, r3
 8005554:	bf08      	it	eq
 8005556:	68ec      	ldreq	r4, [r5, #12]
 8005558:	e7ec      	b.n	8005534 <_fflush_r+0x1c>
 800555a:	2000      	movs	r0, #0
 800555c:	bd38      	pop	{r3, r4, r5, pc}
 800555e:	bf00      	nop
 8005560:	08006fb0 	.word	0x08006fb0
 8005564:	08006fd0 	.word	0x08006fd0
 8005568:	08006f90 	.word	0x08006f90

0800556c <std>:
 800556c:	2300      	movs	r3, #0
 800556e:	b510      	push	{r4, lr}
 8005570:	4604      	mov	r4, r0
 8005572:	e9c0 3300 	strd	r3, r3, [r0]
 8005576:	6083      	str	r3, [r0, #8]
 8005578:	8181      	strh	r1, [r0, #12]
 800557a:	6643      	str	r3, [r0, #100]	; 0x64
 800557c:	81c2      	strh	r2, [r0, #14]
 800557e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005582:	6183      	str	r3, [r0, #24]
 8005584:	4619      	mov	r1, r3
 8005586:	2208      	movs	r2, #8
 8005588:	305c      	adds	r0, #92	; 0x5c
 800558a:	f7ff fd69 	bl	8005060 <memset>
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <std+0x38>)
 8005590:	6224      	str	r4, [r4, #32]
 8005592:	6263      	str	r3, [r4, #36]	; 0x24
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <std+0x3c>)
 8005596:	62a3      	str	r3, [r4, #40]	; 0x28
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <std+0x40>)
 800559a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <std+0x44>)
 800559e:	6323      	str	r3, [r4, #48]	; 0x30
 80055a0:	bd10      	pop	{r4, pc}
 80055a2:	bf00      	nop
 80055a4:	080051bd 	.word	0x080051bd
 80055a8:	080051e3 	.word	0x080051e3
 80055ac:	0800521b 	.word	0x0800521b
 80055b0:	0800523f 	.word	0x0800523f

080055b4 <_cleanup_r>:
 80055b4:	4901      	ldr	r1, [pc, #4]	; (80055bc <_cleanup_r+0x8>)
 80055b6:	f000 b885 	b.w	80056c4 <_fwalk_reent>
 80055ba:	bf00      	nop
 80055bc:	08005519 	.word	0x08005519

080055c0 <__sfmoreglue>:
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	2568      	movs	r5, #104	; 0x68
 80055c4:	1e4a      	subs	r2, r1, #1
 80055c6:	4355      	muls	r5, r2
 80055c8:	460e      	mov	r6, r1
 80055ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055ce:	f000 f959 	bl	8005884 <_malloc_r>
 80055d2:	4604      	mov	r4, r0
 80055d4:	b140      	cbz	r0, 80055e8 <__sfmoreglue+0x28>
 80055d6:	2100      	movs	r1, #0
 80055d8:	e9c0 1600 	strd	r1, r6, [r0]
 80055dc:	300c      	adds	r0, #12
 80055de:	60a0      	str	r0, [r4, #8]
 80055e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055e4:	f7ff fd3c 	bl	8005060 <memset>
 80055e8:	4620      	mov	r0, r4
 80055ea:	bd70      	pop	{r4, r5, r6, pc}

080055ec <__sinit>:
 80055ec:	6983      	ldr	r3, [r0, #24]
 80055ee:	b510      	push	{r4, lr}
 80055f0:	4604      	mov	r4, r0
 80055f2:	bb33      	cbnz	r3, 8005642 <__sinit+0x56>
 80055f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80055f8:	6503      	str	r3, [r0, #80]	; 0x50
 80055fa:	4b12      	ldr	r3, [pc, #72]	; (8005644 <__sinit+0x58>)
 80055fc:	4a12      	ldr	r2, [pc, #72]	; (8005648 <__sinit+0x5c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6282      	str	r2, [r0, #40]	; 0x28
 8005602:	4298      	cmp	r0, r3
 8005604:	bf04      	itt	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	6183      	streq	r3, [r0, #24]
 800560a:	f000 f81f 	bl	800564c <__sfp>
 800560e:	6060      	str	r0, [r4, #4]
 8005610:	4620      	mov	r0, r4
 8005612:	f000 f81b 	bl	800564c <__sfp>
 8005616:	60a0      	str	r0, [r4, #8]
 8005618:	4620      	mov	r0, r4
 800561a:	f000 f817 	bl	800564c <__sfp>
 800561e:	2200      	movs	r2, #0
 8005620:	60e0      	str	r0, [r4, #12]
 8005622:	2104      	movs	r1, #4
 8005624:	6860      	ldr	r0, [r4, #4]
 8005626:	f7ff ffa1 	bl	800556c <std>
 800562a:	2201      	movs	r2, #1
 800562c:	2109      	movs	r1, #9
 800562e:	68a0      	ldr	r0, [r4, #8]
 8005630:	f7ff ff9c 	bl	800556c <std>
 8005634:	2202      	movs	r2, #2
 8005636:	2112      	movs	r1, #18
 8005638:	68e0      	ldr	r0, [r4, #12]
 800563a:	f7ff ff97 	bl	800556c <std>
 800563e:	2301      	movs	r3, #1
 8005640:	61a3      	str	r3, [r4, #24]
 8005642:	bd10      	pop	{r4, pc}
 8005644:	08006f8c 	.word	0x08006f8c
 8005648:	080055b5 	.word	0x080055b5

0800564c <__sfp>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <__sfp+0x70>)
 8005650:	4607      	mov	r7, r0
 8005652:	681e      	ldr	r6, [r3, #0]
 8005654:	69b3      	ldr	r3, [r6, #24]
 8005656:	b913      	cbnz	r3, 800565e <__sfp+0x12>
 8005658:	4630      	mov	r0, r6
 800565a:	f7ff ffc7 	bl	80055ec <__sinit>
 800565e:	3648      	adds	r6, #72	; 0x48
 8005660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005664:	3b01      	subs	r3, #1
 8005666:	d503      	bpl.n	8005670 <__sfp+0x24>
 8005668:	6833      	ldr	r3, [r6, #0]
 800566a:	b133      	cbz	r3, 800567a <__sfp+0x2e>
 800566c:	6836      	ldr	r6, [r6, #0]
 800566e:	e7f7      	b.n	8005660 <__sfp+0x14>
 8005670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005674:	b16d      	cbz	r5, 8005692 <__sfp+0x46>
 8005676:	3468      	adds	r4, #104	; 0x68
 8005678:	e7f4      	b.n	8005664 <__sfp+0x18>
 800567a:	2104      	movs	r1, #4
 800567c:	4638      	mov	r0, r7
 800567e:	f7ff ff9f 	bl	80055c0 <__sfmoreglue>
 8005682:	6030      	str	r0, [r6, #0]
 8005684:	2800      	cmp	r0, #0
 8005686:	d1f1      	bne.n	800566c <__sfp+0x20>
 8005688:	230c      	movs	r3, #12
 800568a:	4604      	mov	r4, r0
 800568c:	603b      	str	r3, [r7, #0]
 800568e:	4620      	mov	r0, r4
 8005690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <__sfp+0x74>)
 8005694:	6665      	str	r5, [r4, #100]	; 0x64
 8005696:	e9c4 5500 	strd	r5, r5, [r4]
 800569a:	60a5      	str	r5, [r4, #8]
 800569c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80056a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80056a4:	2208      	movs	r2, #8
 80056a6:	4629      	mov	r1, r5
 80056a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056ac:	f7ff fcd8 	bl	8005060 <memset>
 80056b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056b8:	e7e9      	b.n	800568e <__sfp+0x42>
 80056ba:	bf00      	nop
 80056bc:	08006f8c 	.word	0x08006f8c
 80056c0:	ffff0001 	.word	0xffff0001

080056c4 <_fwalk_reent>:
 80056c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c8:	4680      	mov	r8, r0
 80056ca:	4689      	mov	r9, r1
 80056cc:	2600      	movs	r6, #0
 80056ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056d2:	b914      	cbnz	r4, 80056da <_fwalk_reent+0x16>
 80056d4:	4630      	mov	r0, r6
 80056d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80056de:	3f01      	subs	r7, #1
 80056e0:	d501      	bpl.n	80056e6 <_fwalk_reent+0x22>
 80056e2:	6824      	ldr	r4, [r4, #0]
 80056e4:	e7f5      	b.n	80056d2 <_fwalk_reent+0xe>
 80056e6:	89ab      	ldrh	r3, [r5, #12]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d907      	bls.n	80056fc <_fwalk_reent+0x38>
 80056ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056f0:	3301      	adds	r3, #1
 80056f2:	d003      	beq.n	80056fc <_fwalk_reent+0x38>
 80056f4:	4629      	mov	r1, r5
 80056f6:	4640      	mov	r0, r8
 80056f8:	47c8      	blx	r9
 80056fa:	4306      	orrs	r6, r0
 80056fc:	3568      	adds	r5, #104	; 0x68
 80056fe:	e7ee      	b.n	80056de <_fwalk_reent+0x1a>

08005700 <_lseek_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4605      	mov	r5, r0
 8005704:	4608      	mov	r0, r1
 8005706:	4611      	mov	r1, r2
 8005708:	2200      	movs	r2, #0
 800570a:	4c05      	ldr	r4, [pc, #20]	; (8005720 <_lseek_r+0x20>)
 800570c:	6022      	str	r2, [r4, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	f7fc fc1f 	bl	8001f52 <_lseek>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_lseek_r+0x1e>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	b103      	cbz	r3, 800571e <_lseek_r+0x1e>
 800571c:	602b      	str	r3, [r5, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	200003c8 	.word	0x200003c8

08005724 <__swhatbuf_r>:
 8005724:	b570      	push	{r4, r5, r6, lr}
 8005726:	460e      	mov	r6, r1
 8005728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572c:	b096      	sub	sp, #88	; 0x58
 800572e:	2900      	cmp	r1, #0
 8005730:	4614      	mov	r4, r2
 8005732:	461d      	mov	r5, r3
 8005734:	da07      	bge.n	8005746 <__swhatbuf_r+0x22>
 8005736:	2300      	movs	r3, #0
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	89b3      	ldrh	r3, [r6, #12]
 800573c:	061a      	lsls	r2, r3, #24
 800573e:	d410      	bmi.n	8005762 <__swhatbuf_r+0x3e>
 8005740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005744:	e00e      	b.n	8005764 <__swhatbuf_r+0x40>
 8005746:	466a      	mov	r2, sp
 8005748:	f001 f862 	bl	8006810 <_fstat_r>
 800574c:	2800      	cmp	r0, #0
 800574e:	dbf2      	blt.n	8005736 <__swhatbuf_r+0x12>
 8005750:	9a01      	ldr	r2, [sp, #4]
 8005752:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005756:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800575a:	425a      	negs	r2, r3
 800575c:	415a      	adcs	r2, r3
 800575e:	602a      	str	r2, [r5, #0]
 8005760:	e7ee      	b.n	8005740 <__swhatbuf_r+0x1c>
 8005762:	2340      	movs	r3, #64	; 0x40
 8005764:	2000      	movs	r0, #0
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	b016      	add	sp, #88	; 0x58
 800576a:	bd70      	pop	{r4, r5, r6, pc}

0800576c <__smakebuf_r>:
 800576c:	898b      	ldrh	r3, [r1, #12]
 800576e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005770:	079d      	lsls	r5, r3, #30
 8005772:	4606      	mov	r6, r0
 8005774:	460c      	mov	r4, r1
 8005776:	d507      	bpl.n	8005788 <__smakebuf_r+0x1c>
 8005778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	6123      	str	r3, [r4, #16]
 8005780:	2301      	movs	r3, #1
 8005782:	6163      	str	r3, [r4, #20]
 8005784:	b002      	add	sp, #8
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	ab01      	add	r3, sp, #4
 800578a:	466a      	mov	r2, sp
 800578c:	f7ff ffca 	bl	8005724 <__swhatbuf_r>
 8005790:	9900      	ldr	r1, [sp, #0]
 8005792:	4605      	mov	r5, r0
 8005794:	4630      	mov	r0, r6
 8005796:	f000 f875 	bl	8005884 <_malloc_r>
 800579a:	b948      	cbnz	r0, 80057b0 <__smakebuf_r+0x44>
 800579c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a0:	059a      	lsls	r2, r3, #22
 80057a2:	d4ef      	bmi.n	8005784 <__smakebuf_r+0x18>
 80057a4:	f023 0303 	bic.w	r3, r3, #3
 80057a8:	f043 0302 	orr.w	r3, r3, #2
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	e7e3      	b.n	8005778 <__smakebuf_r+0xc>
 80057b0:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <__smakebuf_r+0x7c>)
 80057b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	6020      	str	r0, [r4, #0]
 80057b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	9b00      	ldr	r3, [sp, #0]
 80057c0:	6120      	str	r0, [r4, #16]
 80057c2:	6163      	str	r3, [r4, #20]
 80057c4:	9b01      	ldr	r3, [sp, #4]
 80057c6:	b15b      	cbz	r3, 80057e0 <__smakebuf_r+0x74>
 80057c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057cc:	4630      	mov	r0, r6
 80057ce:	f001 f831 	bl	8006834 <_isatty_r>
 80057d2:	b128      	cbz	r0, 80057e0 <__smakebuf_r+0x74>
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	81a3      	strh	r3, [r4, #12]
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	431d      	orrs	r5, r3
 80057e4:	81a5      	strh	r5, [r4, #12]
 80057e6:	e7cd      	b.n	8005784 <__smakebuf_r+0x18>
 80057e8:	080055b5 	.word	0x080055b5

080057ec <_free_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4605      	mov	r5, r0
 80057f0:	2900      	cmp	r1, #0
 80057f2:	d043      	beq.n	800587c <_free_r+0x90>
 80057f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f8:	1f0c      	subs	r4, r1, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bfb8      	it	lt
 80057fe:	18e4      	addlt	r4, r4, r3
 8005800:	f001 f865 	bl	80068ce <__malloc_lock>
 8005804:	4a1e      	ldr	r2, [pc, #120]	; (8005880 <_free_r+0x94>)
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	4610      	mov	r0, r2
 800580a:	b933      	cbnz	r3, 800581a <_free_r+0x2e>
 800580c:	6063      	str	r3, [r4, #4]
 800580e:	6014      	str	r4, [r2, #0]
 8005810:	4628      	mov	r0, r5
 8005812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005816:	f001 b85b 	b.w	80068d0 <__malloc_unlock>
 800581a:	42a3      	cmp	r3, r4
 800581c:	d90b      	bls.n	8005836 <_free_r+0x4a>
 800581e:	6821      	ldr	r1, [r4, #0]
 8005820:	1862      	adds	r2, r4, r1
 8005822:	4293      	cmp	r3, r2
 8005824:	bf01      	itttt	eq
 8005826:	681a      	ldreq	r2, [r3, #0]
 8005828:	685b      	ldreq	r3, [r3, #4]
 800582a:	1852      	addeq	r2, r2, r1
 800582c:	6022      	streq	r2, [r4, #0]
 800582e:	6063      	str	r3, [r4, #4]
 8005830:	6004      	str	r4, [r0, #0]
 8005832:	e7ed      	b.n	8005810 <_free_r+0x24>
 8005834:	4613      	mov	r3, r2
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	b10a      	cbz	r2, 800583e <_free_r+0x52>
 800583a:	42a2      	cmp	r2, r4
 800583c:	d9fa      	bls.n	8005834 <_free_r+0x48>
 800583e:	6819      	ldr	r1, [r3, #0]
 8005840:	1858      	adds	r0, r3, r1
 8005842:	42a0      	cmp	r0, r4
 8005844:	d10b      	bne.n	800585e <_free_r+0x72>
 8005846:	6820      	ldr	r0, [r4, #0]
 8005848:	4401      	add	r1, r0
 800584a:	1858      	adds	r0, r3, r1
 800584c:	4282      	cmp	r2, r0
 800584e:	6019      	str	r1, [r3, #0]
 8005850:	d1de      	bne.n	8005810 <_free_r+0x24>
 8005852:	6810      	ldr	r0, [r2, #0]
 8005854:	6852      	ldr	r2, [r2, #4]
 8005856:	4401      	add	r1, r0
 8005858:	6019      	str	r1, [r3, #0]
 800585a:	605a      	str	r2, [r3, #4]
 800585c:	e7d8      	b.n	8005810 <_free_r+0x24>
 800585e:	d902      	bls.n	8005866 <_free_r+0x7a>
 8005860:	230c      	movs	r3, #12
 8005862:	602b      	str	r3, [r5, #0]
 8005864:	e7d4      	b.n	8005810 <_free_r+0x24>
 8005866:	6820      	ldr	r0, [r4, #0]
 8005868:	1821      	adds	r1, r4, r0
 800586a:	428a      	cmp	r2, r1
 800586c:	bf01      	itttt	eq
 800586e:	6811      	ldreq	r1, [r2, #0]
 8005870:	6852      	ldreq	r2, [r2, #4]
 8005872:	1809      	addeq	r1, r1, r0
 8005874:	6021      	streq	r1, [r4, #0]
 8005876:	6062      	str	r2, [r4, #4]
 8005878:	605c      	str	r4, [r3, #4]
 800587a:	e7c9      	b.n	8005810 <_free_r+0x24>
 800587c:	bd38      	pop	{r3, r4, r5, pc}
 800587e:	bf00      	nop
 8005880:	20000230 	.word	0x20000230

08005884 <_malloc_r>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	1ccd      	adds	r5, r1, #3
 8005888:	f025 0503 	bic.w	r5, r5, #3
 800588c:	3508      	adds	r5, #8
 800588e:	2d0c      	cmp	r5, #12
 8005890:	bf38      	it	cc
 8005892:	250c      	movcc	r5, #12
 8005894:	2d00      	cmp	r5, #0
 8005896:	4606      	mov	r6, r0
 8005898:	db01      	blt.n	800589e <_malloc_r+0x1a>
 800589a:	42a9      	cmp	r1, r5
 800589c:	d903      	bls.n	80058a6 <_malloc_r+0x22>
 800589e:	230c      	movs	r3, #12
 80058a0:	6033      	str	r3, [r6, #0]
 80058a2:	2000      	movs	r0, #0
 80058a4:	bd70      	pop	{r4, r5, r6, pc}
 80058a6:	f001 f812 	bl	80068ce <__malloc_lock>
 80058aa:	4a21      	ldr	r2, [pc, #132]	; (8005930 <_malloc_r+0xac>)
 80058ac:	6814      	ldr	r4, [r2, #0]
 80058ae:	4621      	mov	r1, r4
 80058b0:	b991      	cbnz	r1, 80058d8 <_malloc_r+0x54>
 80058b2:	4c20      	ldr	r4, [pc, #128]	; (8005934 <_malloc_r+0xb0>)
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	b91b      	cbnz	r3, 80058c0 <_malloc_r+0x3c>
 80058b8:	4630      	mov	r0, r6
 80058ba:	f000 fe17 	bl	80064ec <_sbrk_r>
 80058be:	6020      	str	r0, [r4, #0]
 80058c0:	4629      	mov	r1, r5
 80058c2:	4630      	mov	r0, r6
 80058c4:	f000 fe12 	bl	80064ec <_sbrk_r>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d124      	bne.n	8005916 <_malloc_r+0x92>
 80058cc:	230c      	movs	r3, #12
 80058ce:	4630      	mov	r0, r6
 80058d0:	6033      	str	r3, [r6, #0]
 80058d2:	f000 fffd 	bl	80068d0 <__malloc_unlock>
 80058d6:	e7e4      	b.n	80058a2 <_malloc_r+0x1e>
 80058d8:	680b      	ldr	r3, [r1, #0]
 80058da:	1b5b      	subs	r3, r3, r5
 80058dc:	d418      	bmi.n	8005910 <_malloc_r+0x8c>
 80058de:	2b0b      	cmp	r3, #11
 80058e0:	d90f      	bls.n	8005902 <_malloc_r+0x7e>
 80058e2:	600b      	str	r3, [r1, #0]
 80058e4:	18cc      	adds	r4, r1, r3
 80058e6:	50cd      	str	r5, [r1, r3]
 80058e8:	4630      	mov	r0, r6
 80058ea:	f000 fff1 	bl	80068d0 <__malloc_unlock>
 80058ee:	f104 000b 	add.w	r0, r4, #11
 80058f2:	1d23      	adds	r3, r4, #4
 80058f4:	f020 0007 	bic.w	r0, r0, #7
 80058f8:	1ac3      	subs	r3, r0, r3
 80058fa:	d0d3      	beq.n	80058a4 <_malloc_r+0x20>
 80058fc:	425a      	negs	r2, r3
 80058fe:	50e2      	str	r2, [r4, r3]
 8005900:	e7d0      	b.n	80058a4 <_malloc_r+0x20>
 8005902:	684b      	ldr	r3, [r1, #4]
 8005904:	428c      	cmp	r4, r1
 8005906:	bf16      	itet	ne
 8005908:	6063      	strne	r3, [r4, #4]
 800590a:	6013      	streq	r3, [r2, #0]
 800590c:	460c      	movne	r4, r1
 800590e:	e7eb      	b.n	80058e8 <_malloc_r+0x64>
 8005910:	460c      	mov	r4, r1
 8005912:	6849      	ldr	r1, [r1, #4]
 8005914:	e7cc      	b.n	80058b0 <_malloc_r+0x2c>
 8005916:	1cc4      	adds	r4, r0, #3
 8005918:	f024 0403 	bic.w	r4, r4, #3
 800591c:	42a0      	cmp	r0, r4
 800591e:	d005      	beq.n	800592c <_malloc_r+0xa8>
 8005920:	1a21      	subs	r1, r4, r0
 8005922:	4630      	mov	r0, r6
 8005924:	f000 fde2 	bl	80064ec <_sbrk_r>
 8005928:	3001      	adds	r0, #1
 800592a:	d0cf      	beq.n	80058cc <_malloc_r+0x48>
 800592c:	6025      	str	r5, [r4, #0]
 800592e:	e7db      	b.n	80058e8 <_malloc_r+0x64>
 8005930:	20000230 	.word	0x20000230
 8005934:	20000234 	.word	0x20000234

08005938 <_sungetc_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	1c4b      	adds	r3, r1, #1
 800593c:	4614      	mov	r4, r2
 800593e:	d103      	bne.n	8005948 <_sungetc_r+0x10>
 8005940:	f04f 35ff 	mov.w	r5, #4294967295
 8005944:	4628      	mov	r0, r5
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	8993      	ldrh	r3, [r2, #12]
 800594a:	b2cd      	uxtb	r5, r1
 800594c:	f023 0320 	bic.w	r3, r3, #32
 8005950:	8193      	strh	r3, [r2, #12]
 8005952:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005954:	6852      	ldr	r2, [r2, #4]
 8005956:	b18b      	cbz	r3, 800597c <_sungetc_r+0x44>
 8005958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800595a:	4293      	cmp	r3, r2
 800595c:	dd08      	ble.n	8005970 <_sungetc_r+0x38>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	1e5a      	subs	r2, r3, #1
 8005962:	6022      	str	r2, [r4, #0]
 8005964:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005968:	6863      	ldr	r3, [r4, #4]
 800596a:	3301      	adds	r3, #1
 800596c:	6063      	str	r3, [r4, #4]
 800596e:	e7e9      	b.n	8005944 <_sungetc_r+0xc>
 8005970:	4621      	mov	r1, r4
 8005972:	f000 ff15 	bl	80067a0 <__submore>
 8005976:	2800      	cmp	r0, #0
 8005978:	d0f1      	beq.n	800595e <_sungetc_r+0x26>
 800597a:	e7e1      	b.n	8005940 <_sungetc_r+0x8>
 800597c:	6921      	ldr	r1, [r4, #16]
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	b151      	cbz	r1, 8005998 <_sungetc_r+0x60>
 8005982:	4299      	cmp	r1, r3
 8005984:	d208      	bcs.n	8005998 <_sungetc_r+0x60>
 8005986:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800598a:	42a9      	cmp	r1, r5
 800598c:	d104      	bne.n	8005998 <_sungetc_r+0x60>
 800598e:	3b01      	subs	r3, #1
 8005990:	3201      	adds	r2, #1
 8005992:	6023      	str	r3, [r4, #0]
 8005994:	6062      	str	r2, [r4, #4]
 8005996:	e7d5      	b.n	8005944 <_sungetc_r+0xc>
 8005998:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800599c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059a0:	6363      	str	r3, [r4, #52]	; 0x34
 80059a2:	2303      	movs	r3, #3
 80059a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80059a6:	4623      	mov	r3, r4
 80059a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	2301      	movs	r3, #1
 80059b0:	e7dc      	b.n	800596c <_sungetc_r+0x34>

080059b2 <__ssrefill_r>:
 80059b2:	b510      	push	{r4, lr}
 80059b4:	460c      	mov	r4, r1
 80059b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80059b8:	b169      	cbz	r1, 80059d6 <__ssrefill_r+0x24>
 80059ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059be:	4299      	cmp	r1, r3
 80059c0:	d001      	beq.n	80059c6 <__ssrefill_r+0x14>
 80059c2:	f7ff ff13 	bl	80057ec <_free_r>
 80059c6:	2000      	movs	r0, #0
 80059c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059ca:	6360      	str	r0, [r4, #52]	; 0x34
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	b113      	cbz	r3, 80059d6 <__ssrefill_r+0x24>
 80059d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059d2:	6023      	str	r3, [r4, #0]
 80059d4:	bd10      	pop	{r4, pc}
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	2300      	movs	r3, #0
 80059e0:	6063      	str	r3, [r4, #4]
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	f043 0320 	orr.w	r3, r3, #32
 80059e8:	81a3      	strh	r3, [r4, #12]
 80059ea:	e7f3      	b.n	80059d4 <__ssrefill_r+0x22>

080059ec <__ssvfiscanf_r>:
 80059ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f0:	460c      	mov	r4, r1
 80059f2:	2100      	movs	r1, #0
 80059f4:	4606      	mov	r6, r0
 80059f6:	4692      	mov	sl, r2
 80059f8:	270a      	movs	r7, #10
 80059fa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80059fe:	9144      	str	r1, [sp, #272]	; 0x110
 8005a00:	9145      	str	r1, [sp, #276]	; 0x114
 8005a02:	499e      	ldr	r1, [pc, #632]	; (8005c7c <__ssvfiscanf_r+0x290>)
 8005a04:	f10d 0804 	add.w	r8, sp, #4
 8005a08:	91a0      	str	r1, [sp, #640]	; 0x280
 8005a0a:	499d      	ldr	r1, [pc, #628]	; (8005c80 <__ssvfiscanf_r+0x294>)
 8005a0c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8005c84 <__ssvfiscanf_r+0x298>
 8005a10:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005a14:	91a1      	str	r1, [sp, #644]	; 0x284
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 812a 	beq.w	8005c76 <__ssvfiscanf_r+0x28a>
 8005a22:	4655      	mov	r5, sl
 8005a24:	f000 ff1a 	bl	800685c <__locale_ctype_ptr>
 8005a28:	f815 bb01 	ldrb.w	fp, [r5], #1
 8005a2c:	4458      	add	r0, fp
 8005a2e:	7843      	ldrb	r3, [r0, #1]
 8005a30:	f013 0308 	ands.w	r3, r3, #8
 8005a34:	d01c      	beq.n	8005a70 <__ssvfiscanf_r+0x84>
 8005a36:	6863      	ldr	r3, [r4, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	dd12      	ble.n	8005a62 <__ssvfiscanf_r+0x76>
 8005a3c:	f000 ff0e 	bl	800685c <__locale_ctype_ptr>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	4410      	add	r0, r2
 8005a46:	7842      	ldrb	r2, [r0, #1]
 8005a48:	0712      	lsls	r2, r2, #28
 8005a4a:	d401      	bmi.n	8005a50 <__ssvfiscanf_r+0x64>
 8005a4c:	46aa      	mov	sl, r5
 8005a4e:	e7e3      	b.n	8005a18 <__ssvfiscanf_r+0x2c>
 8005a50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005a52:	3301      	adds	r3, #1
 8005a54:	3201      	adds	r2, #1
 8005a56:	9245      	str	r2, [sp, #276]	; 0x114
 8005a58:	6862      	ldr	r2, [r4, #4]
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	3a01      	subs	r2, #1
 8005a5e:	6062      	str	r2, [r4, #4]
 8005a60:	e7e9      	b.n	8005a36 <__ssvfiscanf_r+0x4a>
 8005a62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005a64:	4621      	mov	r1, r4
 8005a66:	4630      	mov	r0, r6
 8005a68:	4798      	blx	r3
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d0e6      	beq.n	8005a3c <__ssvfiscanf_r+0x50>
 8005a6e:	e7ed      	b.n	8005a4c <__ssvfiscanf_r+0x60>
 8005a70:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8005a74:	f040 8082 	bne.w	8005b7c <__ssvfiscanf_r+0x190>
 8005a78:	9343      	str	r3, [sp, #268]	; 0x10c
 8005a7a:	9341      	str	r3, [sp, #260]	; 0x104
 8005a7c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005a80:	2b2a      	cmp	r3, #42	; 0x2a
 8005a82:	d103      	bne.n	8005a8c <__ssvfiscanf_r+0xa0>
 8005a84:	2310      	movs	r3, #16
 8005a86:	f10a 0502 	add.w	r5, sl, #2
 8005a8a:	9341      	str	r3, [sp, #260]	; 0x104
 8005a8c:	46aa      	mov	sl, r5
 8005a8e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005a92:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005a96:	2a09      	cmp	r2, #9
 8005a98:	d922      	bls.n	8005ae0 <__ssvfiscanf_r+0xf4>
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	4879      	ldr	r0, [pc, #484]	; (8005c84 <__ssvfiscanf_r+0x298>)
 8005a9e:	f000 fefd 	bl	800689c <memchr>
 8005aa2:	b138      	cbz	r0, 8005ab4 <__ssvfiscanf_r+0xc8>
 8005aa4:	eba0 0309 	sub.w	r3, r0, r9
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	46aa      	mov	sl, r5
 8005aac:	4098      	lsls	r0, r3
 8005aae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ab0:	4318      	orrs	r0, r3
 8005ab2:	9041      	str	r0, [sp, #260]	; 0x104
 8005ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab8:	f10a 0501 	add.w	r5, sl, #1
 8005abc:	2b67      	cmp	r3, #103	; 0x67
 8005abe:	d82b      	bhi.n	8005b18 <__ssvfiscanf_r+0x12c>
 8005ac0:	2b65      	cmp	r3, #101	; 0x65
 8005ac2:	f080 809f 	bcs.w	8005c04 <__ssvfiscanf_r+0x218>
 8005ac6:	2b47      	cmp	r3, #71	; 0x47
 8005ac8:	d810      	bhi.n	8005aec <__ssvfiscanf_r+0x100>
 8005aca:	2b45      	cmp	r3, #69	; 0x45
 8005acc:	f080 809a 	bcs.w	8005c04 <__ssvfiscanf_r+0x218>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d06c      	beq.n	8005bae <__ssvfiscanf_r+0x1c2>
 8005ad4:	2b25      	cmp	r3, #37	; 0x25
 8005ad6:	d051      	beq.n	8005b7c <__ssvfiscanf_r+0x190>
 8005ad8:	2303      	movs	r3, #3
 8005ada:	9742      	str	r7, [sp, #264]	; 0x108
 8005adc:	9347      	str	r3, [sp, #284]	; 0x11c
 8005ade:	e027      	b.n	8005b30 <__ssvfiscanf_r+0x144>
 8005ae0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005ae2:	fb07 1303 	mla	r3, r7, r3, r1
 8005ae6:	3b30      	subs	r3, #48	; 0x30
 8005ae8:	9343      	str	r3, [sp, #268]	; 0x10c
 8005aea:	e7cf      	b.n	8005a8c <__ssvfiscanf_r+0xa0>
 8005aec:	2b5b      	cmp	r3, #91	; 0x5b
 8005aee:	d06a      	beq.n	8005bc6 <__ssvfiscanf_r+0x1da>
 8005af0:	d80c      	bhi.n	8005b0c <__ssvfiscanf_r+0x120>
 8005af2:	2b58      	cmp	r3, #88	; 0x58
 8005af4:	d1f0      	bne.n	8005ad8 <__ssvfiscanf_r+0xec>
 8005af6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afc:	9241      	str	r2, [sp, #260]	; 0x104
 8005afe:	2210      	movs	r2, #16
 8005b00:	9242      	str	r2, [sp, #264]	; 0x108
 8005b02:	2b6e      	cmp	r3, #110	; 0x6e
 8005b04:	bf8c      	ite	hi
 8005b06:	2304      	movhi	r3, #4
 8005b08:	2303      	movls	r3, #3
 8005b0a:	e010      	b.n	8005b2e <__ssvfiscanf_r+0x142>
 8005b0c:	2b63      	cmp	r3, #99	; 0x63
 8005b0e:	d065      	beq.n	8005bdc <__ssvfiscanf_r+0x1f0>
 8005b10:	2b64      	cmp	r3, #100	; 0x64
 8005b12:	d1e1      	bne.n	8005ad8 <__ssvfiscanf_r+0xec>
 8005b14:	9742      	str	r7, [sp, #264]	; 0x108
 8005b16:	e7f4      	b.n	8005b02 <__ssvfiscanf_r+0x116>
 8005b18:	2b70      	cmp	r3, #112	; 0x70
 8005b1a:	d04b      	beq.n	8005bb4 <__ssvfiscanf_r+0x1c8>
 8005b1c:	d826      	bhi.n	8005b6c <__ssvfiscanf_r+0x180>
 8005b1e:	2b6e      	cmp	r3, #110	; 0x6e
 8005b20:	d062      	beq.n	8005be8 <__ssvfiscanf_r+0x1fc>
 8005b22:	d84c      	bhi.n	8005bbe <__ssvfiscanf_r+0x1d2>
 8005b24:	2b69      	cmp	r3, #105	; 0x69
 8005b26:	d1d7      	bne.n	8005ad8 <__ssvfiscanf_r+0xec>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	9342      	str	r3, [sp, #264]	; 0x108
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005b30:	6863      	ldr	r3, [r4, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	dd68      	ble.n	8005c08 <__ssvfiscanf_r+0x21c>
 8005b36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005b38:	0659      	lsls	r1, r3, #25
 8005b3a:	d407      	bmi.n	8005b4c <__ssvfiscanf_r+0x160>
 8005b3c:	f000 fe8e 	bl	800685c <__locale_ctype_ptr>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	4410      	add	r0, r2
 8005b46:	7842      	ldrb	r2, [r0, #1]
 8005b48:	0712      	lsls	r2, r2, #28
 8005b4a:	d464      	bmi.n	8005c16 <__ssvfiscanf_r+0x22a>
 8005b4c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	dc73      	bgt.n	8005c3a <__ssvfiscanf_r+0x24e>
 8005b52:	466b      	mov	r3, sp
 8005b54:	4622      	mov	r2, r4
 8005b56:	a941      	add	r1, sp, #260	; 0x104
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f000 fb5d 	bl	8006218 <_scanf_chars>
 8005b5e:	2801      	cmp	r0, #1
 8005b60:	f000 8089 	beq.w	8005c76 <__ssvfiscanf_r+0x28a>
 8005b64:	2802      	cmp	r0, #2
 8005b66:	f47f af71 	bne.w	8005a4c <__ssvfiscanf_r+0x60>
 8005b6a:	e01d      	b.n	8005ba8 <__ssvfiscanf_r+0x1bc>
 8005b6c:	2b75      	cmp	r3, #117	; 0x75
 8005b6e:	d0d1      	beq.n	8005b14 <__ssvfiscanf_r+0x128>
 8005b70:	2b78      	cmp	r3, #120	; 0x78
 8005b72:	d0c0      	beq.n	8005af6 <__ssvfiscanf_r+0x10a>
 8005b74:	2b73      	cmp	r3, #115	; 0x73
 8005b76:	d1af      	bne.n	8005ad8 <__ssvfiscanf_r+0xec>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e7d8      	b.n	8005b2e <__ssvfiscanf_r+0x142>
 8005b7c:	6863      	ldr	r3, [r4, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	dd0c      	ble.n	8005b9c <__ssvfiscanf_r+0x1b0>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	781a      	ldrb	r2, [r3, #0]
 8005b86:	455a      	cmp	r2, fp
 8005b88:	d175      	bne.n	8005c76 <__ssvfiscanf_r+0x28a>
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	6862      	ldr	r2, [r4, #4]
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005b92:	3a01      	subs	r2, #1
 8005b94:	3301      	adds	r3, #1
 8005b96:	6062      	str	r2, [r4, #4]
 8005b98:	9345      	str	r3, [sp, #276]	; 0x114
 8005b9a:	e757      	b.n	8005a4c <__ssvfiscanf_r+0x60>
 8005b9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	4798      	blx	r3
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d0ec      	beq.n	8005b82 <__ssvfiscanf_r+0x196>
 8005ba8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d159      	bne.n	8005c62 <__ssvfiscanf_r+0x276>
 8005bae:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb2:	e05c      	b.n	8005c6e <__ssvfiscanf_r+0x282>
 8005bb4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005bb6:	f042 0220 	orr.w	r2, r2, #32
 8005bba:	9241      	str	r2, [sp, #260]	; 0x104
 8005bbc:	e79b      	b.n	8005af6 <__ssvfiscanf_r+0x10a>
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	9342      	str	r3, [sp, #264]	; 0x108
 8005bc2:	2304      	movs	r3, #4
 8005bc4:	e7b3      	b.n	8005b2e <__ssvfiscanf_r+0x142>
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4640      	mov	r0, r8
 8005bca:	f000 fc9f 	bl	800650c <__sccl>
 8005bce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd6:	9341      	str	r3, [sp, #260]	; 0x104
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e7a8      	b.n	8005b2e <__ssvfiscanf_r+0x142>
 8005bdc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be2:	9341      	str	r3, [sp, #260]	; 0x104
 8005be4:	2300      	movs	r3, #0
 8005be6:	e7a2      	b.n	8005b2e <__ssvfiscanf_r+0x142>
 8005be8:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005bea:	06c3      	lsls	r3, r0, #27
 8005bec:	f53f af2e 	bmi.w	8005a4c <__ssvfiscanf_r+0x60>
 8005bf0:	9b00      	ldr	r3, [sp, #0]
 8005bf2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005bf4:	1d19      	adds	r1, r3, #4
 8005bf6:	9100      	str	r1, [sp, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	07c0      	lsls	r0, r0, #31
 8005bfc:	bf4c      	ite	mi
 8005bfe:	801a      	strhmi	r2, [r3, #0]
 8005c00:	601a      	strpl	r2, [r3, #0]
 8005c02:	e723      	b.n	8005a4c <__ssvfiscanf_r+0x60>
 8005c04:	2305      	movs	r3, #5
 8005c06:	e792      	b.n	8005b2e <__ssvfiscanf_r+0x142>
 8005c08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	4798      	blx	r3
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d090      	beq.n	8005b36 <__ssvfiscanf_r+0x14a>
 8005c14:	e7c8      	b.n	8005ba8 <__ssvfiscanf_r+0x1bc>
 8005c16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005c18:	3201      	adds	r2, #1
 8005c1a:	9245      	str	r2, [sp, #276]	; 0x114
 8005c1c:	6862      	ldr	r2, [r4, #4]
 8005c1e:	3a01      	subs	r2, #1
 8005c20:	2a00      	cmp	r2, #0
 8005c22:	6062      	str	r2, [r4, #4]
 8005c24:	dd02      	ble.n	8005c2c <__ssvfiscanf_r+0x240>
 8005c26:	3301      	adds	r3, #1
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	e787      	b.n	8005b3c <__ssvfiscanf_r+0x150>
 8005c2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4630      	mov	r0, r6
 8005c32:	4798      	blx	r3
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d081      	beq.n	8005b3c <__ssvfiscanf_r+0x150>
 8005c38:	e7b6      	b.n	8005ba8 <__ssvfiscanf_r+0x1bc>
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	dc06      	bgt.n	8005c4c <__ssvfiscanf_r+0x260>
 8005c3e:	466b      	mov	r3, sp
 8005c40:	4622      	mov	r2, r4
 8005c42:	a941      	add	r1, sp, #260	; 0x104
 8005c44:	4630      	mov	r0, r6
 8005c46:	f000 fb49 	bl	80062dc <_scanf_i>
 8005c4a:	e788      	b.n	8005b5e <__ssvfiscanf_r+0x172>
 8005c4c:	4b0e      	ldr	r3, [pc, #56]	; (8005c88 <__ssvfiscanf_r+0x29c>)
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f43f aefc 	beq.w	8005a4c <__ssvfiscanf_r+0x60>
 8005c54:	466b      	mov	r3, sp
 8005c56:	4622      	mov	r2, r4
 8005c58:	a941      	add	r1, sp, #260	; 0x104
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f3af 8000 	nop.w
 8005c60:	e77d      	b.n	8005b5e <__ssvfiscanf_r+0x172>
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c68:	bf18      	it	ne
 8005c6a:	f04f 30ff 	movne.w	r0, #4294967295
 8005c6e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c76:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005c78:	e7f9      	b.n	8005c6e <__ssvfiscanf_r+0x282>
 8005c7a:	bf00      	nop
 8005c7c:	08005939 	.word	0x08005939
 8005c80:	080059b3 	.word	0x080059b3
 8005c84:	08006ff0 	.word	0x08006ff0
 8005c88:	00000000 	.word	0x00000000

08005c8c <__sfputc_r>:
 8005c8c:	6893      	ldr	r3, [r2, #8]
 8005c8e:	b410      	push	{r4}
 8005c90:	3b01      	subs	r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	6093      	str	r3, [r2, #8]
 8005c96:	da07      	bge.n	8005ca8 <__sfputc_r+0x1c>
 8005c98:	6994      	ldr	r4, [r2, #24]
 8005c9a:	42a3      	cmp	r3, r4
 8005c9c:	db01      	blt.n	8005ca2 <__sfputc_r+0x16>
 8005c9e:	290a      	cmp	r1, #10
 8005ca0:	d102      	bne.n	8005ca8 <__sfputc_r+0x1c>
 8005ca2:	bc10      	pop	{r4}
 8005ca4:	f7ff bad0 	b.w	8005248 <__swbuf_r>
 8005ca8:	6813      	ldr	r3, [r2, #0]
 8005caa:	1c58      	adds	r0, r3, #1
 8005cac:	6010      	str	r0, [r2, #0]
 8005cae:	7019      	strb	r1, [r3, #0]
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	bc10      	pop	{r4}
 8005cb4:	4770      	bx	lr

08005cb6 <__sfputs_r>:
 8005cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb8:	4606      	mov	r6, r0
 8005cba:	460f      	mov	r7, r1
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	18d5      	adds	r5, r2, r3
 8005cc0:	42ac      	cmp	r4, r5
 8005cc2:	d101      	bne.n	8005cc8 <__sfputs_r+0x12>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	e007      	b.n	8005cd8 <__sfputs_r+0x22>
 8005cc8:	463a      	mov	r2, r7
 8005cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cce:	4630      	mov	r0, r6
 8005cd0:	f7ff ffdc 	bl	8005c8c <__sfputc_r>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d1f3      	bne.n	8005cc0 <__sfputs_r+0xa>
 8005cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cdc <_vfiprintf_r>:
 8005cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	b09d      	sub	sp, #116	; 0x74
 8005ce4:	4617      	mov	r7, r2
 8005ce6:	461d      	mov	r5, r3
 8005ce8:	4606      	mov	r6, r0
 8005cea:	b118      	cbz	r0, 8005cf4 <_vfiprintf_r+0x18>
 8005cec:	6983      	ldr	r3, [r0, #24]
 8005cee:	b90b      	cbnz	r3, 8005cf4 <_vfiprintf_r+0x18>
 8005cf0:	f7ff fc7c 	bl	80055ec <__sinit>
 8005cf4:	4b7c      	ldr	r3, [pc, #496]	; (8005ee8 <_vfiprintf_r+0x20c>)
 8005cf6:	429c      	cmp	r4, r3
 8005cf8:	d158      	bne.n	8005dac <_vfiprintf_r+0xd0>
 8005cfa:	6874      	ldr	r4, [r6, #4]
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	0718      	lsls	r0, r3, #28
 8005d00:	d55e      	bpl.n	8005dc0 <_vfiprintf_r+0xe4>
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d05b      	beq.n	8005dc0 <_vfiprintf_r+0xe4>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d0c:	2320      	movs	r3, #32
 8005d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d12:	2330      	movs	r3, #48	; 0x30
 8005d14:	f04f 0b01 	mov.w	fp, #1
 8005d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d1c:	9503      	str	r5, [sp, #12]
 8005d1e:	46b8      	mov	r8, r7
 8005d20:	4645      	mov	r5, r8
 8005d22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d26:	b10b      	cbz	r3, 8005d2c <_vfiprintf_r+0x50>
 8005d28:	2b25      	cmp	r3, #37	; 0x25
 8005d2a:	d154      	bne.n	8005dd6 <_vfiprintf_r+0xfa>
 8005d2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005d30:	d00b      	beq.n	8005d4a <_vfiprintf_r+0x6e>
 8005d32:	4653      	mov	r3, sl
 8005d34:	463a      	mov	r2, r7
 8005d36:	4621      	mov	r1, r4
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7ff ffbc 	bl	8005cb6 <__sfputs_r>
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f000 80c2 	beq.w	8005ec8 <_vfiprintf_r+0x1ec>
 8005d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d46:	4453      	add	r3, sl
 8005d48:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4a:	f898 3000 	ldrb.w	r3, [r8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 80ba 	beq.w	8005ec8 <_vfiprintf_r+0x1ec>
 8005d54:	2300      	movs	r3, #0
 8005d56:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d5e:	9304      	str	r3, [sp, #16]
 8005d60:	9307      	str	r3, [sp, #28]
 8005d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d66:	931a      	str	r3, [sp, #104]	; 0x68
 8005d68:	46a8      	mov	r8, r5
 8005d6a:	2205      	movs	r2, #5
 8005d6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005d70:	485e      	ldr	r0, [pc, #376]	; (8005eec <_vfiprintf_r+0x210>)
 8005d72:	f000 fd93 	bl	800689c <memchr>
 8005d76:	9b04      	ldr	r3, [sp, #16]
 8005d78:	bb78      	cbnz	r0, 8005dda <_vfiprintf_r+0xfe>
 8005d7a:	06d9      	lsls	r1, r3, #27
 8005d7c:	bf44      	itt	mi
 8005d7e:	2220      	movmi	r2, #32
 8005d80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d84:	071a      	lsls	r2, r3, #28
 8005d86:	bf44      	itt	mi
 8005d88:	222b      	movmi	r2, #43	; 0x2b
 8005d8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d8e:	782a      	ldrb	r2, [r5, #0]
 8005d90:	2a2a      	cmp	r2, #42	; 0x2a
 8005d92:	d02a      	beq.n	8005dea <_vfiprintf_r+0x10e>
 8005d94:	46a8      	mov	r8, r5
 8005d96:	2000      	movs	r0, #0
 8005d98:	250a      	movs	r5, #10
 8005d9a:	9a07      	ldr	r2, [sp, #28]
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005da2:	3b30      	subs	r3, #48	; 0x30
 8005da4:	2b09      	cmp	r3, #9
 8005da6:	d969      	bls.n	8005e7c <_vfiprintf_r+0x1a0>
 8005da8:	b360      	cbz	r0, 8005e04 <_vfiprintf_r+0x128>
 8005daa:	e024      	b.n	8005df6 <_vfiprintf_r+0x11a>
 8005dac:	4b50      	ldr	r3, [pc, #320]	; (8005ef0 <_vfiprintf_r+0x214>)
 8005dae:	429c      	cmp	r4, r3
 8005db0:	d101      	bne.n	8005db6 <_vfiprintf_r+0xda>
 8005db2:	68b4      	ldr	r4, [r6, #8]
 8005db4:	e7a2      	b.n	8005cfc <_vfiprintf_r+0x20>
 8005db6:	4b4f      	ldr	r3, [pc, #316]	; (8005ef4 <_vfiprintf_r+0x218>)
 8005db8:	429c      	cmp	r4, r3
 8005dba:	bf08      	it	eq
 8005dbc:	68f4      	ldreq	r4, [r6, #12]
 8005dbe:	e79d      	b.n	8005cfc <_vfiprintf_r+0x20>
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7ff faa4 	bl	8005310 <__swsetup_r>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d09d      	beq.n	8005d08 <_vfiprintf_r+0x2c>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	b01d      	add	sp, #116	; 0x74
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	46a8      	mov	r8, r5
 8005dd8:	e7a2      	b.n	8005d20 <_vfiprintf_r+0x44>
 8005dda:	4a44      	ldr	r2, [pc, #272]	; (8005eec <_vfiprintf_r+0x210>)
 8005ddc:	4645      	mov	r5, r8
 8005dde:	1a80      	subs	r0, r0, r2
 8005de0:	fa0b f000 	lsl.w	r0, fp, r0
 8005de4:	4318      	orrs	r0, r3
 8005de6:	9004      	str	r0, [sp, #16]
 8005de8:	e7be      	b.n	8005d68 <_vfiprintf_r+0x8c>
 8005dea:	9a03      	ldr	r2, [sp, #12]
 8005dec:	1d11      	adds	r1, r2, #4
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	9103      	str	r1, [sp, #12]
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	db01      	blt.n	8005dfa <_vfiprintf_r+0x11e>
 8005df6:	9207      	str	r2, [sp, #28]
 8005df8:	e004      	b.n	8005e04 <_vfiprintf_r+0x128>
 8005dfa:	4252      	negs	r2, r2
 8005dfc:	f043 0302 	orr.w	r3, r3, #2
 8005e00:	9207      	str	r2, [sp, #28]
 8005e02:	9304      	str	r3, [sp, #16]
 8005e04:	f898 3000 	ldrb.w	r3, [r8]
 8005e08:	2b2e      	cmp	r3, #46	; 0x2e
 8005e0a:	d10e      	bne.n	8005e2a <_vfiprintf_r+0x14e>
 8005e0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005e10:	2b2a      	cmp	r3, #42	; 0x2a
 8005e12:	d138      	bne.n	8005e86 <_vfiprintf_r+0x1aa>
 8005e14:	9b03      	ldr	r3, [sp, #12]
 8005e16:	f108 0802 	add.w	r8, r8, #2
 8005e1a:	1d1a      	adds	r2, r3, #4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	9203      	str	r2, [sp, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bfb8      	it	lt
 8005e24:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e28:	9305      	str	r3, [sp, #20]
 8005e2a:	4d33      	ldr	r5, [pc, #204]	; (8005ef8 <_vfiprintf_r+0x21c>)
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	f898 1000 	ldrb.w	r1, [r8]
 8005e32:	4628      	mov	r0, r5
 8005e34:	f000 fd32 	bl	800689c <memchr>
 8005e38:	b140      	cbz	r0, 8005e4c <_vfiprintf_r+0x170>
 8005e3a:	2340      	movs	r3, #64	; 0x40
 8005e3c:	1b40      	subs	r0, r0, r5
 8005e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e42:	9b04      	ldr	r3, [sp, #16]
 8005e44:	f108 0801 	add.w	r8, r8, #1
 8005e48:	4303      	orrs	r3, r0
 8005e4a:	9304      	str	r3, [sp, #16]
 8005e4c:	f898 1000 	ldrb.w	r1, [r8]
 8005e50:	2206      	movs	r2, #6
 8005e52:	482a      	ldr	r0, [pc, #168]	; (8005efc <_vfiprintf_r+0x220>)
 8005e54:	f108 0701 	add.w	r7, r8, #1
 8005e58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e5c:	f000 fd1e 	bl	800689c <memchr>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d037      	beq.n	8005ed4 <_vfiprintf_r+0x1f8>
 8005e64:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <_vfiprintf_r+0x224>)
 8005e66:	bb1b      	cbnz	r3, 8005eb0 <_vfiprintf_r+0x1d4>
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	3307      	adds	r3, #7
 8005e6c:	f023 0307 	bic.w	r3, r3, #7
 8005e70:	3308      	adds	r3, #8
 8005e72:	9303      	str	r3, [sp, #12]
 8005e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e76:	444b      	add	r3, r9
 8005e78:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7a:	e750      	b.n	8005d1e <_vfiprintf_r+0x42>
 8005e7c:	fb05 3202 	mla	r2, r5, r2, r3
 8005e80:	2001      	movs	r0, #1
 8005e82:	4688      	mov	r8, r1
 8005e84:	e78a      	b.n	8005d9c <_vfiprintf_r+0xc0>
 8005e86:	2300      	movs	r3, #0
 8005e88:	250a      	movs	r5, #10
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	f108 0801 	add.w	r8, r8, #1
 8005e90:	9305      	str	r3, [sp, #20]
 8005e92:	4640      	mov	r0, r8
 8005e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e98:	3a30      	subs	r2, #48	; 0x30
 8005e9a:	2a09      	cmp	r2, #9
 8005e9c:	d903      	bls.n	8005ea6 <_vfiprintf_r+0x1ca>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0c3      	beq.n	8005e2a <_vfiprintf_r+0x14e>
 8005ea2:	9105      	str	r1, [sp, #20]
 8005ea4:	e7c1      	b.n	8005e2a <_vfiprintf_r+0x14e>
 8005ea6:	fb05 2101 	mla	r1, r5, r1, r2
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4680      	mov	r8, r0
 8005eae:	e7f0      	b.n	8005e92 <_vfiprintf_r+0x1b6>
 8005eb0:	ab03      	add	r3, sp, #12
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <_vfiprintf_r+0x228>)
 8005eb8:	a904      	add	r1, sp, #16
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f3af 8000 	nop.w
 8005ec0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ec4:	4681      	mov	r9, r0
 8005ec6:	d1d5      	bne.n	8005e74 <_vfiprintf_r+0x198>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	065b      	lsls	r3, r3, #25
 8005ecc:	f53f af7e 	bmi.w	8005dcc <_vfiprintf_r+0xf0>
 8005ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ed2:	e77d      	b.n	8005dd0 <_vfiprintf_r+0xf4>
 8005ed4:	ab03      	add	r3, sp, #12
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	4622      	mov	r2, r4
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <_vfiprintf_r+0x228>)
 8005edc:	a904      	add	r1, sp, #16
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f000 f888 	bl	8005ff4 <_printf_i>
 8005ee4:	e7ec      	b.n	8005ec0 <_vfiprintf_r+0x1e4>
 8005ee6:	bf00      	nop
 8005ee8:	08006fb0 	.word	0x08006fb0
 8005eec:	08006ff4 	.word	0x08006ff4
 8005ef0:	08006fd0 	.word	0x08006fd0
 8005ef4:	08006f90 	.word	0x08006f90
 8005ef8:	08006ff0 	.word	0x08006ff0
 8005efc:	08006ffa 	.word	0x08006ffa
 8005f00:	00000000 	.word	0x00000000
 8005f04:	08005cb7 	.word	0x08005cb7

08005f08 <_printf_common>:
 8005f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0c:	4691      	mov	r9, r2
 8005f0e:	461f      	mov	r7, r3
 8005f10:	688a      	ldr	r2, [r1, #8]
 8005f12:	690b      	ldr	r3, [r1, #16]
 8005f14:	4606      	mov	r6, r0
 8005f16:	4293      	cmp	r3, r2
 8005f18:	bfb8      	it	lt
 8005f1a:	4613      	movlt	r3, r2
 8005f1c:	f8c9 3000 	str.w	r3, [r9]
 8005f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f24:	460c      	mov	r4, r1
 8005f26:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f2a:	b112      	cbz	r2, 8005f32 <_printf_common+0x2a>
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	f8c9 3000 	str.w	r3, [r9]
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	0699      	lsls	r1, r3, #26
 8005f36:	bf42      	ittt	mi
 8005f38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f3c:	3302      	addmi	r3, #2
 8005f3e:	f8c9 3000 	strmi.w	r3, [r9]
 8005f42:	6825      	ldr	r5, [r4, #0]
 8005f44:	f015 0506 	ands.w	r5, r5, #6
 8005f48:	d107      	bne.n	8005f5a <_printf_common+0x52>
 8005f4a:	f104 0a19 	add.w	sl, r4, #25
 8005f4e:	68e3      	ldr	r3, [r4, #12]
 8005f50:	f8d9 2000 	ldr.w	r2, [r9]
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	42ab      	cmp	r3, r5
 8005f58:	dc29      	bgt.n	8005fae <_printf_common+0xa6>
 8005f5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f5e:	6822      	ldr	r2, [r4, #0]
 8005f60:	3300      	adds	r3, #0
 8005f62:	bf18      	it	ne
 8005f64:	2301      	movne	r3, #1
 8005f66:	0692      	lsls	r2, r2, #26
 8005f68:	d42e      	bmi.n	8005fc8 <_printf_common+0xc0>
 8005f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f6e:	4639      	mov	r1, r7
 8005f70:	4630      	mov	r0, r6
 8005f72:	47c0      	blx	r8
 8005f74:	3001      	adds	r0, #1
 8005f76:	d021      	beq.n	8005fbc <_printf_common+0xb4>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	68e5      	ldr	r5, [r4, #12]
 8005f7c:	f003 0306 	and.w	r3, r3, #6
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	bf18      	it	ne
 8005f84:	2500      	movne	r5, #0
 8005f86:	f8d9 2000 	ldr.w	r2, [r9]
 8005f8a:	f04f 0900 	mov.w	r9, #0
 8005f8e:	bf08      	it	eq
 8005f90:	1aad      	subeq	r5, r5, r2
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	6922      	ldr	r2, [r4, #16]
 8005f96:	bf08      	it	eq
 8005f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	bfc4      	itt	gt
 8005fa0:	1a9b      	subgt	r3, r3, r2
 8005fa2:	18ed      	addgt	r5, r5, r3
 8005fa4:	341a      	adds	r4, #26
 8005fa6:	454d      	cmp	r5, r9
 8005fa8:	d11a      	bne.n	8005fe0 <_printf_common+0xd8>
 8005faa:	2000      	movs	r0, #0
 8005fac:	e008      	b.n	8005fc0 <_printf_common+0xb8>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	4652      	mov	r2, sl
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	47c0      	blx	r8
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d103      	bne.n	8005fc4 <_printf_common+0xbc>
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc4:	3501      	adds	r5, #1
 8005fc6:	e7c2      	b.n	8005f4e <_printf_common+0x46>
 8005fc8:	2030      	movs	r0, #48	; 0x30
 8005fca:	18e1      	adds	r1, r4, r3
 8005fcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fd6:	4422      	add	r2, r4
 8005fd8:	3302      	adds	r3, #2
 8005fda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fde:	e7c4      	b.n	8005f6a <_printf_common+0x62>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	4639      	mov	r1, r7
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	47c0      	blx	r8
 8005fea:	3001      	adds	r0, #1
 8005fec:	d0e6      	beq.n	8005fbc <_printf_common+0xb4>
 8005fee:	f109 0901 	add.w	r9, r9, #1
 8005ff2:	e7d8      	b.n	8005fa6 <_printf_common+0x9e>

08005ff4 <_printf_i>:
 8005ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ff8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	7e09      	ldrb	r1, [r1, #24]
 8006000:	b085      	sub	sp, #20
 8006002:	296e      	cmp	r1, #110	; 0x6e
 8006004:	4617      	mov	r7, r2
 8006006:	4606      	mov	r6, r0
 8006008:	4698      	mov	r8, r3
 800600a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800600c:	f000 80b3 	beq.w	8006176 <_printf_i+0x182>
 8006010:	d822      	bhi.n	8006058 <_printf_i+0x64>
 8006012:	2963      	cmp	r1, #99	; 0x63
 8006014:	d036      	beq.n	8006084 <_printf_i+0x90>
 8006016:	d80a      	bhi.n	800602e <_printf_i+0x3a>
 8006018:	2900      	cmp	r1, #0
 800601a:	f000 80b9 	beq.w	8006190 <_printf_i+0x19c>
 800601e:	2958      	cmp	r1, #88	; 0x58
 8006020:	f000 8083 	beq.w	800612a <_printf_i+0x136>
 8006024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006028:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800602c:	e032      	b.n	8006094 <_printf_i+0xa0>
 800602e:	2964      	cmp	r1, #100	; 0x64
 8006030:	d001      	beq.n	8006036 <_printf_i+0x42>
 8006032:	2969      	cmp	r1, #105	; 0x69
 8006034:	d1f6      	bne.n	8006024 <_printf_i+0x30>
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	6813      	ldr	r3, [r2, #0]
 800603a:	0605      	lsls	r5, r0, #24
 800603c:	f103 0104 	add.w	r1, r3, #4
 8006040:	d52a      	bpl.n	8006098 <_printf_i+0xa4>
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6011      	str	r1, [r2, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	da03      	bge.n	8006052 <_printf_i+0x5e>
 800604a:	222d      	movs	r2, #45	; 0x2d
 800604c:	425b      	negs	r3, r3
 800604e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006052:	486f      	ldr	r0, [pc, #444]	; (8006210 <_printf_i+0x21c>)
 8006054:	220a      	movs	r2, #10
 8006056:	e039      	b.n	80060cc <_printf_i+0xd8>
 8006058:	2973      	cmp	r1, #115	; 0x73
 800605a:	f000 809d 	beq.w	8006198 <_printf_i+0x1a4>
 800605e:	d808      	bhi.n	8006072 <_printf_i+0x7e>
 8006060:	296f      	cmp	r1, #111	; 0x6f
 8006062:	d020      	beq.n	80060a6 <_printf_i+0xb2>
 8006064:	2970      	cmp	r1, #112	; 0x70
 8006066:	d1dd      	bne.n	8006024 <_printf_i+0x30>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	f043 0320 	orr.w	r3, r3, #32
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	e003      	b.n	800607a <_printf_i+0x86>
 8006072:	2975      	cmp	r1, #117	; 0x75
 8006074:	d017      	beq.n	80060a6 <_printf_i+0xb2>
 8006076:	2978      	cmp	r1, #120	; 0x78
 8006078:	d1d4      	bne.n	8006024 <_printf_i+0x30>
 800607a:	2378      	movs	r3, #120	; 0x78
 800607c:	4865      	ldr	r0, [pc, #404]	; (8006214 <_printf_i+0x220>)
 800607e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006082:	e055      	b.n	8006130 <_printf_i+0x13c>
 8006084:	6813      	ldr	r3, [r2, #0]
 8006086:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800608a:	1d19      	adds	r1, r3, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6011      	str	r1, [r2, #0]
 8006090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006094:	2301      	movs	r3, #1
 8006096:	e08c      	b.n	80061b2 <_printf_i+0x1be>
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800609e:	6011      	str	r1, [r2, #0]
 80060a0:	bf18      	it	ne
 80060a2:	b21b      	sxthne	r3, r3
 80060a4:	e7cf      	b.n	8006046 <_printf_i+0x52>
 80060a6:	6813      	ldr	r3, [r2, #0]
 80060a8:	6825      	ldr	r5, [r4, #0]
 80060aa:	1d18      	adds	r0, r3, #4
 80060ac:	6010      	str	r0, [r2, #0]
 80060ae:	0628      	lsls	r0, r5, #24
 80060b0:	d501      	bpl.n	80060b6 <_printf_i+0xc2>
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	e002      	b.n	80060bc <_printf_i+0xc8>
 80060b6:	0668      	lsls	r0, r5, #25
 80060b8:	d5fb      	bpl.n	80060b2 <_printf_i+0xbe>
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	296f      	cmp	r1, #111	; 0x6f
 80060be:	bf14      	ite	ne
 80060c0:	220a      	movne	r2, #10
 80060c2:	2208      	moveq	r2, #8
 80060c4:	4852      	ldr	r0, [pc, #328]	; (8006210 <_printf_i+0x21c>)
 80060c6:	2100      	movs	r1, #0
 80060c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060cc:	6865      	ldr	r5, [r4, #4]
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	60a5      	str	r5, [r4, #8]
 80060d2:	f2c0 8095 	blt.w	8006200 <_printf_i+0x20c>
 80060d6:	6821      	ldr	r1, [r4, #0]
 80060d8:	f021 0104 	bic.w	r1, r1, #4
 80060dc:	6021      	str	r1, [r4, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d13d      	bne.n	800615e <_printf_i+0x16a>
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	f040 808e 	bne.w	8006204 <_printf_i+0x210>
 80060e8:	4665      	mov	r5, ip
 80060ea:	2a08      	cmp	r2, #8
 80060ec:	d10b      	bne.n	8006106 <_printf_i+0x112>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	07db      	lsls	r3, r3, #31
 80060f2:	d508      	bpl.n	8006106 <_printf_i+0x112>
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	6862      	ldr	r2, [r4, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	bfde      	ittt	le
 80060fc:	2330      	movle	r3, #48	; 0x30
 80060fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006102:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006106:	ebac 0305 	sub.w	r3, ip, r5
 800610a:	6123      	str	r3, [r4, #16]
 800610c:	f8cd 8000 	str.w	r8, [sp]
 8006110:	463b      	mov	r3, r7
 8006112:	aa03      	add	r2, sp, #12
 8006114:	4621      	mov	r1, r4
 8006116:	4630      	mov	r0, r6
 8006118:	f7ff fef6 	bl	8005f08 <_printf_common>
 800611c:	3001      	adds	r0, #1
 800611e:	d14d      	bne.n	80061bc <_printf_i+0x1c8>
 8006120:	f04f 30ff 	mov.w	r0, #4294967295
 8006124:	b005      	add	sp, #20
 8006126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800612a:	4839      	ldr	r0, [pc, #228]	; (8006210 <_printf_i+0x21c>)
 800612c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006130:	6813      	ldr	r3, [r2, #0]
 8006132:	6821      	ldr	r1, [r4, #0]
 8006134:	1d1d      	adds	r5, r3, #4
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6015      	str	r5, [r2, #0]
 800613a:	060a      	lsls	r2, r1, #24
 800613c:	d50b      	bpl.n	8006156 <_printf_i+0x162>
 800613e:	07ca      	lsls	r2, r1, #31
 8006140:	bf44      	itt	mi
 8006142:	f041 0120 	orrmi.w	r1, r1, #32
 8006146:	6021      	strmi	r1, [r4, #0]
 8006148:	b91b      	cbnz	r3, 8006152 <_printf_i+0x15e>
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	f022 0220 	bic.w	r2, r2, #32
 8006150:	6022      	str	r2, [r4, #0]
 8006152:	2210      	movs	r2, #16
 8006154:	e7b7      	b.n	80060c6 <_printf_i+0xd2>
 8006156:	064d      	lsls	r5, r1, #25
 8006158:	bf48      	it	mi
 800615a:	b29b      	uxthmi	r3, r3
 800615c:	e7ef      	b.n	800613e <_printf_i+0x14a>
 800615e:	4665      	mov	r5, ip
 8006160:	fbb3 f1f2 	udiv	r1, r3, r2
 8006164:	fb02 3311 	mls	r3, r2, r1, r3
 8006168:	5cc3      	ldrb	r3, [r0, r3]
 800616a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800616e:	460b      	mov	r3, r1
 8006170:	2900      	cmp	r1, #0
 8006172:	d1f5      	bne.n	8006160 <_printf_i+0x16c>
 8006174:	e7b9      	b.n	80060ea <_printf_i+0xf6>
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	6825      	ldr	r5, [r4, #0]
 800617a:	1d18      	adds	r0, r3, #4
 800617c:	6961      	ldr	r1, [r4, #20]
 800617e:	6010      	str	r0, [r2, #0]
 8006180:	0628      	lsls	r0, r5, #24
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	d501      	bpl.n	800618a <_printf_i+0x196>
 8006186:	6019      	str	r1, [r3, #0]
 8006188:	e002      	b.n	8006190 <_printf_i+0x19c>
 800618a:	066a      	lsls	r2, r5, #25
 800618c:	d5fb      	bpl.n	8006186 <_printf_i+0x192>
 800618e:	8019      	strh	r1, [r3, #0]
 8006190:	2300      	movs	r3, #0
 8006192:	4665      	mov	r5, ip
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	e7b9      	b.n	800610c <_printf_i+0x118>
 8006198:	6813      	ldr	r3, [r2, #0]
 800619a:	1d19      	adds	r1, r3, #4
 800619c:	6011      	str	r1, [r2, #0]
 800619e:	681d      	ldr	r5, [r3, #0]
 80061a0:	6862      	ldr	r2, [r4, #4]
 80061a2:	2100      	movs	r1, #0
 80061a4:	4628      	mov	r0, r5
 80061a6:	f000 fb79 	bl	800689c <memchr>
 80061aa:	b108      	cbz	r0, 80061b0 <_printf_i+0x1bc>
 80061ac:	1b40      	subs	r0, r0, r5
 80061ae:	6060      	str	r0, [r4, #4]
 80061b0:	6863      	ldr	r3, [r4, #4]
 80061b2:	6123      	str	r3, [r4, #16]
 80061b4:	2300      	movs	r3, #0
 80061b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ba:	e7a7      	b.n	800610c <_printf_i+0x118>
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	462a      	mov	r2, r5
 80061c0:	4639      	mov	r1, r7
 80061c2:	4630      	mov	r0, r6
 80061c4:	47c0      	blx	r8
 80061c6:	3001      	adds	r0, #1
 80061c8:	d0aa      	beq.n	8006120 <_printf_i+0x12c>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	079b      	lsls	r3, r3, #30
 80061ce:	d413      	bmi.n	80061f8 <_printf_i+0x204>
 80061d0:	68e0      	ldr	r0, [r4, #12]
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	4298      	cmp	r0, r3
 80061d6:	bfb8      	it	lt
 80061d8:	4618      	movlt	r0, r3
 80061da:	e7a3      	b.n	8006124 <_printf_i+0x130>
 80061dc:	2301      	movs	r3, #1
 80061de:	464a      	mov	r2, r9
 80061e0:	4639      	mov	r1, r7
 80061e2:	4630      	mov	r0, r6
 80061e4:	47c0      	blx	r8
 80061e6:	3001      	adds	r0, #1
 80061e8:	d09a      	beq.n	8006120 <_printf_i+0x12c>
 80061ea:	3501      	adds	r5, #1
 80061ec:	68e3      	ldr	r3, [r4, #12]
 80061ee:	9a03      	ldr	r2, [sp, #12]
 80061f0:	1a9b      	subs	r3, r3, r2
 80061f2:	42ab      	cmp	r3, r5
 80061f4:	dcf2      	bgt.n	80061dc <_printf_i+0x1e8>
 80061f6:	e7eb      	b.n	80061d0 <_printf_i+0x1dc>
 80061f8:	2500      	movs	r5, #0
 80061fa:	f104 0919 	add.w	r9, r4, #25
 80061fe:	e7f5      	b.n	80061ec <_printf_i+0x1f8>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1ac      	bne.n	800615e <_printf_i+0x16a>
 8006204:	7803      	ldrb	r3, [r0, #0]
 8006206:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800620a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800620e:	e76c      	b.n	80060ea <_printf_i+0xf6>
 8006210:	08007001 	.word	0x08007001
 8006214:	08007012 	.word	0x08007012

08006218 <_scanf_chars>:
 8006218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800621c:	4615      	mov	r5, r2
 800621e:	688a      	ldr	r2, [r1, #8]
 8006220:	4680      	mov	r8, r0
 8006222:	460c      	mov	r4, r1
 8006224:	b932      	cbnz	r2, 8006234 <_scanf_chars+0x1c>
 8006226:	698a      	ldr	r2, [r1, #24]
 8006228:	2a00      	cmp	r2, #0
 800622a:	bf14      	ite	ne
 800622c:	f04f 32ff 	movne.w	r2, #4294967295
 8006230:	2201      	moveq	r2, #1
 8006232:	608a      	str	r2, [r1, #8]
 8006234:	2600      	movs	r6, #0
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	06d1      	lsls	r1, r2, #27
 800623a:	bf5f      	itttt	pl
 800623c:	681a      	ldrpl	r2, [r3, #0]
 800623e:	1d11      	addpl	r1, r2, #4
 8006240:	6019      	strpl	r1, [r3, #0]
 8006242:	6817      	ldrpl	r7, [r2, #0]
 8006244:	69a3      	ldr	r3, [r4, #24]
 8006246:	b1db      	cbz	r3, 8006280 <_scanf_chars+0x68>
 8006248:	2b01      	cmp	r3, #1
 800624a:	d107      	bne.n	800625c <_scanf_chars+0x44>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	6962      	ldr	r2, [r4, #20]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	b9a3      	cbnz	r3, 8006280 <_scanf_chars+0x68>
 8006256:	2e00      	cmp	r6, #0
 8006258:	d131      	bne.n	80062be <_scanf_chars+0xa6>
 800625a:	e006      	b.n	800626a <_scanf_chars+0x52>
 800625c:	2b02      	cmp	r3, #2
 800625e:	d007      	beq.n	8006270 <_scanf_chars+0x58>
 8006260:	2e00      	cmp	r6, #0
 8006262:	d12c      	bne.n	80062be <_scanf_chars+0xa6>
 8006264:	69a3      	ldr	r3, [r4, #24]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d129      	bne.n	80062be <_scanf_chars+0xa6>
 800626a:	2001      	movs	r0, #1
 800626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006270:	f000 faf4 	bl	800685c <__locale_ctype_ptr>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	4418      	add	r0, r3
 800627a:	7843      	ldrb	r3, [r0, #1]
 800627c:	071b      	lsls	r3, r3, #28
 800627e:	d4ef      	bmi.n	8006260 <_scanf_chars+0x48>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	3601      	adds	r6, #1
 8006284:	06da      	lsls	r2, r3, #27
 8006286:	bf5e      	ittt	pl
 8006288:	682b      	ldrpl	r3, [r5, #0]
 800628a:	781b      	ldrbpl	r3, [r3, #0]
 800628c:	703b      	strbpl	r3, [r7, #0]
 800628e:	682a      	ldr	r2, [r5, #0]
 8006290:	686b      	ldr	r3, [r5, #4]
 8006292:	f102 0201 	add.w	r2, r2, #1
 8006296:	602a      	str	r2, [r5, #0]
 8006298:	68a2      	ldr	r2, [r4, #8]
 800629a:	f103 33ff 	add.w	r3, r3, #4294967295
 800629e:	f102 32ff 	add.w	r2, r2, #4294967295
 80062a2:	606b      	str	r3, [r5, #4]
 80062a4:	bf58      	it	pl
 80062a6:	3701      	addpl	r7, #1
 80062a8:	60a2      	str	r2, [r4, #8]
 80062aa:	b142      	cbz	r2, 80062be <_scanf_chars+0xa6>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	dcc9      	bgt.n	8006244 <_scanf_chars+0x2c>
 80062b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80062b4:	4629      	mov	r1, r5
 80062b6:	4640      	mov	r0, r8
 80062b8:	4798      	blx	r3
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d0c2      	beq.n	8006244 <_scanf_chars+0x2c>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	f013 0310 	ands.w	r3, r3, #16
 80062c4:	d105      	bne.n	80062d2 <_scanf_chars+0xba>
 80062c6:	68e2      	ldr	r2, [r4, #12]
 80062c8:	3201      	adds	r2, #1
 80062ca:	60e2      	str	r2, [r4, #12]
 80062cc:	69a2      	ldr	r2, [r4, #24]
 80062ce:	b102      	cbz	r2, 80062d2 <_scanf_chars+0xba>
 80062d0:	703b      	strb	r3, [r7, #0]
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	2000      	movs	r0, #0
 80062d6:	441e      	add	r6, r3
 80062d8:	6126      	str	r6, [r4, #16]
 80062da:	e7c7      	b.n	800626c <_scanf_chars+0x54>

080062dc <_scanf_i>:
 80062dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	460c      	mov	r4, r1
 80062e2:	469a      	mov	sl, r3
 80062e4:	4b74      	ldr	r3, [pc, #464]	; (80064b8 <_scanf_i+0x1dc>)
 80062e6:	b087      	sub	sp, #28
 80062e8:	4683      	mov	fp, r0
 80062ea:	4616      	mov	r6, r2
 80062ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80062f0:	ab03      	add	r3, sp, #12
 80062f2:	68a7      	ldr	r7, [r4, #8]
 80062f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80062f8:	4b70      	ldr	r3, [pc, #448]	; (80064bc <_scanf_i+0x1e0>)
 80062fa:	69a1      	ldr	r1, [r4, #24]
 80062fc:	4a70      	ldr	r2, [pc, #448]	; (80064c0 <_scanf_i+0x1e4>)
 80062fe:	f104 091c 	add.w	r9, r4, #28
 8006302:	2903      	cmp	r1, #3
 8006304:	bf08      	it	eq
 8006306:	461a      	moveq	r2, r3
 8006308:	1e7b      	subs	r3, r7, #1
 800630a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800630e:	bf84      	itt	hi
 8006310:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006314:	60a3      	strhi	r3, [r4, #8]
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	bf88      	it	hi
 800631a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800631e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	bf98      	it	ls
 8006326:	2700      	movls	r7, #0
 8006328:	464b      	mov	r3, r9
 800632a:	f04f 0800 	mov.w	r8, #0
 800632e:	9200      	str	r2, [sp, #0]
 8006330:	bf88      	it	hi
 8006332:	197f      	addhi	r7, r7, r5
 8006334:	6831      	ldr	r1, [r6, #0]
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	ab03      	add	r3, sp, #12
 800633a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800633e:	2202      	movs	r2, #2
 8006340:	7809      	ldrb	r1, [r1, #0]
 8006342:	f000 faab 	bl	800689c <memchr>
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	b330      	cbz	r0, 8006398 <_scanf_i+0xbc>
 800634a:	f1b8 0f01 	cmp.w	r8, #1
 800634e:	d15a      	bne.n	8006406 <_scanf_i+0x12a>
 8006350:	6862      	ldr	r2, [r4, #4]
 8006352:	b92a      	cbnz	r2, 8006360 <_scanf_i+0x84>
 8006354:	2108      	movs	r1, #8
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	6061      	str	r1, [r4, #4]
 800635a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635e:	6022      	str	r2, [r4, #0]
 8006360:	6822      	ldr	r2, [r4, #0]
 8006362:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006366:	6022      	str	r2, [r4, #0]
 8006368:	68a2      	ldr	r2, [r4, #8]
 800636a:	1e51      	subs	r1, r2, #1
 800636c:	60a1      	str	r1, [r4, #8]
 800636e:	b19a      	cbz	r2, 8006398 <_scanf_i+0xbc>
 8006370:	6832      	ldr	r2, [r6, #0]
 8006372:	1c5d      	adds	r5, r3, #1
 8006374:	1c51      	adds	r1, r2, #1
 8006376:	6031      	str	r1, [r6, #0]
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	6873      	ldr	r3, [r6, #4]
 800637e:	3b01      	subs	r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	6073      	str	r3, [r6, #4]
 8006384:	dc07      	bgt.n	8006396 <_scanf_i+0xba>
 8006386:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800638a:	4631      	mov	r1, r6
 800638c:	4658      	mov	r0, fp
 800638e:	4798      	blx	r3
 8006390:	2800      	cmp	r0, #0
 8006392:	f040 8087 	bne.w	80064a4 <_scanf_i+0x1c8>
 8006396:	462b      	mov	r3, r5
 8006398:	f108 0801 	add.w	r8, r8, #1
 800639c:	f1b8 0f03 	cmp.w	r8, #3
 80063a0:	d1c8      	bne.n	8006334 <_scanf_i+0x58>
 80063a2:	6862      	ldr	r2, [r4, #4]
 80063a4:	b90a      	cbnz	r2, 80063aa <_scanf_i+0xce>
 80063a6:	220a      	movs	r2, #10
 80063a8:	6062      	str	r2, [r4, #4]
 80063aa:	6862      	ldr	r2, [r4, #4]
 80063ac:	4945      	ldr	r1, [pc, #276]	; (80064c4 <_scanf_i+0x1e8>)
 80063ae:	6960      	ldr	r0, [r4, #20]
 80063b0:	1a89      	subs	r1, r1, r2
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	f000 f8aa 	bl	800650c <__sccl>
 80063b8:	9b01      	ldr	r3, [sp, #4]
 80063ba:	f04f 0800 	mov.w	r8, #0
 80063be:	461d      	mov	r5, r3
 80063c0:	68a3      	ldr	r3, [r4, #8]
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d03b      	beq.n	8006440 <_scanf_i+0x164>
 80063c8:	6831      	ldr	r1, [r6, #0]
 80063ca:	6960      	ldr	r0, [r4, #20]
 80063cc:	f891 c000 	ldrb.w	ip, [r1]
 80063d0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d033      	beq.n	8006440 <_scanf_i+0x164>
 80063d8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80063dc:	d121      	bne.n	8006422 <_scanf_i+0x146>
 80063de:	0510      	lsls	r0, r2, #20
 80063e0:	d51f      	bpl.n	8006422 <_scanf_i+0x146>
 80063e2:	f108 0801 	add.w	r8, r8, #1
 80063e6:	b117      	cbz	r7, 80063ee <_scanf_i+0x112>
 80063e8:	3301      	adds	r3, #1
 80063ea:	3f01      	subs	r7, #1
 80063ec:	60a3      	str	r3, [r4, #8]
 80063ee:	6873      	ldr	r3, [r6, #4]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	6073      	str	r3, [r6, #4]
 80063f6:	dd1c      	ble.n	8006432 <_scanf_i+0x156>
 80063f8:	6833      	ldr	r3, [r6, #0]
 80063fa:	3301      	adds	r3, #1
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	68a3      	ldr	r3, [r4, #8]
 8006400:	3b01      	subs	r3, #1
 8006402:	60a3      	str	r3, [r4, #8]
 8006404:	e7dc      	b.n	80063c0 <_scanf_i+0xe4>
 8006406:	f1b8 0f02 	cmp.w	r8, #2
 800640a:	d1ad      	bne.n	8006368 <_scanf_i+0x8c>
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006412:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006416:	d1bf      	bne.n	8006398 <_scanf_i+0xbc>
 8006418:	2110      	movs	r1, #16
 800641a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800641e:	6061      	str	r1, [r4, #4]
 8006420:	e7a1      	b.n	8006366 <_scanf_i+0x8a>
 8006422:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006426:	6022      	str	r2, [r4, #0]
 8006428:	780b      	ldrb	r3, [r1, #0]
 800642a:	3501      	adds	r5, #1
 800642c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8006430:	e7dd      	b.n	80063ee <_scanf_i+0x112>
 8006432:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006436:	4631      	mov	r1, r6
 8006438:	4658      	mov	r0, fp
 800643a:	4798      	blx	r3
 800643c:	2800      	cmp	r0, #0
 800643e:	d0de      	beq.n	80063fe <_scanf_i+0x122>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	05d9      	lsls	r1, r3, #23
 8006444:	d50c      	bpl.n	8006460 <_scanf_i+0x184>
 8006446:	454d      	cmp	r5, r9
 8006448:	d908      	bls.n	800645c <_scanf_i+0x180>
 800644a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800644e:	1e6f      	subs	r7, r5, #1
 8006450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006454:	4632      	mov	r2, r6
 8006456:	4658      	mov	r0, fp
 8006458:	4798      	blx	r3
 800645a:	463d      	mov	r5, r7
 800645c:	454d      	cmp	r5, r9
 800645e:	d029      	beq.n	80064b4 <_scanf_i+0x1d8>
 8006460:	6822      	ldr	r2, [r4, #0]
 8006462:	f012 0210 	ands.w	r2, r2, #16
 8006466:	d113      	bne.n	8006490 <_scanf_i+0x1b4>
 8006468:	702a      	strb	r2, [r5, #0]
 800646a:	6863      	ldr	r3, [r4, #4]
 800646c:	4649      	mov	r1, r9
 800646e:	4658      	mov	r0, fp
 8006470:	9e00      	ldr	r6, [sp, #0]
 8006472:	47b0      	blx	r6
 8006474:	f8da 3000 	ldr.w	r3, [sl]
 8006478:	6821      	ldr	r1, [r4, #0]
 800647a:	1d1a      	adds	r2, r3, #4
 800647c:	f8ca 2000 	str.w	r2, [sl]
 8006480:	f011 0f20 	tst.w	r1, #32
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	d010      	beq.n	80064aa <_scanf_i+0x1ce>
 8006488:	6018      	str	r0, [r3, #0]
 800648a:	68e3      	ldr	r3, [r4, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60e3      	str	r3, [r4, #12]
 8006490:	2000      	movs	r0, #0
 8006492:	eba5 0509 	sub.w	r5, r5, r9
 8006496:	44a8      	add	r8, r5
 8006498:	6925      	ldr	r5, [r4, #16]
 800649a:	4445      	add	r5, r8
 800649c:	6125      	str	r5, [r4, #16]
 800649e:	b007      	add	sp, #28
 80064a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a4:	f04f 0800 	mov.w	r8, #0
 80064a8:	e7ca      	b.n	8006440 <_scanf_i+0x164>
 80064aa:	07ca      	lsls	r2, r1, #31
 80064ac:	bf4c      	ite	mi
 80064ae:	8018      	strhmi	r0, [r3, #0]
 80064b0:	6018      	strpl	r0, [r3, #0]
 80064b2:	e7ea      	b.n	800648a <_scanf_i+0x1ae>
 80064b4:	2001      	movs	r0, #1
 80064b6:	e7f2      	b.n	800649e <_scanf_i+0x1c2>
 80064b8:	08006f68 	.word	0x08006f68
 80064bc:	08006665 	.word	0x08006665
 80064c0:	0800677d 	.word	0x0800677d
 80064c4:	08007033 	.word	0x08007033

080064c8 <_read_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4605      	mov	r5, r0
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	2200      	movs	r2, #0
 80064d2:	4c05      	ldr	r4, [pc, #20]	; (80064e8 <_read_r+0x20>)
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fb fcde 	bl	8001e98 <_read>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_read_r+0x1e>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_read_r+0x1e>
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	200003c8 	.word	0x200003c8

080064ec <_sbrk_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	2300      	movs	r3, #0
 80064f0:	4c05      	ldr	r4, [pc, #20]	; (8006508 <_sbrk_r+0x1c>)
 80064f2:	4605      	mov	r5, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	f7fb fd38 	bl	8001f6c <_sbrk>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d102      	bne.n	8006506 <_sbrk_r+0x1a>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	b103      	cbz	r3, 8006506 <_sbrk_r+0x1a>
 8006504:	602b      	str	r3, [r5, #0]
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	200003c8 	.word	0x200003c8

0800650c <__sccl>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	780b      	ldrb	r3, [r1, #0]
 8006510:	1e44      	subs	r4, r0, #1
 8006512:	2b5e      	cmp	r3, #94	; 0x5e
 8006514:	bf13      	iteet	ne
 8006516:	1c4a      	addne	r2, r1, #1
 8006518:	1c8a      	addeq	r2, r1, #2
 800651a:	784b      	ldrbeq	r3, [r1, #1]
 800651c:	2100      	movne	r1, #0
 800651e:	bf08      	it	eq
 8006520:	2101      	moveq	r1, #1
 8006522:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006526:	f804 1f01 	strb.w	r1, [r4, #1]!
 800652a:	42ac      	cmp	r4, r5
 800652c:	d1fb      	bne.n	8006526 <__sccl+0x1a>
 800652e:	b913      	cbnz	r3, 8006536 <__sccl+0x2a>
 8006530:	3a01      	subs	r2, #1
 8006532:	4610      	mov	r0, r2
 8006534:	bd70      	pop	{r4, r5, r6, pc}
 8006536:	f081 0401 	eor.w	r4, r1, #1
 800653a:	54c4      	strb	r4, [r0, r3]
 800653c:	1c51      	adds	r1, r2, #1
 800653e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8006542:	1e4e      	subs	r6, r1, #1
 8006544:	2d2d      	cmp	r5, #45	; 0x2d
 8006546:	460a      	mov	r2, r1
 8006548:	d006      	beq.n	8006558 <__sccl+0x4c>
 800654a:	2d5d      	cmp	r5, #93	; 0x5d
 800654c:	d0f1      	beq.n	8006532 <__sccl+0x26>
 800654e:	b90d      	cbnz	r5, 8006554 <__sccl+0x48>
 8006550:	4632      	mov	r2, r6
 8006552:	e7ee      	b.n	8006532 <__sccl+0x26>
 8006554:	462b      	mov	r3, r5
 8006556:	e7f0      	b.n	800653a <__sccl+0x2e>
 8006558:	780e      	ldrb	r6, [r1, #0]
 800655a:	2e5d      	cmp	r6, #93	; 0x5d
 800655c:	d0fa      	beq.n	8006554 <__sccl+0x48>
 800655e:	42b3      	cmp	r3, r6
 8006560:	dcf8      	bgt.n	8006554 <__sccl+0x48>
 8006562:	3301      	adds	r3, #1
 8006564:	429e      	cmp	r6, r3
 8006566:	54c4      	strb	r4, [r0, r3]
 8006568:	dcfb      	bgt.n	8006562 <__sccl+0x56>
 800656a:	3102      	adds	r1, #2
 800656c:	e7e7      	b.n	800653e <__sccl+0x32>

0800656e <_strtol_l.isra.0>:
 800656e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006572:	4680      	mov	r8, r0
 8006574:	4689      	mov	r9, r1
 8006576:	4692      	mov	sl, r2
 8006578:	461e      	mov	r6, r3
 800657a:	460f      	mov	r7, r1
 800657c:	463d      	mov	r5, r7
 800657e:	9808      	ldr	r0, [sp, #32]
 8006580:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006584:	f000 f966 	bl	8006854 <__locale_ctype_ptr_l>
 8006588:	4420      	add	r0, r4
 800658a:	7843      	ldrb	r3, [r0, #1]
 800658c:	f013 0308 	ands.w	r3, r3, #8
 8006590:	d132      	bne.n	80065f8 <_strtol_l.isra.0+0x8a>
 8006592:	2c2d      	cmp	r4, #45	; 0x2d
 8006594:	d132      	bne.n	80065fc <_strtol_l.isra.0+0x8e>
 8006596:	2201      	movs	r2, #1
 8006598:	787c      	ldrb	r4, [r7, #1]
 800659a:	1cbd      	adds	r5, r7, #2
 800659c:	2e00      	cmp	r6, #0
 800659e:	d05d      	beq.n	800665c <_strtol_l.isra.0+0xee>
 80065a0:	2e10      	cmp	r6, #16
 80065a2:	d109      	bne.n	80065b8 <_strtol_l.isra.0+0x4a>
 80065a4:	2c30      	cmp	r4, #48	; 0x30
 80065a6:	d107      	bne.n	80065b8 <_strtol_l.isra.0+0x4a>
 80065a8:	782b      	ldrb	r3, [r5, #0]
 80065aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065ae:	2b58      	cmp	r3, #88	; 0x58
 80065b0:	d14f      	bne.n	8006652 <_strtol_l.isra.0+0xe4>
 80065b2:	2610      	movs	r6, #16
 80065b4:	786c      	ldrb	r4, [r5, #1]
 80065b6:	3502      	adds	r5, #2
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	bf14      	ite	ne
 80065bc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80065c0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80065c4:	2700      	movs	r7, #0
 80065c6:	fbb1 fcf6 	udiv	ip, r1, r6
 80065ca:	4638      	mov	r0, r7
 80065cc:	fb06 1e1c 	mls	lr, r6, ip, r1
 80065d0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80065d4:	2b09      	cmp	r3, #9
 80065d6:	d817      	bhi.n	8006608 <_strtol_l.isra.0+0x9a>
 80065d8:	461c      	mov	r4, r3
 80065da:	42a6      	cmp	r6, r4
 80065dc:	dd23      	ble.n	8006626 <_strtol_l.isra.0+0xb8>
 80065de:	1c7b      	adds	r3, r7, #1
 80065e0:	d007      	beq.n	80065f2 <_strtol_l.isra.0+0x84>
 80065e2:	4584      	cmp	ip, r0
 80065e4:	d31c      	bcc.n	8006620 <_strtol_l.isra.0+0xb2>
 80065e6:	d101      	bne.n	80065ec <_strtol_l.isra.0+0x7e>
 80065e8:	45a6      	cmp	lr, r4
 80065ea:	db19      	blt.n	8006620 <_strtol_l.isra.0+0xb2>
 80065ec:	2701      	movs	r7, #1
 80065ee:	fb00 4006 	mla	r0, r0, r6, r4
 80065f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065f6:	e7eb      	b.n	80065d0 <_strtol_l.isra.0+0x62>
 80065f8:	462f      	mov	r7, r5
 80065fa:	e7bf      	b.n	800657c <_strtol_l.isra.0+0xe>
 80065fc:	2c2b      	cmp	r4, #43	; 0x2b
 80065fe:	bf04      	itt	eq
 8006600:	1cbd      	addeq	r5, r7, #2
 8006602:	787c      	ldrbeq	r4, [r7, #1]
 8006604:	461a      	mov	r2, r3
 8006606:	e7c9      	b.n	800659c <_strtol_l.isra.0+0x2e>
 8006608:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800660c:	2b19      	cmp	r3, #25
 800660e:	d801      	bhi.n	8006614 <_strtol_l.isra.0+0xa6>
 8006610:	3c37      	subs	r4, #55	; 0x37
 8006612:	e7e2      	b.n	80065da <_strtol_l.isra.0+0x6c>
 8006614:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006618:	2b19      	cmp	r3, #25
 800661a:	d804      	bhi.n	8006626 <_strtol_l.isra.0+0xb8>
 800661c:	3c57      	subs	r4, #87	; 0x57
 800661e:	e7dc      	b.n	80065da <_strtol_l.isra.0+0x6c>
 8006620:	f04f 37ff 	mov.w	r7, #4294967295
 8006624:	e7e5      	b.n	80065f2 <_strtol_l.isra.0+0x84>
 8006626:	1c7b      	adds	r3, r7, #1
 8006628:	d108      	bne.n	800663c <_strtol_l.isra.0+0xce>
 800662a:	2322      	movs	r3, #34	; 0x22
 800662c:	4608      	mov	r0, r1
 800662e:	f8c8 3000 	str.w	r3, [r8]
 8006632:	f1ba 0f00 	cmp.w	sl, #0
 8006636:	d107      	bne.n	8006648 <_strtol_l.isra.0+0xda>
 8006638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663c:	b102      	cbz	r2, 8006640 <_strtol_l.isra.0+0xd2>
 800663e:	4240      	negs	r0, r0
 8006640:	f1ba 0f00 	cmp.w	sl, #0
 8006644:	d0f8      	beq.n	8006638 <_strtol_l.isra.0+0xca>
 8006646:	b10f      	cbz	r7, 800664c <_strtol_l.isra.0+0xde>
 8006648:	f105 39ff 	add.w	r9, r5, #4294967295
 800664c:	f8ca 9000 	str.w	r9, [sl]
 8006650:	e7f2      	b.n	8006638 <_strtol_l.isra.0+0xca>
 8006652:	2430      	movs	r4, #48	; 0x30
 8006654:	2e00      	cmp	r6, #0
 8006656:	d1af      	bne.n	80065b8 <_strtol_l.isra.0+0x4a>
 8006658:	2608      	movs	r6, #8
 800665a:	e7ad      	b.n	80065b8 <_strtol_l.isra.0+0x4a>
 800665c:	2c30      	cmp	r4, #48	; 0x30
 800665e:	d0a3      	beq.n	80065a8 <_strtol_l.isra.0+0x3a>
 8006660:	260a      	movs	r6, #10
 8006662:	e7a9      	b.n	80065b8 <_strtol_l.isra.0+0x4a>

08006664 <_strtol_r>:
 8006664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006666:	4c06      	ldr	r4, [pc, #24]	; (8006680 <_strtol_r+0x1c>)
 8006668:	4d06      	ldr	r5, [pc, #24]	; (8006684 <_strtol_r+0x20>)
 800666a:	6824      	ldr	r4, [r4, #0]
 800666c:	6a24      	ldr	r4, [r4, #32]
 800666e:	2c00      	cmp	r4, #0
 8006670:	bf08      	it	eq
 8006672:	462c      	moveq	r4, r5
 8006674:	9400      	str	r4, [sp, #0]
 8006676:	f7ff ff7a 	bl	800656e <_strtol_l.isra.0>
 800667a:	b003      	add	sp, #12
 800667c:	bd30      	pop	{r4, r5, pc}
 800667e:	bf00      	nop
 8006680:	20000038 	.word	0x20000038
 8006684:	2000009c 	.word	0x2000009c

08006688 <_strtoul_l.isra.0>:
 8006688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800668c:	4680      	mov	r8, r0
 800668e:	4689      	mov	r9, r1
 8006690:	4692      	mov	sl, r2
 8006692:	461e      	mov	r6, r3
 8006694:	460f      	mov	r7, r1
 8006696:	463d      	mov	r5, r7
 8006698:	9808      	ldr	r0, [sp, #32]
 800669a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800669e:	f000 f8d9 	bl	8006854 <__locale_ctype_ptr_l>
 80066a2:	4420      	add	r0, r4
 80066a4:	7843      	ldrb	r3, [r0, #1]
 80066a6:	f013 0308 	ands.w	r3, r3, #8
 80066aa:	d130      	bne.n	800670e <_strtoul_l.isra.0+0x86>
 80066ac:	2c2d      	cmp	r4, #45	; 0x2d
 80066ae:	d130      	bne.n	8006712 <_strtoul_l.isra.0+0x8a>
 80066b0:	2101      	movs	r1, #1
 80066b2:	787c      	ldrb	r4, [r7, #1]
 80066b4:	1cbd      	adds	r5, r7, #2
 80066b6:	2e00      	cmp	r6, #0
 80066b8:	d05c      	beq.n	8006774 <_strtoul_l.isra.0+0xec>
 80066ba:	2e10      	cmp	r6, #16
 80066bc:	d109      	bne.n	80066d2 <_strtoul_l.isra.0+0x4a>
 80066be:	2c30      	cmp	r4, #48	; 0x30
 80066c0:	d107      	bne.n	80066d2 <_strtoul_l.isra.0+0x4a>
 80066c2:	782b      	ldrb	r3, [r5, #0]
 80066c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80066c8:	2b58      	cmp	r3, #88	; 0x58
 80066ca:	d14e      	bne.n	800676a <_strtoul_l.isra.0+0xe2>
 80066cc:	2610      	movs	r6, #16
 80066ce:	786c      	ldrb	r4, [r5, #1]
 80066d0:	3502      	adds	r5, #2
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295
 80066d6:	fbb2 f2f6 	udiv	r2, r2, r6
 80066da:	2300      	movs	r3, #0
 80066dc:	fb06 fc02 	mul.w	ip, r6, r2
 80066e0:	4618      	mov	r0, r3
 80066e2:	ea6f 0c0c 	mvn.w	ip, ip
 80066e6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80066ea:	2f09      	cmp	r7, #9
 80066ec:	d817      	bhi.n	800671e <_strtoul_l.isra.0+0x96>
 80066ee:	463c      	mov	r4, r7
 80066f0:	42a6      	cmp	r6, r4
 80066f2:	dd23      	ble.n	800673c <_strtoul_l.isra.0+0xb4>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db1e      	blt.n	8006736 <_strtoul_l.isra.0+0xae>
 80066f8:	4282      	cmp	r2, r0
 80066fa:	d31c      	bcc.n	8006736 <_strtoul_l.isra.0+0xae>
 80066fc:	d101      	bne.n	8006702 <_strtoul_l.isra.0+0x7a>
 80066fe:	45a4      	cmp	ip, r4
 8006700:	db19      	blt.n	8006736 <_strtoul_l.isra.0+0xae>
 8006702:	2301      	movs	r3, #1
 8006704:	fb00 4006 	mla	r0, r0, r6, r4
 8006708:	f815 4b01 	ldrb.w	r4, [r5], #1
 800670c:	e7eb      	b.n	80066e6 <_strtoul_l.isra.0+0x5e>
 800670e:	462f      	mov	r7, r5
 8006710:	e7c1      	b.n	8006696 <_strtoul_l.isra.0+0xe>
 8006712:	2c2b      	cmp	r4, #43	; 0x2b
 8006714:	bf04      	itt	eq
 8006716:	1cbd      	addeq	r5, r7, #2
 8006718:	787c      	ldrbeq	r4, [r7, #1]
 800671a:	4619      	mov	r1, r3
 800671c:	e7cb      	b.n	80066b6 <_strtoul_l.isra.0+0x2e>
 800671e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006722:	2f19      	cmp	r7, #25
 8006724:	d801      	bhi.n	800672a <_strtoul_l.isra.0+0xa2>
 8006726:	3c37      	subs	r4, #55	; 0x37
 8006728:	e7e2      	b.n	80066f0 <_strtoul_l.isra.0+0x68>
 800672a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800672e:	2f19      	cmp	r7, #25
 8006730:	d804      	bhi.n	800673c <_strtoul_l.isra.0+0xb4>
 8006732:	3c57      	subs	r4, #87	; 0x57
 8006734:	e7dc      	b.n	80066f0 <_strtoul_l.isra.0+0x68>
 8006736:	f04f 33ff 	mov.w	r3, #4294967295
 800673a:	e7e5      	b.n	8006708 <_strtoul_l.isra.0+0x80>
 800673c:	2b00      	cmp	r3, #0
 800673e:	da09      	bge.n	8006754 <_strtoul_l.isra.0+0xcc>
 8006740:	2322      	movs	r3, #34	; 0x22
 8006742:	f04f 30ff 	mov.w	r0, #4294967295
 8006746:	f8c8 3000 	str.w	r3, [r8]
 800674a:	f1ba 0f00 	cmp.w	sl, #0
 800674e:	d107      	bne.n	8006760 <_strtoul_l.isra.0+0xd8>
 8006750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006754:	b101      	cbz	r1, 8006758 <_strtoul_l.isra.0+0xd0>
 8006756:	4240      	negs	r0, r0
 8006758:	f1ba 0f00 	cmp.w	sl, #0
 800675c:	d0f8      	beq.n	8006750 <_strtoul_l.isra.0+0xc8>
 800675e:	b10b      	cbz	r3, 8006764 <_strtoul_l.isra.0+0xdc>
 8006760:	f105 39ff 	add.w	r9, r5, #4294967295
 8006764:	f8ca 9000 	str.w	r9, [sl]
 8006768:	e7f2      	b.n	8006750 <_strtoul_l.isra.0+0xc8>
 800676a:	2430      	movs	r4, #48	; 0x30
 800676c:	2e00      	cmp	r6, #0
 800676e:	d1b0      	bne.n	80066d2 <_strtoul_l.isra.0+0x4a>
 8006770:	2608      	movs	r6, #8
 8006772:	e7ae      	b.n	80066d2 <_strtoul_l.isra.0+0x4a>
 8006774:	2c30      	cmp	r4, #48	; 0x30
 8006776:	d0a4      	beq.n	80066c2 <_strtoul_l.isra.0+0x3a>
 8006778:	260a      	movs	r6, #10
 800677a:	e7aa      	b.n	80066d2 <_strtoul_l.isra.0+0x4a>

0800677c <_strtoul_r>:
 800677c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800677e:	4c06      	ldr	r4, [pc, #24]	; (8006798 <_strtoul_r+0x1c>)
 8006780:	4d06      	ldr	r5, [pc, #24]	; (800679c <_strtoul_r+0x20>)
 8006782:	6824      	ldr	r4, [r4, #0]
 8006784:	6a24      	ldr	r4, [r4, #32]
 8006786:	2c00      	cmp	r4, #0
 8006788:	bf08      	it	eq
 800678a:	462c      	moveq	r4, r5
 800678c:	9400      	str	r4, [sp, #0]
 800678e:	f7ff ff7b 	bl	8006688 <_strtoul_l.isra.0>
 8006792:	b003      	add	sp, #12
 8006794:	bd30      	pop	{r4, r5, pc}
 8006796:	bf00      	nop
 8006798:	20000038 	.word	0x20000038
 800679c:	2000009c 	.word	0x2000009c

080067a0 <__submore>:
 80067a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a4:	460c      	mov	r4, r1
 80067a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80067a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067ac:	4299      	cmp	r1, r3
 80067ae:	d11b      	bne.n	80067e8 <__submore+0x48>
 80067b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067b4:	f7ff f866 	bl	8005884 <_malloc_r>
 80067b8:	b918      	cbnz	r0, 80067c2 <__submore+0x22>
 80067ba:	f04f 30ff 	mov.w	r0, #4294967295
 80067be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80067c8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80067cc:	6360      	str	r0, [r4, #52]	; 0x34
 80067ce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80067d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80067d6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80067da:	7043      	strb	r3, [r0, #1]
 80067dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80067e0:	7003      	strb	r3, [r0, #0]
 80067e2:	6020      	str	r0, [r4, #0]
 80067e4:	2000      	movs	r0, #0
 80067e6:	e7ea      	b.n	80067be <__submore+0x1e>
 80067e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80067ea:	0077      	lsls	r7, r6, #1
 80067ec:	463a      	mov	r2, r7
 80067ee:	f000 f870 	bl	80068d2 <_realloc_r>
 80067f2:	4605      	mov	r5, r0
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d0e0      	beq.n	80067ba <__submore+0x1a>
 80067f8:	eb00 0806 	add.w	r8, r0, r6
 80067fc:	4601      	mov	r1, r0
 80067fe:	4632      	mov	r2, r6
 8006800:	4640      	mov	r0, r8
 8006802:	f000 f859 	bl	80068b8 <memcpy>
 8006806:	f8c4 8000 	str.w	r8, [r4]
 800680a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800680e:	e7e9      	b.n	80067e4 <__submore+0x44>

08006810 <_fstat_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	2300      	movs	r3, #0
 8006814:	4c06      	ldr	r4, [pc, #24]	; (8006830 <_fstat_r+0x20>)
 8006816:	4605      	mov	r5, r0
 8006818:	4608      	mov	r0, r1
 800681a:	4611      	mov	r1, r2
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	f7fb fb7f 	bl	8001f20 <_fstat>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	d102      	bne.n	800682c <_fstat_r+0x1c>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	b103      	cbz	r3, 800682c <_fstat_r+0x1c>
 800682a:	602b      	str	r3, [r5, #0]
 800682c:	bd38      	pop	{r3, r4, r5, pc}
 800682e:	bf00      	nop
 8006830:	200003c8 	.word	0x200003c8

08006834 <_isatty_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	2300      	movs	r3, #0
 8006838:	4c05      	ldr	r4, [pc, #20]	; (8006850 <_isatty_r+0x1c>)
 800683a:	4605      	mov	r5, r0
 800683c:	4608      	mov	r0, r1
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	f7fb fb7d 	bl	8001f3e <_isatty>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_isatty_r+0x1a>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	b103      	cbz	r3, 800684e <_isatty_r+0x1a>
 800684c:	602b      	str	r3, [r5, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	200003c8 	.word	0x200003c8

08006854 <__locale_ctype_ptr_l>:
 8006854:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006858:	4770      	bx	lr
	...

0800685c <__locale_ctype_ptr>:
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <__locale_ctype_ptr+0x14>)
 800685e:	4a05      	ldr	r2, [pc, #20]	; (8006874 <__locale_ctype_ptr+0x18>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	2b00      	cmp	r3, #0
 8006866:	bf08      	it	eq
 8006868:	4613      	moveq	r3, r2
 800686a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800686e:	4770      	bx	lr
 8006870:	20000038 	.word	0x20000038
 8006874:	2000009c 	.word	0x2000009c

08006878 <__ascii_mbtowc>:
 8006878:	b082      	sub	sp, #8
 800687a:	b901      	cbnz	r1, 800687e <__ascii_mbtowc+0x6>
 800687c:	a901      	add	r1, sp, #4
 800687e:	b142      	cbz	r2, 8006892 <__ascii_mbtowc+0x1a>
 8006880:	b14b      	cbz	r3, 8006896 <__ascii_mbtowc+0x1e>
 8006882:	7813      	ldrb	r3, [r2, #0]
 8006884:	600b      	str	r3, [r1, #0]
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	1c10      	adds	r0, r2, #0
 800688a:	bf18      	it	ne
 800688c:	2001      	movne	r0, #1
 800688e:	b002      	add	sp, #8
 8006890:	4770      	bx	lr
 8006892:	4610      	mov	r0, r2
 8006894:	e7fb      	b.n	800688e <__ascii_mbtowc+0x16>
 8006896:	f06f 0001 	mvn.w	r0, #1
 800689a:	e7f8      	b.n	800688e <__ascii_mbtowc+0x16>

0800689c <memchr>:
 800689c:	b510      	push	{r4, lr}
 800689e:	b2c9      	uxtb	r1, r1
 80068a0:	4402      	add	r2, r0
 80068a2:	4290      	cmp	r0, r2
 80068a4:	4603      	mov	r3, r0
 80068a6:	d101      	bne.n	80068ac <memchr+0x10>
 80068a8:	2300      	movs	r3, #0
 80068aa:	e003      	b.n	80068b4 <memchr+0x18>
 80068ac:	781c      	ldrb	r4, [r3, #0]
 80068ae:	3001      	adds	r0, #1
 80068b0:	428c      	cmp	r4, r1
 80068b2:	d1f6      	bne.n	80068a2 <memchr+0x6>
 80068b4:	4618      	mov	r0, r3
 80068b6:	bd10      	pop	{r4, pc}

080068b8 <memcpy>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	1e43      	subs	r3, r0, #1
 80068bc:	440a      	add	r2, r1
 80068be:	4291      	cmp	r1, r2
 80068c0:	d100      	bne.n	80068c4 <memcpy+0xc>
 80068c2:	bd10      	pop	{r4, pc}
 80068c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068cc:	e7f7      	b.n	80068be <memcpy+0x6>

080068ce <__malloc_lock>:
 80068ce:	4770      	bx	lr

080068d0 <__malloc_unlock>:
 80068d0:	4770      	bx	lr

080068d2 <_realloc_r>:
 80068d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d4:	4607      	mov	r7, r0
 80068d6:	4614      	mov	r4, r2
 80068d8:	460e      	mov	r6, r1
 80068da:	b921      	cbnz	r1, 80068e6 <_realloc_r+0x14>
 80068dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068e0:	4611      	mov	r1, r2
 80068e2:	f7fe bfcf 	b.w	8005884 <_malloc_r>
 80068e6:	b922      	cbnz	r2, 80068f2 <_realloc_r+0x20>
 80068e8:	f7fe ff80 	bl	80057ec <_free_r>
 80068ec:	4625      	mov	r5, r4
 80068ee:	4628      	mov	r0, r5
 80068f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f2:	f000 f821 	bl	8006938 <_malloc_usable_size_r>
 80068f6:	42a0      	cmp	r0, r4
 80068f8:	d20f      	bcs.n	800691a <_realloc_r+0x48>
 80068fa:	4621      	mov	r1, r4
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7fe ffc1 	bl	8005884 <_malloc_r>
 8006902:	4605      	mov	r5, r0
 8006904:	2800      	cmp	r0, #0
 8006906:	d0f2      	beq.n	80068ee <_realloc_r+0x1c>
 8006908:	4631      	mov	r1, r6
 800690a:	4622      	mov	r2, r4
 800690c:	f7ff ffd4 	bl	80068b8 <memcpy>
 8006910:	4631      	mov	r1, r6
 8006912:	4638      	mov	r0, r7
 8006914:	f7fe ff6a 	bl	80057ec <_free_r>
 8006918:	e7e9      	b.n	80068ee <_realloc_r+0x1c>
 800691a:	4635      	mov	r5, r6
 800691c:	e7e7      	b.n	80068ee <_realloc_r+0x1c>

0800691e <__ascii_wctomb>:
 800691e:	b149      	cbz	r1, 8006934 <__ascii_wctomb+0x16>
 8006920:	2aff      	cmp	r2, #255	; 0xff
 8006922:	bf8b      	itete	hi
 8006924:	238a      	movhi	r3, #138	; 0x8a
 8006926:	700a      	strbls	r2, [r1, #0]
 8006928:	6003      	strhi	r3, [r0, #0]
 800692a:	2001      	movls	r0, #1
 800692c:	bf88      	it	hi
 800692e:	f04f 30ff 	movhi.w	r0, #4294967295
 8006932:	4770      	bx	lr
 8006934:	4608      	mov	r0, r1
 8006936:	4770      	bx	lr

08006938 <_malloc_usable_size_r>:
 8006938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800693c:	1f18      	subs	r0, r3, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	bfbc      	itt	lt
 8006942:	580b      	ldrlt	r3, [r1, r0]
 8006944:	18c0      	addlt	r0, r0, r3
 8006946:	4770      	bx	lr

08006948 <_init>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	bf00      	nop
 800694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694e:	bc08      	pop	{r3}
 8006950:	469e      	mov	lr, r3
 8006952:	4770      	bx	lr

08006954 <_fini>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	bf00      	nop
 8006958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695a:	bc08      	pop	{r3}
 800695c:	469e      	mov	lr, r3
 800695e:	4770      	bx	lr
